
LS_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080093ec  080093ec  0000a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096b4  080096b4  0000a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080096b8  080096b8  0000a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  080096bc  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000030  080096e4  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000068  08009719  0000b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  2000007c  0800972a  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800972a  0000b50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800972a  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00032251  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000062b3  00000000  00000000  0003dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d80  00000000  00000000  00043fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002322  00000000  00000000  00046d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c9b4  00000000  00000000  00049042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003281a  00000000  00000000  000759f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001042f2  00000000  00000000  000a8210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001ac502  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c0dc  00000000  00000000  001ac548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000046  00000000  00000000  001b8624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000007c 	.word	0x2000007c
 8000158:	00000000 	.word	0x00000000
 800015c:	080093d4 	.word	0x080093d4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000080 	.word	0x20000080
 8000178:	080093d4 	.word	0x080093d4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f007 fbd3 	bl	8007c44 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fe64 	bl	800716e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	080093ec 	.word	0x080093ec

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	22ff      	movs	r2, #255	@ 0xff
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	22ca      	movs	r2, #202	@ 0xca
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2253      	movs	r2, #83	@ 0x53
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f023 0207 	bic.w	r2, r3, #7
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <MX_APPE_Config+0x18>)
 800060a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000610:	f000 f824 	bl	800065c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000614:	f000 f829 	bl	800066a <Config_HSE>

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000624:	f000 f835 	bl	8000692 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000628:	f000 f84e 	bl	80006c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800062c:	4903      	ldr	r1, [pc, #12]	@ (800063c <MX_APPE_Init+0x1c>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd76 	bl	8001120 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000634:	f000 f856 	bl	80006e4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000174 	.word	0x20000174

08000640 <Init_Smps>:

void Init_Smps(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000644:	bf00      	nop
}
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <Init_Exti>:

void Init_Exti(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000652:	2050      	movs	r0, #80	@ 0x50
 8000654:	f7ff ff44 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f007 fb73 	bl	8007d5c <OTP_Read>
 8000676:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000688:	bf00      	nop
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <System_Init>:

static void System_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  Init_Smps();
 8000696:	f7ff ffd3 	bl	8000640 <Init_Smps>

  Init_Exti();
 800069a:	f7ff ffd8 	bl	800064e <Init_Exti>

  Init_Rtc();
 800069e:	f000 f803 	bl	80006a8 <Init_Rtc>

  return;
 80006a2:	bf00      	nop
}
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Init_Rtc+0x1c>)
 80006ae:	f7ff ff86 	bl	80005be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <Init_Rtc+0x1c>)
 80006b6:	f7ff ff92 	bl	80005de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Init_Rtc+0x1c>)
 80006bc:	f7ff ff72 	bl	80005a4 <LL_RTC_EnableWriteProtection>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40002800 	.word	0x40002800

080006c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006d0:	f7ff ff38 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006d4:	f008 fbc8 	bl	8008e68 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feeb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ea:	f007 f8f5 	bl	80078d8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <appe_Tl_Init+0x50>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2004      	movs	r0, #4
 80006f4:	f008 fcf6 	bl	80090e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <appe_Tl_Init+0x54>)
 80006fa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <appe_Tl_Init+0x58>)
 80006fe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <appe_Tl_Init+0x5c>)
 8000706:	f006 ffa9 	bl	800765c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <appe_Tl_Init+0x60>)
 800070c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <appe_Tl_Init+0x64>)
 8000710:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <appe_Tl_Init+0x68>)
 8000714:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000716:	f240 533c 	movw	r3, #1340	@ 0x53c
 800071a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f007 fa1b 	bl	8007b5c <TL_MM_Init>

  TL_Enable();
 8000726:	f007 f8d1 	bl	80078cc <TL_Enable>

  return;
 800072a:	bf00      	nop
}
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08007695 	.word	0x08007695
 8000738:	20030734 	.word	0x20030734
 800073c:	08000751 	.word	0x08000751
 8000740:	08000769 	.word	0x08000769
 8000744:	2003094c 	.word	0x2003094c
 8000748:	20030840 	.word	0x20030840
 800074c:	200301f8 	.word	0x200301f8

08000750 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800075a:	bf00      	nop
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	330b      	adds	r3, #11
 8000776:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000782:	2b07      	cmp	r3, #7
 8000784:	d81f      	bhi.n	80007c6 <APPE_SysUserEvtRx+0x5e>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <APPE_SysUserEvtRx+0x24>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007c7 	.word	0x080007c7
 8000798:	080007c7 	.word	0x080007c7
 800079c:	080007c7 	.word	0x080007c7
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007c7 	.word	0x080007c7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fd09 	bl	80071c8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81b 	bl	80007f2 <APPE_SysEvtReadyProcessing>
    break;
 80007bc:	e004      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f806 	bl	80007d0 <APPE_SysEvtError>
    break;
 80007c4:	e000      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007c6:	bf00      	nop
  }

  return;
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	330b      	adds	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007e6:	bf00      	nop
}
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b08a      	sub	sp, #40	@ 0x28
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	330b      	adds	r3, #11
 8000816:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3302      	adds	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11d      	bne.n	8000862 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000826:	f7ff fe29 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800082a:	230f      	movs	r3, #15
 800082c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000832:	f7ff fea9 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000836:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	b29b      	uxth	r3, r3
 800083c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800083e:	f7ff fe95 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000842:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29b      	uxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fca4 	bl	800719c <SHCI_C2_Config>

    APP_BLE_Init();
 8000854:	f007 fb8c 	bl	8007f70 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f008 fb16 	bl	8008e8c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000860:	e007      	b.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  return;
 8000870:	bf00      	nop
 8000872:	bf00      	nop
}
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800087e:	f04f 30ff 	mov.w	r0, #4294967295
 8000882:	f008 fb33 	bl	8008eec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800088e:	bf00      	nop
}
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f008 fb21 	bl	8008eec <UTIL_SEQ_Run>
  return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2004      	movs	r0, #4
 80008be:	f008 fc33 	bl	8009128 <UTIL_SEQ_SetTask>
  return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f008 fc94 	bl	8009200 <UTIL_SEQ_SetEvt>
  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f008 fca9 	bl	8009240 <UTIL_SEQ_WaitEvt>
  return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <LL_EXTI_EnableIT_0_31>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000902:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58000800 	.word	0x58000800

08000920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58000800 	.word	0x58000800

08000944 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	b29b      	uxth	r3, r3
 8000958:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800095a:	e005      	b.n	8000968 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	b29b      	uxth	r3, r3
 8000966:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f5      	bne.n	800095c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000970:	683b      	ldr	r3, [r7, #0]
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800

08000984 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	491d      	ldr	r1, [pc, #116]	@ (8000a0c <LinkTimerAfter+0x88>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3315      	adds	r3, #21
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d009      	beq.n	80009c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4916      	ldr	r1, [pc, #88]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3314      	adds	r3, #20
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4911      	ldr	r1, [pc, #68]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3315      	adds	r3, #21
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3314      	adds	r3, #20
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4907      	ldr	r1, [pc, #28]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000098 	.word	0x20000098

08000a10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <LinkTimerBefore+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d032      	beq.n	8000a92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	4927      	ldr	r1, [pc, #156]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	4922      	ldr	r1, [pc, #136]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4918      	ldr	r1, [pc, #96]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4913      	ldr	r1, [pc, #76]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a90:	e014      	b.n	8000abc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490d      	ldr	r1, [pc, #52]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4908      	ldr	r1, [pc, #32]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000128 	.word	0x20000128
 8000acc:	20000098 	.word	0x20000098

08000ad0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <linkTimer+0x144>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d118      	bne.n	8000b16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <linkTimer+0x144>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <linkTimer+0x148>)
 8000aec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aee:	4a49      	ldr	r2, [pc, #292]	@ (8000c14 <linkTimer+0x144>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4949      	ldr	r1, [pc, #292]	@ (8000c1c <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <linkTimer+0x150>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	e078      	b.n	8000c08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b16:	f000 f909 	bl	8000d2c <ReturnTimeElapsed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	493e      	ldr	r1, [pc, #248]	@ (8000c1c <linkTimer+0x14c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4419      	add	r1, r3
 8000b36:	4839      	ldr	r0, [pc, #228]	@ (8000c1c <linkTimer+0x14c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4934      	ldr	r1, [pc, #208]	@ (8000c1c <linkTimer+0x14c>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <linkTimer+0x144>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <linkTimer+0x14c>)
 8000b64:	460b      	mov	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	440b      	add	r3, r1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3308      	adds	r3, #8
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d337      	bcc.n	8000be8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <linkTimer+0x144>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <linkTimer+0x14c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3315      	adds	r3, #21
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b92:	e013      	b.n	8000bbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b94:	7b7a      	ldrb	r2, [r7, #13]
 8000b96:	4921      	ldr	r1, [pc, #132]	@ (8000c1c <linkTimer+0x14c>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ba8:	7b7a      	ldrb	r2, [r7, #13]
 8000baa:	491c      	ldr	r1, [pc, #112]	@ (8000c1c <linkTimer+0x14c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d00b      	beq.n	8000bda <linkTimer+0x10a>
 8000bc2:	7b3a      	ldrb	r2, [r7, #12]
 8000bc4:	4915      	ldr	r1, [pc, #84]	@ (8000c1c <linkTimer+0x14c>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d2dc      	bcs.n	8000b94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bda:	7b7a      	ldrb	r2, [r7, #13]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fecf 	bl	8000984 <LinkTimerAfter>
 8000be6:	e00f      	b.n	8000c08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <linkTimer+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <linkTimer+0x144>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000128 	.word	0x20000128
 8000c18:	20000129 	.word	0x20000129
 8000c1c:	20000098 	.word	0x20000098
 8000c20:	2000012c 	.word	0x2000012c

08000c24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d111      	bne.n	8000c64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <UnlinkTimer+0xfc>)
 8000c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e03e      	b.n	8000ce2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	492f      	ldr	r1, [pc, #188]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	492a      	ldr	r1, [pc, #168]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3315      	adds	r3, #21
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d013      	beq.n	8000ce2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cba:	79f9      	ldrb	r1, [r7, #7]
 8000cbc:	7bba      	ldrb	r2, [r7, #14]
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	3314      	adds	r3, #20
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	4602      	mov	r2, r0
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d107      	bne.n	8000d10 <UnlinkTimer+0xec>
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <UnlinkTimer+0x104>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000128 	.word	0x20000128
 8000d20:	20000129 	.word	0x20000129
 8000d24:	20000098 	.word	0x20000098
 8000d28:	2000012c 	.word	0x2000012c

08000d2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d026      	beq.n	8000d8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d3c:	f7ff fe02 	bl	8000944 <ReadRtcSsrValue>
 8000d40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d805      	bhi.n	8000d58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00a      	b.n	8000d6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <ReturnTimeElapsed+0x74>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <ReturnTimeElapsed+0x78>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <ReturnTimeElapsed+0x7c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	20000134 	.word	0x20000134
 8000da4:	20000132 	.word	0x20000132
 8000da8:	20000131 	.word	0x20000131

08000dac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dbc:	f7ff fdc2 	bl	8000944 <ReadRtcSsrValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000dc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f001 fa12 	bl	80021f0 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dcc:	e039      	b.n	8000e42 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d803      	bhi.n	8000ddc <RestartWakeupCounter+0x30>
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <RestartWakeupCounter+0xa0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f8      	beq.n	8000de4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e02:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <RestartWakeupCounter+0xa8>)
 8000e06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 f9fd 	bl	800220c <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e22:	f7ff fd8f 	bl	8000944 <ReadRtcSsrValue>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e3a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e3c:	f3af 8000 	nop.w
  return ;
 8000e40:	bf00      	nop
}
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000012c 	.word	0x2000012c
 8000e4c:	20000131 	.word	0x20000131
 8000e50:	20000174 	.word	0x20000174
 8000e54:	58000800 	.word	0x58000800
 8000e58:	40002800 	.word	0x40002800

08000e5c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <RescheduleTimerList+0x11c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d107      	bne.n	8000e80 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e70:	bf00      	nop
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f8      	bne.n	8000e72 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e80:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e8e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <RescheduleTimerList+0x124>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	493a      	ldr	r1, [pc, #232]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eaa:	f7ff ff3f 	bl	8000d2c <ReturnTimeElapsed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d205      	bcs.n	8000ec6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e04d      	b.n	8000f62 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4a30      	ldr	r2, [pc, #192]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	4413      	add	r3, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d906      	bls.n	8000ee6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e03d      	b.n	8000f62 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ef6:	e034      	b.n	8000f62 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	4922      	ldr	r1, [pc, #136]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d20a      	bcs.n	8000f26 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3308      	adds	r3, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e013      	b.n	8000f4e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	4916      	ldr	r1, [pc, #88]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	1ac9      	subs	r1, r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4403      	add	r3, r0
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3315      	adds	r3, #21
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d1c7      	bne.n	8000ef8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff1e 	bl	8000dac <RestartWakeupCounter>

  return ;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	20000174 	.word	0x20000174
 8000f80:	20000128 	.word	0x20000128
 8000f84:	20000098 	.word	0x20000098
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	20000136 	.word	0x20000136

08000f90 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f96:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8000f9c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa4:	4b59      	ldr	r3, [pc, #356]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	22ca      	movs	r2, #202	@ 0xca
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fac:	4b57      	ldr	r3, [pc, #348]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2253      	movs	r2, #83	@ 0x53
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fb4:	4b55      	ldr	r3, [pc, #340]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b54      	ldr	r3, [pc, #336]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fc2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	@ (8001110 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	4950      	ldr	r1, [pc, #320]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d16e      	bne.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fea:	494a      	ldr	r1, [pc, #296]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ffe:	4945      	ldr	r1, [pc, #276]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04c      	beq.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	493d      	ldr	r1, [pc, #244]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d124      	bne.n	800107e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdf2 	bl	8000c24 <UnlinkTimer>
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
}
 800104a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800104c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001050:	4930      	ldr	r1, [pc, #192]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9b8 	bl	80013dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	22ca      	movs	r2, #202	@ 0xca
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2253      	movs	r2, #83	@ 0x53
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
 800107c:	e012      	b.n	80010a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f383 8810 	msr	PRIMASK, r3
}
 8001088:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800108a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f920 	bl	80012d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	22ca      	movs	r2, #202	@ 0xca
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2253      	movs	r2, #83	@ 0x53
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	4619      	mov	r1, r3
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f000 fa1b 	bl	80014e8 <HW_TS_RTC_Int_AppNot>
 80010b2:	e022      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010b4:	f7ff fed2 	bl	8000e5c <RescheduleTimerList>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f383 8810 	msr	PRIMASK, r3
}
 80010c2:	e01a      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010c4:	bf00      	nop
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f8      	beq.n	80010c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f383 8810 	msr	PRIMASK, r3
}
 80010f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001102:	bf00      	nop
}
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000174 	.word	0x20000174
 8001110:	20000128 	.word	0x20000128
 8001114:	20000098 	.word	0x20000098
 8001118:	20000130 	.word	0x20000130
 800111c:	58000800 	.word	0x58000800

08001120 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <HW_TS_Init+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <HW_TS_Init+0x188>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2253      	movs	r2, #83	@ 0x53
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HW_TS_Init+0x18c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HW_TS_Init+0x18c>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f1c3 0304 	rsb	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b55      	ldr	r3, [pc, #340]	@ (80012b0 <HW_TS_Init+0x190>)
 800115c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800115e:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HW_TS_Init+0x18c>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001166:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800116a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d101      	bne.n	8001182 <HW_TS_Init+0x62>
  {
    return 32U;
 800117e:	2220      	movs	r2, #32
 8001180:	e003      	b.n	800118a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	40d3      	lsrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <HW_TS_Init+0x194>)
 8001194:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <HW_TS_Init+0x18c>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HW_TS_Init+0x198>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011aa:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HW_TS_Init+0x198>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <HW_TS_Init+0x194>)
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011bc:	4a3c      	ldr	r2, [pc, #240]	@ (80012b0 <HW_TS_Init+0x190>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	40d3      	lsrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d904      	bls.n	80011d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HW_TS_Init+0x19c>)
 80011d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HW_TS_Init+0x19c>)
 80011de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011e4:	f7ff fb9c 	bl	8000920 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011ec:	f7ff fb84 	bl	80008f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13d      	bne.n	8001272 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011f6:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HW_TS_Init+0x1a0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HW_TS_Init+0x1a4>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e00c      	b.n	8001224 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800120a:	7ffa      	ldrb	r2, [r7, #31]
 800120c:	492e      	ldr	r1, [pc, #184]	@ (80012c8 <HW_TS_Init+0x1a8>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	330c      	adds	r3, #12
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3301      	adds	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d9ef      	bls.n	800120a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HW_TS_Init+0x1ac>)
 800122c:	2206      	movs	r2, #6
 800122e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HW_TS_Init+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HW_TS_Init+0x188>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800123e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HW_TS_Init+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HW_TS_Init+0x188>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HW_TS_Init+0x1b0>)
 8001254:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001258:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800125a:	2003      	movs	r0, #3
 800125c:	f000 ffd6 	bl	800220c <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HW_TS_Init+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e009      	b.n	8001286 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 ffb5 	bl	80021f0 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800128e:	2200      	movs	r2, #0
 8001290:	2103      	movs	r1, #3
 8001292:	2003      	movs	r0, #3
 8001294:	f000 ff76 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001298:	2003      	movs	r0, #3
 800129a:	f000 ff8d 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  return;
 800129e:	bf00      	nop
}
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000174 	.word	0x20000174
 80012ac:	40002800 	.word	0x40002800
 80012b0:	20000131 	.word	0x20000131
 80012b4:	20000132 	.word	0x20000132
 80012b8:	20000134 	.word	0x20000134
 80012bc:	20000136 	.word	0x20000136
 80012c0:	20000130 	.word	0x20000130
 80012c4:	2000012c 	.word	0x2000012c
 80012c8:	20000098 	.word	0x20000098
 80012cc:	20000128 	.word	0x20000128
 80012d0:	58000800 	.word	0x58000800

080012d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012de:	f3ef 8310 	mrs	r3, PRIMASK
 80012e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 ff71 	bl	80021d4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ca      	movs	r2, #202	@ 0xca
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2253      	movs	r2, #83	@ 0x53
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HW_TS_Stop+0xf4>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	330c      	adds	r3, #12
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d142      	bne.n	80013a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fc80 	bl	8000c24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HW_TS_Stop+0xf8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d12f      	bne.n	8001390 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <HW_TS_Stop+0xfc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133c:	d107      	bne.n	800134e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800133e:	bf00      	nop
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f8      	bne.n	8001340 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800135c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800135e:	bf00      	nop
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f8      	beq.n	8001360 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800137e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HW_TS_Stop+0x100>)
 8001382:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001386:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001388:	2003      	movs	r0, #3
 800138a:	f000 ff3f 	bl	800220c <HAL_NVIC_ClearPendingIRQ>
 800138e:	e007      	b.n	80013a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HW_TS_Stop+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	7cfa      	ldrb	r2, [r7, #19]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800139c:	f7ff fd5e 	bl	8000e5c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 ff05 	bl	80021b8 <HAL_NVIC_EnableIRQ>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f383 8810 	msr	PRIMASK, r3
}
 80013b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000174 	.word	0x20000174
 80013c8:	20000098 	.word	0x20000098
 80013cc:	20000128 	.word	0x20000128
 80013d0:	40002800 	.word	0x40002800
 80013d4:	58000800 	.word	0x58000800
 80013d8:	20000129 	.word	0x20000129

080013dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	493b      	ldr	r1, [pc, #236]	@ (80014d8 <HW_TS_Start+0xfc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	330c      	adds	r3, #12
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d103      	bne.n	8001408 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff66 	bl	80012d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001408:	f3ef 8310 	mrs	r3, PRIMASK
 800140c:	60fb      	str	r3, [r7, #12]
  return(result);
 800140e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001412:	b672      	cpsid	i
}
 8001414:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001416:	2003      	movs	r0, #3
 8001418:	f000 fedc 	bl	80021d4 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HW_TS_Start+0x100>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	22ca      	movs	r2, #202	@ 0xca
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HW_TS_Start+0x100>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	492a      	ldr	r1, [pc, #168]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4920      	ldr	r1, [pc, #128]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb30 	bl	8000ad0 <linkTimer>
 8001470:	4603      	mov	r3, r0
 8001472:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HW_TS_Start+0x104>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HW_TS_Start+0x108>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7c7a      	ldrb	r2, [r7, #17]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001486:	f7ff fce9 	bl	8000e5c <RescheduleTimerList>
 800148a:	e013      	b.n	80014b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	1ac9      	subs	r1, r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <HW_TS_Start+0xfc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4403      	add	r3, r0
 80014b0:	3308      	adds	r3, #8
 80014b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HW_TS_Start+0x100>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 fe7b 	bl	80021b8 <HAL_NVIC_EnableIRQ>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f383 8810 	msr	PRIMASK, r3
}
 80014cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ce:	bf00      	nop
}
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000098 	.word	0x20000098
 80014dc:	20000174 	.word	0x20000174
 80014e0:	20000128 	.word	0x20000128
 80014e4:	20000129 	.word	0x20000129

080014e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4798      	blx	r3

  return;
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001510:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4313      	orrs	r3, r2
 8001518:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f000 fcc0 	bl	8001ebc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800153c:	f7ff f862 	bl	8000604 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f814 	bl	800156c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001544:	f000 f870 	bl	8001628 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001548:	f000 f88e 	bl	8001668 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154c:	f000 f966 	bl	800181c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001550:	f000 f8da 	bl	8001708 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001554:	f000 f916 	bl	8001784 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001558:	f000 f8a2 	bl	80016a0 <MX_RTC_Init>
  MX_RF_Init();
 800155c:	f000 f898 	bl	8001690 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001560:	f7ff f85e 	bl	8000620 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001564:	f7ff f989 	bl	800087a <MX_APPE_Process>
 8001568:	e7fc      	b.n	8001564 <main+0x30>
	...

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09a      	sub	sp, #104	@ 0x68
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2248      	movs	r2, #72	@ 0x48
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f007 fef0 	bl	8009360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <SystemClock_Config+0xb8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800159a:	4a22      	ldr	r2, [pc, #136]	@ (8001624 <SystemClock_Config+0xb8>)
 800159c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <SystemClock_Config+0xb8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80015ae:	232b      	movs	r3, #43	@ 0x2b
 80015b0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c2:	2340      	movs	r3, #64	@ 0x40
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80015ca:	23a0      	movs	r3, #160	@ 0xa0
 80015cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015ce:	2305      	movs	r3, #5
 80015d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fbf6 	bl	8002dcc <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80015e6:	f000 f9b7 	bl	8001958 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015ea:	236f      	movs	r3, #111	@ 0x6f
 80015ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f001 ff52 	bl	80034b4 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001616:	f000 f99f 	bl	8001958 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3768      	adds	r7, #104	@ 0x68
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58000400 	.word	0x58000400

08001628 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2250      	movs	r2, #80	@ 0x50
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f007 fe93 	bl	8009360 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800163a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800163e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001640:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001646:	2300      	movs	r3, #0
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800164a:	2310      	movs	r3, #16
 800164c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fb9e 	bl	8003d92 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800165c:	f000 f97c 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001660:	bf00      	nop
 8001662:	3750      	adds	r7, #80	@ 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_IPCC_Init+0x20>)
 800166e:	4a07      	ldr	r2, [pc, #28]	@ (800168c <MX_IPCC_Init+0x24>)
 8001670:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_IPCC_Init+0x20>)
 8001674:	f000 ff84 	bl	8002580 <HAL_IPCC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800167e:	f000 f96b 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000138 	.word	0x20000138
 800168c:	58000c00 	.word	0x58000c00

08001690 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <MX_RTC_Init+0x60>)
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <MX_RTC_Init+0x64>)
 80016a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <MX_RTC_Init+0x60>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <MX_RTC_Init+0x60>)
 80016b2:	220f      	movs	r2, #15
 80016b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_RTC_Init+0x60>)
 80016b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80016bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_RTC_Init+0x60>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_RTC_Init+0x60>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <MX_RTC_Init+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_RTC_Init+0x60>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016d6:	480a      	ldr	r0, [pc, #40]	@ (8001700 <MX_RTC_Init+0x60>)
 80016d8:	f002 fde2 	bl	80042a0 <HAL_RTC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80016e2:	f000 f939 	bl	8001958 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_RTC_Init+0x60>)
 80016ec:	f002 fed8 	bl	80044a0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016f6:	f000 f92f 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000174 	.word	0x20000174
 8001704:	40002800 	.word	0x40002800

08001708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_SPI1_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	@ (8001780 <MX_SPI1_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_SPI1_Init+0x74>)
 8001714:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_SPI1_Init+0x74>)
 8001722:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_SPI1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_SPI1_Init+0x74>)
 8001736:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800173a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_SPI1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_SPI1_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_SPI1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_SPI1_Init+0x74>)
 8001756:	2207      	movs	r2, #7
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MX_SPI1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_SPI1_Init+0x74>)
 8001762:	2208      	movs	r2, #8
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_SPI1_Init+0x74>)
 8001768:	f002 ff56 	bl	8004618 <HAL_SPI_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 f8f1 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000198 	.word	0x20000198
 8001780:	40013000 	.word	0x40013000

08001784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <MX_USART1_UART_Init+0x94>)
 800178c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017cc:	4811      	ldr	r0, [pc, #68]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017ce:	f003 fc61 	bl	8005094 <HAL_UART_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017d8:	f000 f8be 	bl	8001958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017dc:	2100      	movs	r1, #0
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017e0:	f004 f928 	bl	8005a34 <HAL_UARTEx_SetTxFifoThreshold>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ea:	f000 f8b5 	bl	8001958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4808      	ldr	r0, [pc, #32]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 80017f2:	f004 f95d 	bl	8005ab0 <HAL_UARTEx_SetRxFifoThreshold>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017fc:	f000 f8ac 	bl	8001958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_USART1_UART_Init+0x90>)
 8001802:	f004 f8de 	bl	80059c2 <HAL_UARTEx_DisableFifoMode>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800180c:	f000 f8a4 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001fc 	.word	0x200001fc
 8001818:	40013800 	.word	0x40013800

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001830:	2004      	movs	r0, #4
 8001832:	f7ff fe66 	bl	8001502 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff fe63 	bl	8001502 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fe60 	bl	8001502 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	2010      	movs	r0, #16
 8001844:	f7ff fe5d 	bl	8001502 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BACKSTRAP_Pin|MB_SW3_Pin|MB_SW1_Pin|MB_SW2_Pin
 8001848:	2200      	movs	r2, #0
 800184a:	f240 210f 	movw	r1, #527	@ 0x20f
 800184e:	4837      	ldr	r0, [pc, #220]	@ (800192c <MX_GPIO_Init+0x110>)
 8001850:	f000 fe5a 	bl	8002508 <HAL_GPIO_WritePin>
                          |BAT_MEAS_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_G_Pin|LED_R_Pin|MOT_IN1_Pin
 8001854:	2200      	movs	r2, #0
 8001856:	f240 7107 	movw	r1, #1799	@ 0x707
 800185a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185e:	f000 fe53 	bl	8002508 <HAL_GPIO_WritePin>
                          |MOT_IN2_Pin|MUX_CONTROL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEEPON_GPIO_Port, KEEPON_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2110      	movs	r1, #16
 8001866:	4832      	ldr	r0, [pc, #200]	@ (8001930 <MX_GPIO_Init+0x114>)
 8001868:	f000 fe4e 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_IRQ2_Pin ACC_IRQ1_Pin */
  GPIO_InitStruct.Pin = ACC_IRQ2_Pin|ACC_IRQ1_Pin;
 800186c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001872:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	482a      	ldr	r0, [pc, #168]	@ (800192c <MX_GPIO_Init+0x110>)
 8001882:	f000 fcd1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKSTRAP_Pin MB_SW3_Pin MB_SW1_Pin MB_SW2_Pin
                           BAT_MEAS_EN_Pin */
  GPIO_InitStruct.Pin = BACKSTRAP_Pin|MB_SW3_Pin|MB_SW1_Pin|MB_SW2_Pin
 8001886:	f240 230f 	movw	r3, #527	@ 0x20f
 800188a:	607b      	str	r3, [r7, #4]
                          |BAT_MEAS_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4823      	ldr	r0, [pc, #140]	@ (800192c <MX_GPIO_Init+0x110>)
 800189e:	f000 fcc3 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin MOT_IN1_Pin
                           MOT_IN2_Pin MUX_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin|MOT_IN1_Pin
 80018a2:	f240 7307 	movw	r3, #1799	@ 0x707
 80018a6:	607b      	str	r3, [r7, #4]
                          |MOT_IN2_Pin|MUX_CONTROL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018bc:	f000 fcb4 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018c0:	2308      	movs	r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d4:	f000 fca8 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEEPON_Pin */
  GPIO_InitStruct.Pin = KEEPON_Pin;
 80018d8:	2310      	movs	r3, #16
 80018da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEEPON_GPIO_Port, &GPIO_InitStruct);
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4810      	ldr	r0, [pc, #64]	@ (8001930 <MX_GPIO_Init+0x114>)
 80018ee:	f000 fc9b 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_FAULT_Pin */
  GPIO_InitStruct.Pin = MOT_FAULT_Pin;
 80018f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MOT_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190a:	f000 fc8d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BC_STATUS_Pin */
  GPIO_InitStruct.Pin = BC_STATUS_Pin;
 800190e:	2310      	movs	r3, #16
 8001910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BC_STATUS_GPIO_Port, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4803      	ldr	r0, [pc, #12]	@ (800192c <MX_GPIO_Init+0x110>)
 8001920:	f000 fc82 	bl	8002228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	48000400 	.word	0x48000400
 8001930:	48001000 	.word	0x48001000

08001934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001946:	f000 fad9 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012c00 	.word	0x40012c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <Error_Handler+0x8>

08001964 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_AHB2_GRP1_EnableClock>:
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001994:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a56:	f7ff ffaf 	bl	80019b8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	202e      	movs	r0, #46	@ 0x2e
 8001a60:	f000 fb90 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a64:	202e      	movs	r0, #46	@ 0x2e
 8001a66:	f000 fba7 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_IPCC_MspInit+0x44>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d113      	bne.n	8001aaa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a82:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a86:	f7ff ff97 	bl	80019b8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	202c      	movs	r0, #44	@ 0x2c
 8001a90:	f000 fb78 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a94:	202c      	movs	r0, #44	@ 0x2c
 8001a96:	f000 fb8f 	bl	80021b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	202d      	movs	r0, #45	@ 0x2d
 8001aa0:	f000 fb70 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001aa4:	202d      	movs	r0, #45	@ 0x2d
 8001aa6:	f000 fb87 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	58000c00 	.word	0x58000c00

08001ab8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b096      	sub	sp, #88	@ 0x58
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	2250      	movs	r2, #80	@ 0x50
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f007 fc49 	bl	8009360 <memset>
  if(hrtc->Instance==RTC)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <HAL_RTC_MspInit+0x68>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001ad8:	f000 fdd8 	bl	800268c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001adc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ae0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 f950 	bl	8003d92 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001af8:	f7ff ff2e 	bl	8001958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001afc:	f7ff ff32 	bl	8001964 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b00:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b04:	f7ff ff71 	bl	80019ea <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 fb39 	bl	8002184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001b12:	2003      	movs	r0, #3
 8001b14:	f000 fb50 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001b18:	bf00      	nop
 8001b1a:	3758      	adds	r7, #88	@ 0x58
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40002800 	.word	0x40002800

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	@ (8001b80 <HAL_SPI_MspInit+0x5c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d117      	bne.n	8001b76 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b4a:	f7ff ff67 	bl	8001a1c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff ff19 	bl	8001986 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b54:	23f0      	movs	r3, #240	@ 0xf0
 8001b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b64:	2305      	movs	r3, #5
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b72:	f000 fb59 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013000 	.word	0x40013000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09c      	sub	sp, #112	@ 0x70
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2250      	movs	r2, #80	@ 0x50
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f007 fbdb 	bl	8009360 <memset>
  if(huart->Instance==USART1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <HAL_UART_MspInit+0x84>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d124      	bne.n	8001bfe <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 f8e6 	bl	8003d92 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bcc:	f7ff fec4 	bl	8001958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bd4:	f7ff ff22 	bl	8001a1c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fed4 	bl	8001986 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bde:	23c0      	movs	r3, #192	@ 0xc0
 8001be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <HAL_UART_MspInit+0x88>)
 8001bfa:	f000 fb15 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bfe:	bf00      	nop
 8001c00:	3770      	adds	r7, #112	@ 0x70
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	48000400 	.word	0x48000400

08001c10 <LL_APB2_GRP1_EnableClock>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2019      	movs	r0, #25
 8001c5a:	f000 fa93 	bl	8002184 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f000 faaa 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c68:	f7ff ffd2 	bl	8001c10 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c6c:	f107 0208 	add.w	r2, r7, #8
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 fe08 	bl	800388c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c7c:	f001 fdf0 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8001c80:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <HAL_InitTick+0x98>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c90:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001c92:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <HAL_InitTick+0xa0>)
 8001c94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001c98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cb0:	480b      	ldr	r0, [pc, #44]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001cb2:	f002 fd55 	bl	8004760 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d104      	bne.n	8001cc6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001cbe:	f002 fdbd 	bl	800483c <HAL_TIM_Base_Start_IT>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	e005      	b.n	8001cd2 <HAL_InitTick+0x8e>
  }
  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8001cc6:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <HAL_InitTick+0xa4>)
 8001cc8:	210e      	movs	r1, #14
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_InitTick+0x9c>)
 8001ccc:	f002 ff88 	bl	8004be0 <HAL_TIM_RegisterCallback>

  /* Return function status */
  return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3730      	adds	r7, #48	@ 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	20000290 	.word	0x20000290
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	08001ced 	.word	0x08001ced

08001cec <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001cf4:	f000 f902 	bl	8001efc <HAL_IncTick>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <MemManage_Handler+0x4>

08001d18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d64:	f7ff f914 	bl	8000f90 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d72:	f002 fdb1 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000290 	.word	0x20000290

08001d80 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d84:	f006 ff32 	bl	8008bec <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d90:	f006 ff62 	bl	8008c58 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d9c:	f000 fbcc 	bl	8002538 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001da8:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <SystemInit+0x98>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <SystemInit+0x98>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dcc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001dd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <SystemInit+0x9c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dee:	f023 0305 	bic.w	r3, r3, #5
 8001df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <SystemInit+0xa0>)
 8001e10:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e16:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <SystemInit+0xa0>)
 8001e18:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00
 8001e40:	faf6fefb 	.word	0xfaf6fefb
 8001e44:	22041000 	.word	0x22041000

08001e48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001e48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4c:	3304      	adds	r3, #4

08001e4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001e52:	d3f9      	bcc.n	8001e48 <CopyDataInit>
  bx lr
 8001e54:	4770      	bx	lr

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001e56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001e58:	3004      	adds	r0, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001e5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>
  bx lr
 8001e5e:	4770      	bx	lr

08001e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e64:	f7ff ff9e 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001e68:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <LoopForever+0x6>)
 8001e6a:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <LoopForever+0xa>)
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <LoopForever+0xe>)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f7ff ffed 	bl	8001e4e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e74:	480b      	ldr	r0, [pc, #44]	@ (8001ea4 <LoopForever+0x12>)
 8001e76:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <LoopForever+0x16>)
 8001e78:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <LoopForever+0x1a>)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f7ff ffe7 	bl	8001e4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e80:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <LoopForever+0x1e>)
 8001e82:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <LoopForever+0x22>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	f7ff ffe8 	bl	8001e5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e8a:	f007 fa71 	bl	8009370 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e8e:	f7ff fb51 	bl	8001534 <main>

08001e92 <LoopForever>:

LoopForever:
  b LoopForever
 8001e92:	e7fe      	b.n	8001e92 <LoopForever>
  ldr   r0, =_estack
 8001e94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000030 	.word	0x20000030
 8001ea0:	080096bc 	.word	0x080096bc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ea4:	200301e4 	.word	0x200301e4
 8001ea8:	20030a67 	.word	0x20030a67
 8001eac:	0800972a 	.word	0x0800972a
  INIT_BSS _sbss, _ebss
 8001eb0:	2000007c 	.word	0x2000007c
 8001eb4:	2000050c 	.word	0x2000050c

08001eb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_Init+0x3c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_Init+0x3c>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	f000 f94b 	bl	800216e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f7ff feb3 	bl	8001c44 <HAL_InitTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	e001      	b.n	8001eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eea:	f7ff fdb0 	bl	8001a4e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eee:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	58004000 	.word	0x58004000

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	2000034c 	.word	0x2000034c

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000034c 	.word	0x2000034c

08001f3c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTickPrio+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db12      	blt.n	800202c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	490a      	ldr	r1, [pc, #40]	@ (8002038 <__NVIC_DisableIRQ+0x44>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	3320      	adds	r3, #32
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002020:	f3bf 8f4f 	dsb	sy
}
 8002024:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002026:	f3bf 8f6f 	isb	sy
}
 800202a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0c      	blt.n	8002068 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	@ (8002074 <__NVIC_SetPendingIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	3340      	adds	r3, #64	@ 0x40
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0c      	blt.n	80020a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <__NVIC_ClearPendingIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	3360      	adds	r3, #96	@ 0x60
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff feec 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002192:	f7ff ff03 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002196:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f7ff ffb3 	bl	8002108 <NVIC_EncodePriority>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff82 	bl	80020b4 <__NVIC_SetPriority>
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fef6 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff06 	bl	8001ff4 <__NVIC_DisableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff1c 	bl	800203c <__NVIC_SetPendingIRQ>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff2c 	bl	8002078 <__NVIC_ClearPendingIRQ>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e14c      	b.n	80024d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 813e 	beq.w	80024cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d005      	beq.n	8002268 <HAL_GPIO_Init+0x40>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d130      	bne.n	80022ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800229e:	2201      	movs	r2, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0201 	and.w	r2, r3, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d017      	beq.n	8002306 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d123      	bne.n	800235a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8098 	beq.w	80024cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_GPIO_Init+0x2c8>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c6:	d019      	beq.n	80023fc <HAL_GPIO_Init+0x1d4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_GPIO_Init+0x2cc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_GPIO_Init+0x1d0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a49      	ldr	r2, [pc, #292]	@ (80024f8 <HAL_GPIO_Init+0x2d0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00d      	beq.n	80023f4 <HAL_GPIO_Init+0x1cc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a48      	ldr	r2, [pc, #288]	@ (80024fc <HAL_GPIO_Init+0x2d4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x1c8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a47      	ldr	r2, [pc, #284]	@ (8002500 <HAL_GPIO_Init+0x2d8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_GPIO_Init+0x1c4>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e008      	b.n	80023fe <HAL_GPIO_Init+0x1d6>
 80023ec:	2307      	movs	r3, #7
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x1d6>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1d6>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1d6>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1d6>
 80023fc:	2300      	movs	r3, #0
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240e:	4938      	ldr	r1, [pc, #224]	@ (80024f0 <HAL_GPIO_Init+0x2c8>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800241c:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002440:	4a30      	ldr	r2, [pc, #192]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002446:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800246a:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002470:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002496:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 80024a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_GPIO_Init+0x2dc>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f aeab 	bne.w	8002238 <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40010000 	.word	0x40010000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800
 80024fc:	48000c00 	.word	0x48000c00
 8002500:	48001000 	.word	0x48001000
 8002504:	58000800 	.word	0x58000800

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002524:	e002      	b.n	800252c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_HSEM_IRQHandler+0x30>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_HSEM_IRQHandler+0x30>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	43db      	mvns	r3, r3
 800254c:	4906      	ldr	r1, [pc, #24]	@ (8002568 <HAL_HSEM_IRQHandler+0x30>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <HAL_HSEM_IRQHandler+0x30>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f807 	bl	800256c <HAL_HSEM_FreeCallback>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58001500 	.word	0x58001500

0800256c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01e      	beq.n	80025d0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_IPCC_Init+0x60>)
 8002594:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fa64 	bl	8001a70 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80025a8:	68b8      	ldr	r0, [r7, #8]
 80025aa:	f000 f85b 	bl	8002664 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f82c 	bl	8002618 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80025ce:	e001      	b.n	80025d4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	58000c00 	.word	0x58000c00

080025e4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e00f      	b.n	8002646 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <IPCC_SetDefaultCallbacks+0x44>)
 8002630:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3306      	adds	r3, #6
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <IPCC_SetDefaultCallbacks+0x48>)
 800263e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d9ec      	bls.n	8002626 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	080025e5 	.word	0x080025e5
 8002660:	080025ff 	.word	0x080025ff

08002664 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002678:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223f      	movs	r2, #63	@ 0x3f
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	58000400 	.word	0x58000400

080026ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	58000400 	.word	0x58000400

080026c8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026da:	d101      	bne.n	80026e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_RCC_HSE_Enable>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_RCC_HSE_Disable>:
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_RCC_HSE_IsReady>:
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800273a:	d101      	bne.n	8002740 <LL_RCC_HSE_IsReady+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_RCC_HSE_IsReady+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_RCC_HSI_Enable>:
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800275a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_RCC_HSI_Disable>:
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_RCC_HSI_IsReady>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279a:	d101      	bne.n	80027a0 <LL_RCC_HSI_IsReady+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_RCC_HSI_IsReady+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSI48_Enable>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_HSI48_Disable>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_RCC_HSI48_IsReady>:
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d101      	bne.n	8002832 <LL_RCC_HSI48_IsReady+0x18>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_RCC_HSI48_IsReady+0x1a>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_RCC_LSE_Enable>:
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_LSE_Disable>:
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_RCC_LSE_EnableBypass>:
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_LSE_DisableBypass>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_LSE_IsReady>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_RCC_LSE_IsReady+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_RCC_LSE_IsReady+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_LSI1_Enable>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RCC_LSI1_Disable>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_LSI1_IsReady>:
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d101      	bne.n	8002946 <LL_RCC_LSI1_IsReady+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_RCC_LSI1_IsReady+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_LSI2_Enable>:
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_RCC_LSI2_Disable>:
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_RCC_LSI2_IsReady>:
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d101      	bne.n	80029ae <LL_RCC_LSI2_IsReady+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_RCC_LSI2_IsReady+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_LSI2_SetTrimming>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_MSI_Enable>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_MSI_Disable>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_MSI_IsReady>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d101      	bne.n	8002a3a <LL_RCC_MSI_IsReady+0x16>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_RCC_MSI_IsReady+0x18>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_MSI_SetRange>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_MSI_GetRange>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2bb0      	cmp	r3, #176	@ 0xb0
 8002a84:	d901      	bls.n	8002a8a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002a86:	23b0      	movs	r3, #176	@ 0xb0
 8002a88:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_SetSysClkSource>:
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 0203 	bic.w	r2, r3, #3
 8002ad4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_GetSysClkSource>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_SetAHBPrescaler>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_SetAHB4Prescaler>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_SetAPB1Prescaler>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_SetAPB2Prescaler>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_GetAHBPrescaler>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_C2_RCC_GetAHBPrescaler>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_GetAHB4Prescaler>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_GetAPB1Prescaler>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_GetAPB2Prescaler>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_RCC_PLL_IsReady+0x18>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_RCC_PLL_IsReady+0x1a>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0303 	and.w	r3, r3, #3
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d26:	d101      	bne.n	8002d2c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d4c:	d101      	bne.n	8002d52 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d72:	d101      	bne.n	8002d78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d96:	d101      	bne.n	8002d9c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dba:	d101      	bne.n	8002dc0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b08d      	sub	sp, #52	@ 0x34
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e363      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808d 	beq.w	8002f06 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dec:	f7ff fe7d 	bl	8002aea <LL_RCC_GetSysClkSource>
 8002df0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df2:	f7ff ff83 	bl	8002cfc <LL_RCC_PLL_GetMainSource>
 8002df6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3e>
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d147      	bne.n	8002e94 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d144      	bne.n	8002e94 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e347      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002e1a:	f7ff fe28 	bl	8002a6e <LL_RCC_MSI_GetRange>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d914      	bls.n	8002e4e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fd61 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e336      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe02 	bl	8002a46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fe26 	bl	8002a98 <LL_RCC_MSI_SetCalibTrimming>
 8002e4c:	e013      	b.n	8002e76 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fdf7 	bl	8002a46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe1b 	bl	8002a98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fd42 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e317      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e76:	f000 fcc9 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4aa4      	ldr	r2, [pc, #656]	@ (8003110 <HAL_RCC_OscConfig+0x344>)
 8002e7e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e80:	4ba4      	ldr	r3, [pc, #656]	@ (8003114 <HAL_RCC_OscConfig+0x348>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fedd 	bl	8001c44 <HAL_InitTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d039      	beq.n	8002f04 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e308      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01e      	beq.n	8002eda <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e9c:	f7ff fda4 	bl	80029e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea0:	f7ff f840 	bl	8001f24 <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea8:	f7ff f83c 	bl	8001f24 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e2f5      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002eba:	f7ff fdb3 	bl	8002a24 <LL_RCC_MSI_IsReady>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f1      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fdbc 	bl	8002a46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fde0 	bl	8002a98 <LL_RCC_MSI_SetCalibTrimming>
 8002ed8:	e015      	b.n	8002f06 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eda:	f7ff fd94 	bl	8002a06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ede:	f7ff f821 	bl	8001f24 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f81d 	bl	8001f24 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2d6      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ef8:	f7ff fd94 	bl	8002a24 <LL_RCC_MSI_IsReady>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f1      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f04:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d047      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	f7ff fdea 	bl	8002aea <LL_RCC_GetSysClkSource>
 8002f16:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	f7ff fef0 	bl	8002cfc <LL_RCC_PLL_GetMainSource>
 8002f1c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x164>
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d108      	bne.n	8002f3c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d134      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e2b4      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_OscConfig+0x180>
 8002f46:	f7ff fbd1 	bl	80026ec <LL_RCC_HSE_Enable>
 8002f4a:	e001      	b.n	8002f50 <HAL_RCC_OscConfig+0x184>
 8002f4c:	f7ff fbdd 	bl	800270a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe ffe4 	bl	8001f24 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe ffe0 	bl	8001f24 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e299      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f72:	f7ff fbd9 	bl	8002728 <LL_RCC_HSE_IsReady>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_OscConfig+0x194>
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe ffd1 	bl	8001f24 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f86:	f7fe ffcd 	bl	8001f24 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	@ 0x64
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e286      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f98:	f7ff fbc6 	bl	8002728 <LL_RCC_HSE_IsReady>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f1      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04c      	beq.n	8003048 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	f7ff fd9c 	bl	8002aea <LL_RCC_GetSysClkSource>
 8002fb2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	f7ff fea2 	bl	8002cfc <LL_RCC_PLL_GetMainSource>
 8002fb8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e266      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fbe5 	bl	80027ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe2:	e031      	b.n	8003048 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d019      	beq.n	8003020 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	f7ff fbae 	bl	800274c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe ff98 	bl	8001f24 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff8:	f7fe ff94 	bl	8001f24 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e24d      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800300a:	f7ff fbbd 	bl	8002788 <LL_RCC_HSI_IsReady>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f1      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fbc7 	bl	80027ac <LL_RCC_HSI_SetCalibTrimming>
 800301e:	e013      	b.n	8003048 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003020:	f7ff fba3 	bl	800276a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe ff7e 	bl	8001f24 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe ff7a 	bl	8001f24 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e233      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800303e:	f7ff fba3 	bl	8002788 <LL_RCC_HSI_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f1      	bne.n	800302c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a3 	beq.w	80031a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d076      	beq.n	8003158 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d046      	beq.n	8003104 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003076:	f7ff fc5a 	bl	800292e <LL_RCC_LSI1_IsReady>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d113      	bne.n	80030a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003080:	f7ff fc33 	bl	80028ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003084:	f7fe ff4e 	bl	8001f24 <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800308c:	f7fe ff4a 	bl	8001f24 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e203      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800309e:	f7ff fc46 	bl	800292e <LL_RCC_LSI1_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f1      	beq.n	800308c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80030a8:	f7ff fc53 	bl	8002952 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff3a 	bl	8001f24 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030b4:	f7fe ff36 	bl	8001f24 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1ef      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030c6:	f7ff fc66 	bl	8002996 <LL_RCC_LSI2_IsReady>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f1      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fc70 	bl	80029ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80030da:	f7ff fc17 	bl	800290c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe ff21 	bl	8001f24 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030e6:	f7fe ff1d 	bl	8001f24 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1d6      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80030f8:	f7ff fc19 	bl	800292e <LL_RCC_LSI1_IsReady>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f1      	bne.n	80030e6 <HAL_RCC_OscConfig+0x31a>
 8003102:	e051      	b.n	80031a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003104:	f7ff fbf1 	bl	80028ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe ff0c 	bl	8001f24 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800310e:	e00c      	b.n	800312a <HAL_RCC_OscConfig+0x35e>
 8003110:	20000008 	.word	0x20000008
 8003114:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003118:	f7fe ff04 	bl	8001f24 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1bd      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800312a:	f7ff fc00 	bl	800292e <LL_RCC_LSI1_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f1      	beq.n	8003118 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003134:	f7ff fc1e 	bl	8002974 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800313a:	f7fe fef3 	bl	8001f24 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b03      	cmp	r3, #3
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1ac      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800314c:	f7ff fc23 	bl	8002996 <LL_RCC_LSI2_IsReady>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f1      	bne.n	800313a <HAL_RCC_OscConfig+0x36e>
 8003156:	e027      	b.n	80031a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003158:	f7ff fc0c 	bl	8002974 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fee2 	bl	8001f24 <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003164:	f7fe fede 	bl	8001f24 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e197      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003176:	f7ff fc0e 	bl	8002996 <LL_RCC_LSI2_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f1      	bne.n	8003164 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003180:	f7ff fbc4 	bl	800290c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fece 	bl	8001f24 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800318c:	f7fe feca 	bl	8001f24 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e183      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800319e:	f7ff fbc6 	bl	800292e <LL_RCC_LSI1_IsReady>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f1      	bne.n	800318c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d05b      	beq.n	800326c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4ba7      	ldr	r3, [pc, #668]	@ (8003454 <HAL_RCC_OscConfig+0x688>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d114      	bne.n	80031ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031c0:	f7ff fa64 	bl	800268c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c4:	f7fe feae 	bl	8001f24 <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7fe feaa 	bl	8001f24 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e163      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031de:	4b9d      	ldr	r3, [pc, #628]	@ (8003454 <HAL_RCC_OscConfig+0x688>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_RCC_OscConfig+0x42c>
 80031f2:	f7ff fb24 	bl	800283e <LL_RCC_LSE_Enable>
 80031f6:	e00c      	b.n	8003212 <HAL_RCC_OscConfig+0x446>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d104      	bne.n	800320a <HAL_RCC_OscConfig+0x43e>
 8003200:	f7ff fb3f 	bl	8002882 <LL_RCC_LSE_EnableBypass>
 8003204:	f7ff fb1b 	bl	800283e <LL_RCC_LSE_Enable>
 8003208:	e003      	b.n	8003212 <HAL_RCC_OscConfig+0x446>
 800320a:	f7ff fb29 	bl	8002860 <LL_RCC_LSE_Disable>
 800320e:	f7ff fb49 	bl	80028a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d014      	beq.n	8003244 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fe83 	bl	8001f24 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fe7f 	bl	8001f24 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e136      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003238:	f7ff fb45 	bl	80028c6 <LL_RCC_LSE_IsReady>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ef      	beq.n	8003222 <HAL_RCC_OscConfig+0x456>
 8003242:	e013      	b.n	800326c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fe6e 	bl	8001f24 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe fe6a 	bl	8001f24 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e121      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003262:	f7ff fb30 	bl	80028c6 <LL_RCC_LSE_IsReady>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ef      	bne.n	800324c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d014      	beq.n	80032aa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003280:	f7ff faa9 	bl	80027d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fe4e 	bl	8001f24 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328c:	f7fe fe4a 	bl	8001f24 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e103      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800329e:	f7ff fabc 	bl	800281a <LL_RCC_HSI48_IsReady>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f1      	beq.n	800328c <HAL_RCC_OscConfig+0x4c0>
 80032a8:	e013      	b.n	80032d2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	f7ff faa5 	bl	80027f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fe39 	bl	8001f24 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b6:	f7fe fe35 	bl	8001f24 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0ee      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032c8:	f7ff faa7 	bl	800281a <LL_RCC_HSI48_IsReady>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f1      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80e4 	beq.w	80034a4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032dc:	f7ff fc05 	bl	8002aea <LL_RCC_GetSysClkSource>
 80032e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	f040 80b4 	bne.w	800345c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0203 	and.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	429a      	cmp	r2, r3
 8003300:	d123      	bne.n	800334a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d11c      	bne.n	800334a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d114      	bne.n	800334a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d10d      	bne.n	800334a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d05d      	beq.n	8003406 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d058      	beq.n	8003402 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0a1      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003362:	f7ff fc85 	bl	8002c70 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003366:	f7fe fddd 	bl	8001f24 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fdd9 	bl	8001f24 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e092      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ef      	bne.n	800336e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	4b30      	ldr	r3, [pc, #192]	@ (8003458 <HAL_RCC_OscConfig+0x68c>)
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033a6:	0212      	lsls	r2, r2, #8
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033ba:	430a      	orrs	r2, r1
 80033bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c4:	f7ff fc45 	bl	8002c52 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d8:	f7fe fda4 	bl	8001f24 <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fda0 	bl	8001f24 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e059      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ef      	beq.n	80033e0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003400:	e050      	b.n	80034a4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e04f      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d147      	bne.n	80034a4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003414:	f7ff fc1d 	bl	8002c52 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003428:	f7fe fd7c 	bl	8001f24 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fd78 	bl	8001f24 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e031      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCC_OscConfig+0x664>
 8003450:	e028      	b.n	80034a4 <HAL_RCC_OscConfig+0x6d8>
 8003452:	bf00      	nop
 8003454:	58000400 	.word	0x58000400
 8003458:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d01e      	beq.n	80034a0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	f7ff fc05 	bl	8002c70 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fe fd5d 	bl	8001f24 <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fd59 	bl	8001f24 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e012      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_OscConfig+0x6e4>)
 800349a:	4013      	ands	r3, r2
 800349c:	60cb      	str	r3, [r1, #12]
 800349e:	e001      	b.n	80034a4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3734      	adds	r7, #52	@ 0x34
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	eefefffc 	.word	0xeefefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e12d      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b98      	ldr	r3, [pc, #608]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d91b      	bls.n	800350e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b95      	ldr	r3, [pc, #596]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4993      	ldr	r1, [pc, #588]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e6:	f7fe fd1d 	bl	8001f24 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034ee:	f7fe fd19 	bl	8001f24 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e111      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003500:	4b8a      	ldr	r3, [pc, #552]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d1ef      	bne.n	80034ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff faef 	bl	8002b02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003524:	f7fe fcfe 	bl	8001f24 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800352c:	f7fe fcfa 	bl	8001f24 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0f2      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800353e:	f7ff fbe9 	bl	8002d14 <LL_RCC_IsActiveFlag_HPRE>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f1      	beq.n	800352c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d016      	beq.n	8003582 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fae6 	bl	8002b2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800355e:	f7fe fce1 	bl	8001f24 <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003566:	f7fe fcdd 	bl	8001f24 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0d5      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003578:	f7ff fbde 	bl	8002d38 <LL_RCC_IsActiveFlag_C2HPRE>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fadf 	bl	8002b56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003598:	f7fe fcc4 	bl	8001f24 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035a0:	f7fe fcc0 	bl	8001f24 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0b8      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035b2:	f7ff fbd4 	bl	8002d5e <LL_RCC_IsActiveFlag_SHDHPRE>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f1      	beq.n	80035a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d016      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fad9 	bl	8002b84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fca7 	bl	8001f24 <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035da:	f7fe fca3 	bl	8001f24 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e09b      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035ec:	f7ff fbca 	bl	8002d84 <LL_RCC_IsActiveFlag_PPRE1>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f1      	beq.n	80035da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff facf 	bl	8002bac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800360e:	f7fe fc89 	bl	8001f24 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003616:	f7fe fc85 	bl	8001f24 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e07d      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003628:	f7ff fbbe 	bl	8002da8 <LL_RCC_IsActiveFlag_PPRE2>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f1      	beq.n	8003616 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d043      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d106      	bne.n	8003654 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003646:	f7ff f86f 	bl	8002728 <LL_RCC_HSE_IsReady>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11e      	bne.n	800368e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e067      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d106      	bne.n	800366a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800365c:	f7ff fb17 	bl	8002c8e <LL_RCC_PLL_IsReady>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e05c      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003672:	f7ff f9d7 	bl	8002a24 <LL_RCC_MSI_IsReady>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e051      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003680:	f7ff f882 	bl	8002788 <LL_RCC_HSI_IsReady>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e04a      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fa15 	bl	8002ac2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fe fc44 	bl	8001f24 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fe fc40 	bl	8001f24 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e036      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	f7ff fa18 	bl	8002aea <LL_RCC_GetSysClkSource>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d1ec      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c6:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d21b      	bcs.n	800370c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d4:	4b15      	ldr	r3, [pc, #84]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 0207 	bic.w	r2, r3, #7
 80036dc:	4913      	ldr	r1, [pc, #76]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe fc1e 	bl	8001f24 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036ec:	f7fe fc1a 	bl	8001f24 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e012      	b.n	8003724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_ClockConfig+0x278>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d1ef      	bne.n	80036ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800370c:	f000 f87e 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003710:	4603      	mov	r3, r0
 8003712:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_RCC_ClockConfig+0x27c>)
 8003714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003716:	f7fe fc11 	bl	8001f3c <HAL_GetTickPrio>
 800371a:	4603      	mov	r3, r0
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fa91 	bl	8001c44 <HAL_InitTick>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58004000 	.word	0x58004000
 8003730:	20000008 	.word	0x20000008

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	f7ff f9d6 	bl	8002aea <LL_RCC_GetSysClkSource>
 800373e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003746:	f7ff f992 	bl	8002a6e <LL_RCC_MSI_GetRange>
 800374a:	4603      	mov	r3, r0
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e04b      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d102      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003762:	4b28      	ldr	r3, [pc, #160]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e045      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10a      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800376e:	f7fe ffab 	bl	80026c8 <LL_RCC_HSE_IsEnabledDiv2>
 8003772:	4603      	mov	r3, r0
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003778:	4b22      	ldr	r3, [pc, #136]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e03a      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e037      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003784:	f7ff faba 	bl	8002cfc <LL_RCC_PLL_GetMainSource>
 8003788:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d003      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x64>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x6a>
 8003796:	e00d      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003798:	4b1a      	ldr	r3, [pc, #104]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 800379a:	60bb      	str	r3, [r7, #8]
        break;
 800379c:	e015      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800379e:	f7fe ff93 	bl	80026c8 <LL_RCC_HSE_IsEnabledDiv2>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037a8:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037ac:	e00d      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80037ae:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037b0:	60bb      	str	r3, [r7, #8]
        break;
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037b4:	f7ff f95b 	bl	8002a6e <LL_RCC_MSI_GetRange>
 80037b8:	4603      	mov	r3, r0
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	60bb      	str	r3, [r7, #8]
        break;
 80037c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80037ca:	f7ff fa72 	bl	8002cb2 <LL_RCC_PLL_GetN>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	fb03 f402 	mul.w	r4, r3, r2
 80037d6:	f7ff fa85 	bl	8002ce4 <LL_RCC_PLL_GetDivider>
 80037da:	4603      	mov	r3, r0
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	3301      	adds	r3, #1
 80037e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80037e4:	f7ff fa72 	bl	8002ccc <LL_RCC_PLL_GetR>
 80037e8:	4603      	mov	r3, r0
 80037ea:	0f5b      	lsrs	r3, r3, #29
 80037ec:	3301      	adds	r3, #1
 80037ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80037f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037f4:	68fb      	ldr	r3, [r7, #12]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	0800960c 	.word	0x0800960c
 8003804:	00f42400 	.word	0x00f42400
 8003808:	01e84800 	.word	0x01e84800

0800380c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b598      	push	{r3, r4, r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003810:	f7ff ff90 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8003814:	4604      	mov	r4, r0
 8003816:	f7ff f9dd 	bl	8002bd4 <LL_RCC_GetAHBPrescaler>
 800381a:	4603      	mov	r3, r0
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <HAL_RCC_GetHCLKFreq+0x24>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd98      	pop	{r3, r4, r7, pc}
 8003830:	080095ac 	.word	0x080095ac

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b598      	push	{r3, r4, r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003838:	f7ff ffe8 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800383c:	4604      	mov	r4, r0
 800383e:	f7ff f9f0 	bl	8002c22 <LL_RCC_GetAPB1Prescaler>
 8003842:	4603      	mov	r3, r0
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	4a04      	ldr	r2, [pc, #16]	@ (800385c <HAL_RCC_GetPCLK1Freq+0x28>)
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd98      	pop	{r3, r4, r7, pc}
 800385c:	080095ec 	.word	0x080095ec

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b598      	push	{r3, r4, r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003864:	f7ff ffd2 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003868:	4604      	mov	r4, r0
 800386a:	f7ff f9e6 	bl	8002c3a <LL_RCC_GetAPB2Prescaler>
 800386e:	4603      	mov	r3, r0
 8003870:	0adb      	lsrs	r3, r3, #11
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd98      	pop	{r3, r4, r7, pc}
 8003888:	080095ec 	.word	0x080095ec

0800388c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	226f      	movs	r2, #111	@ 0x6f
 800389a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800389c:	f7ff f925 	bl	8002aea <LL_RCC_GetSysClkSource>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80038a6:	f7ff f995 	bl	8002bd4 <LL_RCC_GetAHBPrescaler>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80038b0:	f7ff f9b7 	bl	8002c22 <LL_RCC_GetAPB1Prescaler>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80038ba:	f7ff f9be 	bl	8002c3a <LL_RCC_GetAPB2Prescaler>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80038c4:	f7ff f992 	bl	8002bec <LL_C2_RCC_GetAHBPrescaler>
 80038c8:	4602      	mov	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80038ce:	f7ff f99a 	bl	8002c06 <LL_RCC_GetAHB4Prescaler>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <HAL_RCC_GetClockConfig+0x60>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0207 	and.w	r2, r3, #7
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	58004000 	.word	0x58004000

080038f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2bb0      	cmp	r3, #176	@ 0xb0
 80038fc:	d903      	bls.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e007      	b.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	4a11      	ldr	r2, [pc, #68]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003916:	f7ff f976 	bl	8002c06 <LL_RCC_GetAHB4Prescaler>
 800391a:	4603      	mov	r3, r0
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	0c9c      	lsrs	r4, r3, #18
 800393a:	f7fe feb7 	bl	80026ac <HAL_PWREx_GetVoltageRange>
 800393e:	4603      	mov	r3, r0
 8003940:	4619      	mov	r1, r3
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f80c 	bl	8003960 <RCC_SetFlashLatency>
 8003948:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}
 8003952:	bf00      	nop
 8003954:	0800960c 	.word	0x0800960c
 8003958:	080095ac 	.word	0x080095ac
 800395c:	431bde83 	.word	0x431bde83

08003960 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b093      	sub	sp, #76	@ 0x4c
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800396a:	4b37      	ldr	r3, [pc, #220]	@ (8003a48 <RCC_SetFlashLatency+0xe8>)
 800396c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003976:	4a35      	ldr	r2, [pc, #212]	@ (8003a4c <RCC_SetFlashLatency+0xec>)
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	ca07      	ldmia	r2, {r0, r1, r2}
 800397e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003982:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <RCC_SetFlashLatency+0xf0>)
 8003984:	f107 040c 	add.w	r4, r7, #12
 8003988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800398e:	2300      	movs	r3, #0
 8003990:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003998:	d11a      	bne.n	80039d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800399a:	2300      	movs	r3, #0
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
 800399e:	e013      	b.n	80039c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	3348      	adds	r3, #72	@ 0x48
 80039a6:	443b      	add	r3, r7
 80039a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d807      	bhi.n	80039c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	3348      	adds	r3, #72	@ 0x48
 80039b8:	443b      	add	r3, r7
 80039ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039c0:	e020      	b.n	8003a04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c4:	3301      	adds	r3, #1
 80039c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d9e8      	bls.n	80039a0 <RCC_SetFlashLatency+0x40>
 80039ce:	e019      	b.n	8003a04 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039d4:	e013      	b.n	80039fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	3348      	adds	r3, #72	@ 0x48
 80039dc:	443b      	add	r3, r7
 80039de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d807      	bhi.n	80039f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3348      	adds	r3, #72	@ 0x48
 80039ee:	443b      	add	r3, r7
 80039f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039f6:	e005      	b.n	8003a04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fa:	3301      	adds	r3, #1
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d9e8      	bls.n	80039d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003a04:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <RCC_SetFlashLatency+0xf4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 0207 	bic.w	r2, r3, #7
 8003a0c:	4911      	ldr	r1, [pc, #68]	@ (8003a54 <RCC_SetFlashLatency+0xf4>)
 8003a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a14:	f7fe fa86 	bl	8001f24 <HAL_GetTick>
 8003a18:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a1a:	e008      	b.n	8003a2e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a1c:	f7fe fa82 	bl	8001f24 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e007      	b.n	8003a3e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <RCC_SetFlashLatency+0xf4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1ef      	bne.n	8003a1c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	374c      	adds	r7, #76	@ 0x4c
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08009408 	.word	0x08009408
 8003a4c:	08009418 	.word	0x08009418
 8003a50:	08009424 	.word	0x08009424
 8003a54:	58004000 	.word	0x58004000

08003a58 <LL_RCC_LSE_IsEnabled>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <LL_RCC_LSE_IsEnabled+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_RCC_LSE_IsEnabled+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_RCC_LSE_IsReady>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d101      	bne.n	8003a94 <LL_RCC_LSE_IsReady+0x18>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <LL_RCC_LSE_IsReady+0x1a>
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_RCC_SetRFWKPClockSource>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_SetSMPSClockSource>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_SetSMPSPrescaler>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_SetUSARTClockSource>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_SetLPUARTClockSource>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_SetI2CClockSource>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_SetLPTIMClockSource>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_SetSAIClockSource>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_SetRNGClockSource>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_SetCLK48ClockSource>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_SetUSBClockSource>:
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffe3 	bl	8003c3a <LL_RCC_SetCLK48ClockSource>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <LL_RCC_SetADCClockSource>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_RCC_SetRTCClockSource>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_GetRTCClockSource>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_ForceBackupDomainReset>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_RCC_PLLSAI1_Enable>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_RCC_PLLSAI1_Disable>:
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_PLLSAI1_IsReady>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d80:	d101      	bne.n	8003d86 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b088      	sub	sp, #32
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d9e:	2300      	movs	r3, #0
 8003da0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d034      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003db6:	d021      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dbc:	d81b      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc2:	d01d      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc8:	d815      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd2:	d110      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003de4:	e00d      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f947 	bl	800407e <RCCEx_PLLSAI1_ConfigNP>
 8003df0:	4603      	mov	r3, r0
 8003df2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	77fb      	strb	r3, [r7, #31]
        break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fee8 	bl	8003be2 <LL_RCC_SetSAIClockSource>
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7ffb      	ldrb	r3, [r7, #31]
 8003e16:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d046      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e24:	f7ff ff56 	bl	8003cd4 <LL_RCC_GetRTCClockSource>
 8003e28:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d03c      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e34:	f7fe fc2a 	bl	800268c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ff30 	bl	8003ca8 <LL_RCC_SetRTCClockSource>
 8003e48:	e02e      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e54:	f7ff ff4b 	bl	8003cee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e58:	f7ff ff5a 	bl	8003d10 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e74:	f7ff fdf0 	bl	8003a58 <LL_RCC_LSE_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d114      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e7e:	f7fe f851 	bl	8001f24 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e84:	e00b      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fe f84d 	bl	8001f24 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d902      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
              break;
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e9e:	f7ff fded 	bl	8003a7c <LL_RCC_LSE_IsReady>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
 8003eaa:	77bb      	strb	r3, [r7, #30]
 8003eac:	e001      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fe2a 	bl	8003b1c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fe35 	bl	8003b48 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fe5d 	bl	8003bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fe52 	bl	8003bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fe2a 	bl	8003b74 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fe1f 	bl	8003b74 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d022      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fe8d 	bl	8003c66 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f54:	d107      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f64:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f8dd 	bl	8004134 <RCCEx_PLLSAI1_ConfigNQ>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9c:	d008      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fe2a 	bl	8003c0e <LL_RCC_SetRNGClockSource>
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7ff fe21 	bl	8003c0e <LL_RCC_SetRNGClockSource>
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff fe34 	bl	8003c3a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fda:	d107      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d022      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fe3d 	bl	8003c7c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800400a:	d107      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004024:	d10b      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f8dd 	bl	80041ea <RCCEx_PLLSAI1_ConfigNR>
 8004030:	4603      	mov	r3, r0
 8004032:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004034:	7ffb      	ldrb	r3, [r7, #31]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fd26 	bl	8003aa0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fd45 	bl	8003af4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fd2c 	bl	8003acc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004074:	7fbb      	ldrb	r3, [r7, #30]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800408a:	f7ff fe61 	bl	8003d50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800408e:	f7fd ff49 	bl	8001f24 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004094:	e009      	b.n	80040aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004096:	f7fd ff45 	bl	8001f24 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d902      	bls.n	80040aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e004      	b.n	80040b4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040aa:	f7ff fe60 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d137      	bne.n	800412a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040e4:	4313      	orrs	r3, r2
 80040e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040e8:	f7ff fe23 	bl	8003d32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fd ff1a 	bl	8001f24 <HAL_GetTick>
 80040f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040f2:	e009      	b.n	8004108 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f4:	f7fd ff16 	bl	8001f24 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d902      	bls.n	8004108 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	73fb      	strb	r3, [r7, #15]
        break;
 8004106:	e004      	b.n	8004112 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004108:	f7ff fe31 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 800410c:	4603      	mov	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d1f0      	bne.n	80040f4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004126:	4313      	orrs	r3, r2
 8004128:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004140:	f7ff fe06 	bl	8003d50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004144:	f7fd feee 	bl	8001f24 <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800414a:	e009      	b.n	8004160 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800414c:	f7fd feea 	bl	8001f24 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	73fb      	strb	r3, [r7, #15]
      break;
 800415e:	e004      	b.n	800416a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004160:	f7ff fe05 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d137      	bne.n	80041e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800419a:	4313      	orrs	r3, r2
 800419c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800419e:	f7ff fdc8 	bl	8003d32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fd febf 	bl	8001f24 <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041a8:	e009      	b.n	80041be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041aa:	f7fd febb 	bl	8001f24 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d902      	bls.n	80041be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	73fb      	strb	r3, [r7, #15]
        break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041be:	f7ff fdd6 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d1f0      	bne.n	80041aa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041f6:	f7ff fdab 	bl	8003d50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041fa:	f7fd fe93 	bl	8001f24 <HAL_GetTick>
 80041fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004200:	e009      	b.n	8004216 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004202:	f7fd fe8f 	bl	8001f24 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d902      	bls.n	8004216 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e004      	b.n	8004220 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004216:	f7ff fdaa 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d137      	bne.n	8004296 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800423a:	4313      	orrs	r3, r2
 800423c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004254:	f7ff fd6d 	bl	8003d32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd fe64 	bl	8001f24 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004260:	f7fd fe60 	bl	8001f24 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
        break;
 8004272:	e004      	b.n	800427e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004274:	f7ff fd7b 	bl	8003d6e <LL_RCC_PLLSAI1_IsReady>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d1f0      	bne.n	8004260 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e09f      	b.n	80043f2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fbf6 	bl	8001ab8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042d4:	4b49      	ldr	r3, [pc, #292]	@ (80043fc <HAL_RTC_Init+0x15c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d07e      	beq.n	80043de <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	22ca      	movs	r2, #202	@ 0xca
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2253      	movs	r2, #83	@ 0x53
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8ab 	bl	800444c <RTC_EnterInitMode>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	22ff      	movs	r2, #255	@ 0xff
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2204      	movs	r2, #4
 8004308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e067      	b.n	80043e2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6919      	ldr	r1, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	041a      	lsls	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004370:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0203 	bic.w	r2, r2, #3
 8004380:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d113      	bne.n	80043d0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f829 	bl	8004400 <HAL_RTC_WaitForSynchro>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	22ff      	movs	r2, #255	@ 0xff
 80043ba:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e010      	b.n	80043f2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	22ff      	movs	r2, #255	@ 0xff
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e001      	b.n	80043e2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40002800 	.word	0x40002800

08004400 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004416:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004418:	f7fd fd84 	bl	8001f24 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800441e:	e009      	b.n	8004434 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004420:	f7fd fd80 	bl	8001f24 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800442e:	d901      	bls.n	8004434 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e007      	b.n	8004444 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ee      	beq.n	8004420 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d119      	bne.n	8004496 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800446c:	f7fd fd5a 	bl	8001f24 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004472:	e009      	b.n	8004488 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004474:	f7fd fd56 	bl	8001f24 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004482:	d901      	bls.n	8004488 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e007      	b.n	8004498 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0a8      	b.n	800460c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	22ca      	movs	r2, #202	@ 0xca
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2253      	movs	r2, #83	@ 0x53
 80044d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80044e8:	f7fd fd1c 	bl	8001f24 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80044ee:	e015      	b.n	800451c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f0:	f7fd fd18 	bl	8001f24 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fe:	d90d      	bls.n	800451c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2203      	movs	r2, #3
 800450c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e077      	b.n	800460c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e2      	bne.n	80044f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004538:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800454a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800454c:	f7fd fcea 	bl	8001f24 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004552:	e015      	b.n	8004580 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004554:	f7fd fce6 	bl	8001f24 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004562:	d90d      	bls.n	8004580 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	22ff      	movs	r2, #255	@ 0xff
 800456a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2203      	movs	r2, #3
 8004570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e045      	b.n	800460c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0e2      	beq.n	8004554 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0207 	bic.w	r2, r2, #7
 80045a4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80045b6:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045bc:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045c2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80045c6:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045e0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	22ff      	movs	r2, #255	@ 0xff
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	58000800 	.word	0x58000800

08004618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e095      	b.n	8004756 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463a:	d009      	beq.n	8004650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	e005      	b.n	8004650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd fa5a 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004690:	d902      	bls.n	8004698 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e002      	b.n	800469e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800469c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_Init+0xa0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	ea42 0103 	orr.w	r1, r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	f003 0204 	and.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004734:	ea42 0103 	orr.w	r1, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e054      	b.n	800481c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d111      	bne.n	80047a2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fbde 	bl	8004f48 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a23      	ldr	r2, [pc, #140]	@ (8004824 <HAL_TIM_Base_Init+0xc4>)
 8004798:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f000 fb57 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	08004829 	.word	0x08004829

08004828 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d001      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e036      	b.n	80048c2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <HAL_TIM_Base_Start_IT+0x94>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x44>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487e:	d115      	bne.n	80048ac <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d015      	beq.n	80048be <HAL_TIM_Base_Start_IT+0x82>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004898:	d011      	beq.n	80048be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	e008      	b.n	80048be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e000      	b.n	80048c0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	00010007 	.word	0x00010007

080048d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d026      	beq.n	8004948 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d021      	beq.n	8004948 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
 800492c:	e009      	b.n	8004942 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d026      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d021      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0204 	mvn.w	r2, #4
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
 8004984:	e009      	b.n	800499a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d026      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d021      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e009      	b.n	80049f2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d026      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d021      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
 8004a34:	e009      	b.n	8004a4a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00e      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0201 	mvn.w	r2, #1
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f06f 0220 	mvn.w	r2, #32
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	460b      	mov	r3, r1
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e12e      	b.n	8004e5a <HAL_TIM_RegisterCallback+0x27a>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f040 80c1 	bne.w	8004d8c <HAL_TIM_RegisterCallback+0x1ac>
  {
    switch (CallbackID)
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	2b1b      	cmp	r3, #27
 8004c0e:	f200 80ba 	bhi.w	8004d86 <HAL_TIM_RegisterCallback+0x1a6>
 8004c12:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <HAL_TIM_RegisterCallback+0x38>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c91 	.word	0x08004c91
 8004c20:	08004c99 	.word	0x08004c99
 8004c24:	08004ca1 	.word	0x08004ca1
 8004c28:	08004ca9 	.word	0x08004ca9
 8004c2c:	08004cb1 	.word	0x08004cb1
 8004c30:	08004cb9 	.word	0x08004cb9
 8004c34:	08004cc1 	.word	0x08004cc1
 8004c38:	08004cc9 	.word	0x08004cc9
 8004c3c:	08004cd1 	.word	0x08004cd1
 8004c40:	08004cd9 	.word	0x08004cd9
 8004c44:	08004ce1 	.word	0x08004ce1
 8004c48:	08004ce9 	.word	0x08004ce9
 8004c4c:	08004cf1 	.word	0x08004cf1
 8004c50:	08004cfb 	.word	0x08004cfb
 8004c54:	08004d05 	.word	0x08004d05
 8004c58:	08004d0f 	.word	0x08004d0f
 8004c5c:	08004d19 	.word	0x08004d19
 8004c60:	08004d23 	.word	0x08004d23
 8004c64:	08004d2d 	.word	0x08004d2d
 8004c68:	08004d37 	.word	0x08004d37
 8004c6c:	08004d41 	.word	0x08004d41
 8004c70:	08004d4b 	.word	0x08004d4b
 8004c74:	08004d55 	.word	0x08004d55
 8004c78:	08004d5f 	.word	0x08004d5f
 8004c7c:	08004d69 	.word	0x08004d69
 8004c80:	08004d73 	.word	0x08004d73
 8004c84:	08004d7d 	.word	0x08004d7d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004c8e:	e0e3      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004c96:	e0df      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004c9e:	e0db      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004ca6:	e0d7      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004cae:	e0d3      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004cb6:	e0cf      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004cbe:	e0cb      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004cc6:	e0c7      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004cce:	e0c3      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004cd6:	e0bf      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004cde:	e0bb      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004ce6:	e0b7      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004cee:	e0b3      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004cf8:	e0ae      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8004d02:	e0a9      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8004d0c:	e0a4      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8004d16:	e09f      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8004d20:	e09a      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004d2a:	e095      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8004d34:	e090      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004d3e:	e08b      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004d48:	e086      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8004d52:	e081      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8004d5c:	e07c      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8004d66:	e077      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8004d70:	e072      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8004d7a:	e06d      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8004d84:	e068      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
        break;
 8004d8a:	e065      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d15d      	bne.n	8004e54 <HAL_TIM_RegisterCallback+0x274>
  {
    switch (CallbackID)
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	2b0d      	cmp	r3, #13
 8004d9c:	d857      	bhi.n	8004e4e <HAL_TIM_RegisterCallback+0x26e>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <HAL_TIM_RegisterCallback+0x1c4>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004ddd 	.word	0x08004ddd
 8004da8:	08004de5 	.word	0x08004de5
 8004dac:	08004ded 	.word	0x08004ded
 8004db0:	08004df5 	.word	0x08004df5
 8004db4:	08004dfd 	.word	0x08004dfd
 8004db8:	08004e05 	.word	0x08004e05
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e25 	.word	0x08004e25
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004e45 	.word	0x08004e45
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004de2:	e039      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004dea:	e035      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004df2:	e031      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004dfa:	e02d      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004e02:	e029      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004e0a:	e025      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004e12:	e021      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004e1a:	e01d      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004e22:	e019      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004e2a:	e015      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004e32:	e011      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004e3a:	e00d      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004e42:	e009      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004e4c:	e004      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
        break;
 8004e52:	e001      	b.n	8004e58 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a30      	ldr	r2, [pc, #192]	@ (8004f3c <TIM_Base_SetConfig+0xd4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x20>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	@ (8004f3c <TIM_Base_SetConfig+0xd4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <TIM_Base_SetConfig+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x52>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	@ (8004f44 <TIM_Base_SetConfig+0xdc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <TIM_Base_SetConfig+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0xa0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <TIM_Base_SetConfig+0xd8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0xa0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	@ (8004f44 <TIM_Base_SetConfig+0xdc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d103      	bne.n	8004f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <TIM_ResetCallback+0x84>)
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <TIM_ResetCallback+0x88>)
 8004f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <TIM_ResetCallback+0x8c>)
 8004f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <TIM_ResetCallback+0x90>)
 8004f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <TIM_ResetCallback+0x94>)
 8004f74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <TIM_ResetCallback+0x98>)
 8004f7c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <TIM_ResetCallback+0x9c>)
 8004f84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	@ (8004fe8 <TIM_ResetCallback+0xa0>)
 8004f8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <TIM_ResetCallback+0xa4>)
 8004f94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <TIM_ResetCallback+0xa8>)
 8004f9c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a14      	ldr	r2, [pc, #80]	@ (8004ff4 <TIM_ResetCallback+0xac>)
 8004fa4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <TIM_ResetCallback+0xb0>)
 8004fac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	@ (8004ffc <TIM_ResetCallback+0xb4>)
 8004fb4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a11      	ldr	r2, [pc, #68]	@ (8005000 <TIM_ResetCallback+0xb8>)
 8004fbc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	08001935 	.word	0x08001935
 8004fd0:	08004b2b 	.word	0x08004b2b
 8004fd4:	08004ba3 	.word	0x08004ba3
 8004fd8:	08004bb7 	.word	0x08004bb7
 8004fdc:	08004b53 	.word	0x08004b53
 8004fe0:	08004b67 	.word	0x08004b67
 8004fe4:	08004b3f 	.word	0x08004b3f
 8004fe8:	08004b7b 	.word	0x08004b7b
 8004fec:	08004b8f 	.word	0x08004b8f
 8004ff0:	08004bcb 	.word	0x08004bcb
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005041 	.word	0x08005041

08005004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_RCC_GetUSARTClockSource>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005060:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4013      	ands	r3, r2
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_GetLPUARTClockSource>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005080:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4013      	ands	r3, r2
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e042      	b.n	800512c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc fd63 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	@ 0x24
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa50 	bl	8005584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f825 	bl	8005134 <UART_SetConfig>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e01b      	b.n	800512c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 facf 	bl	80056c8 <UART_CheckIdleState>
 800512a:	4603      	mov	r3, r0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b08c      	sub	sp, #48	@ 0x30
 800513a:	af00      	add	r7, sp, #0
 800513c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	431a      	orrs	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4313      	orrs	r3, r2
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4baf      	ldr	r3, [pc, #700]	@ (8005420 <UART_SetConfig+0x2ec>)
 8005164:	4013      	ands	r3, r2
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800516c:	430b      	orrs	r3, r1
 800516e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4aa4      	ldr	r2, [pc, #656]	@ (8005424 <UART_SetConfig+0x2f0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519c:	4313      	orrs	r3, r2
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	f023 010f 	bic.w	r1, r3, #15
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a95      	ldr	r2, [pc, #596]	@ (8005428 <UART_SetConfig+0x2f4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d125      	bne.n	8005224 <UART_SetConfig+0xf0>
 80051d8:	2003      	movs	r0, #3
 80051da:	f7ff ff3b 	bl	8005054 <LL_RCC_GetUSARTClockSource>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d81b      	bhi.n	800521c <UART_SetConfig+0xe8>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <UART_SetConfig+0xb8>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	08005205 	.word	0x08005205
 80051f8:	08005215 	.word	0x08005215
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005202:	e042      	b.n	800528a <UART_SetConfig+0x156>
 8005204:	2302      	movs	r3, #2
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520a:	e03e      	b.n	800528a <UART_SetConfig+0x156>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005212:	e03a      	b.n	800528a <UART_SetConfig+0x156>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521a:	e036      	b.n	800528a <UART_SetConfig+0x156>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005222:	e032      	b.n	800528a <UART_SetConfig+0x156>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a7e      	ldr	r2, [pc, #504]	@ (8005424 <UART_SetConfig+0x2f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12a      	bne.n	8005284 <UART_SetConfig+0x150>
 800522e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005232:	f7ff ff1f 	bl	8005074 <LL_RCC_GetLPUARTClockSource>
 8005236:	4603      	mov	r3, r0
 8005238:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800523c:	d01a      	beq.n	8005274 <UART_SetConfig+0x140>
 800523e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005242:	d81b      	bhi.n	800527c <UART_SetConfig+0x148>
 8005244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005248:	d00c      	beq.n	8005264 <UART_SetConfig+0x130>
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800524e:	d815      	bhi.n	800527c <UART_SetConfig+0x148>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <UART_SetConfig+0x128>
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005258:	d008      	beq.n	800526c <UART_SetConfig+0x138>
 800525a:	e00f      	b.n	800527c <UART_SetConfig+0x148>
 800525c:	2300      	movs	r3, #0
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e012      	b.n	800528a <UART_SetConfig+0x156>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e00e      	b.n	800528a <UART_SetConfig+0x156>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e00a      	b.n	800528a <UART_SetConfig+0x156>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e006      	b.n	800528a <UART_SetConfig+0x156>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005282:	e002      	b.n	800528a <UART_SetConfig+0x156>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a65      	ldr	r2, [pc, #404]	@ (8005424 <UART_SetConfig+0x2f0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	f040 8097 	bne.w	80053c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800529a:	2b08      	cmp	r3, #8
 800529c:	d823      	bhi.n	80052e6 <UART_SetConfig+0x1b2>
 800529e:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <UART_SetConfig+0x170>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052d7 	.word	0x080052d7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052e7 	.word	0x080052e7
 80052c4:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe fab4 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b56      	ldr	r3, [pc, #344]	@ (800542c <UART_SetConfig+0x2f8>)
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fa2d 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 812b 	beq.w	8005550 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005430 <UART_SetConfig+0x2fc>)
 8005300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005304:	461a      	mov	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	fbb3 f3f2 	udiv	r3, r3, r2
 800530c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	429a      	cmp	r2, r3
 800531c:	d305      	bcc.n	800532a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	429a      	cmp	r2, r3
 8005328:	d903      	bls.n	8005332 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005330:	e10e      	b.n	8005550 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	2200      	movs	r2, #0
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	60fa      	str	r2, [r7, #12]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	4a3c      	ldr	r2, [pc, #240]	@ (8005430 <UART_SetConfig+0x2fc>)
 8005340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005344:	b29b      	uxth	r3, r3
 8005346:	2200      	movs	r2, #0
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005354:	f7fa ff1a 	bl	800018c <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	020b      	lsls	r3, r1, #8
 800536a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800536e:	0202      	lsls	r2, r0, #8
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	6849      	ldr	r1, [r1, #4]
 8005374:	0849      	lsrs	r1, r1, #1
 8005376:	2000      	movs	r0, #0
 8005378:	460c      	mov	r4, r1
 800537a:	4605      	mov	r5, r0
 800537c:	eb12 0804 	adds.w	r8, r2, r4
 8005380:	eb43 0905 	adc.w	r9, r3, r5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	469a      	mov	sl, r3
 800538c:	4693      	mov	fp, r2
 800538e:	4652      	mov	r2, sl
 8005390:	465b      	mov	r3, fp
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fa fef9 	bl	800018c <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4613      	mov	r3, r2
 80053a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a8:	d308      	bcc.n	80053bc <UART_SetConfig+0x288>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b0:	d204      	bcs.n	80053bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	e0c9      	b.n	8005550 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053c2:	e0c5      	b.n	8005550 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053cc:	d16d      	bne.n	80054aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80053ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2b07      	cmp	r3, #7
 80053d6:	d82d      	bhi.n	8005434 <UART_SetConfig+0x300>
 80053d8:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x2ac>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005435 	.word	0x08005435
 80053ec:	0800540f 	.word	0x0800540f
 80053f0:	08005435 	.word	0x08005435
 80053f4:	08005435 	.word	0x08005435
 80053f8:	08005435 	.word	0x08005435
 80053fc:	08005417 	.word	0x08005417
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7fe fa2e 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005406:	e01b      	b.n	8005440 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005408:	4b08      	ldr	r3, [pc, #32]	@ (800542c <UART_SetConfig+0x2f8>)
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800540c:	e018      	b.n	8005440 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540e:	f7fe f991 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005414:	e014      	b.n	8005440 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800541c:	e010      	b.n	8005440 <UART_SetConfig+0x30c>
 800541e:	bf00      	nop
 8005420:	cfff69f3 	.word	0xcfff69f3
 8005424:	40008000 	.word	0x40008000
 8005428:	40013800 	.word	0x40013800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	0800964c 	.word	0x0800964c
      default:
        pclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800543e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8084 	beq.w	8005550 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	4a4b      	ldr	r2, [pc, #300]	@ (800557c <UART_SetConfig+0x448>)
 800544e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005452:	461a      	mov	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	fbb3 f3f2 	udiv	r3, r3, r2
 800545a:	005a      	lsls	r2, r3, #1
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	441a      	add	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d916      	bls.n	80054a2 <UART_SetConfig+0x36e>
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547a:	d212      	bcs.n	80054a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f023 030f 	bic.w	r3, r3, #15
 8005484:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	b29a      	uxth	r2, r3
 8005492:	8bfb      	ldrh	r3, [r7, #30]
 8005494:	4313      	orrs	r3, r2
 8005496:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	8bfa      	ldrh	r2, [r7, #30]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e056      	b.n	8005550 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054a8:	e052      	b.n	8005550 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d822      	bhi.n	80054fa <UART_SetConfig+0x3c6>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <UART_SetConfig+0x388>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054fb 	.word	0x080054fb
 80054c8:	080054eb 	.word	0x080054eb
 80054cc:	080054fb 	.word	0x080054fb
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	080054fb 	.word	0x080054fb
 80054d8:	080054f3 	.word	0x080054f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054dc:	f7fe f9c0 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80054e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054e2:	e010      	b.n	8005506 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e4:	4b26      	ldr	r3, [pc, #152]	@ (8005580 <UART_SetConfig+0x44c>)
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054e8:	e00d      	b.n	8005506 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ea:	f7fe f923 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80054ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054f0:	e009      	b.n	8005506 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054f8:	e005      	b.n	8005506 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005504:	bf00      	nop
    }

    if (pclk != 0U)
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d021      	beq.n	8005550 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	4a1a      	ldr	r2, [pc, #104]	@ (800557c <UART_SetConfig+0x448>)
 8005512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005516:	461a      	mov	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	fbb3 f2f2 	udiv	r2, r3, r2
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	441a      	add	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	d909      	bls.n	800554a <UART_SetConfig+0x416>
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553c:	d205      	bcs.n	800554a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	b29a      	uxth	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	e002      	b.n	8005550 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2201      	movs	r2, #1
 8005554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800556c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005570:	4618      	mov	r0, r3
 8005572:	3730      	adds	r7, #48	@ 0x30
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557a:	bf00      	nop
 800557c:	0800964c 	.word	0x0800964c
 8005580:	00f42400 	.word	0x00f42400

08005584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01a      	beq.n	800569a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005682:	d10a      	bne.n	800569a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
  }
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b098      	sub	sp, #96	@ 0x60
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d8:	f7fc fc24 	bl	8001f24 <HAL_GetTick>
 80056dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d12f      	bne.n	800574c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f88e 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d022      	beq.n	800574c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571a:	653b      	str	r3, [r7, #80]	@ 0x50
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800572a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e063      	b.n	8005814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d149      	bne.n	80057ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005762:	2200      	movs	r2, #0
 8005764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f857 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d03c      	beq.n	80057ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	623b      	str	r3, [r7, #32]
   return(result);
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
 8005794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c6:	61fa      	str	r2, [r7, #28]
 80057c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	69b9      	ldr	r1, [r7, #24]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	617b      	str	r3, [r7, #20]
   return(result);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e012      	b.n	8005814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3758      	adds	r7, #88	@ 0x58
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e04f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d04b      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc fb75 	bl	8001f24 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e04e      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d034      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d031      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d110      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f838 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2208      	movs	r2, #8
 800588a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d111      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f81e 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a0      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b095      	sub	sp, #84	@ 0x54
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
 800591e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3308      	adds	r3, #8
 8005952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800595a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e3      	bne.n	8005930 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d118      	bne.n	80059a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	60bb      	str	r3, [r7, #8]
   return(result);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0310 	bic.w	r3, r3, #16
 8005984:	647b      	str	r3, [r7, #68]	@ 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e6      	bne.n	8005970 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059b6:	bf00      	nop
 80059b8:	3754      	adds	r7, #84	@ 0x54
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e027      	b.n	8005a28 <HAL_UARTEx_DisableFifoMode+0x66>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	@ 0x24
 80059e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e02d      	b.n	8005aa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	@ 0x24
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f84f 	bl	8005b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e02d      	b.n	8005b24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	@ 0x24
 8005ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f811 	bl	8005b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d108      	bne.n	8005b4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b4c:	e031      	b.n	8005bb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b52:	2308      	movs	r3, #8
 8005b54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	0e5b      	lsrs	r3, r3, #25
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0f5b      	lsrs	r3, r3, #29
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	7b3a      	ldrb	r2, [r7, #12]
 8005b7a:	4911      	ldr	r1, [pc, #68]	@ (8005bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005b7c:	5c8a      	ldrb	r2, [r1, r2]
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b82:	7b3a      	ldrb	r2, [r7, #12]
 8005b84:	490f      	ldr	r1, [pc, #60]	@ (8005bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005b86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	7b7a      	ldrb	r2, [r7, #13]
 8005b98:	4909      	ldr	r1, [pc, #36]	@ (8005bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005b9a:	5c8a      	ldrb	r2, [r1, r2]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ba0:	7b7a      	ldrb	r2, [r7, #13]
 8005ba2:	4908      	ldr	r1, [pc, #32]	@ (8005bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	08009664 	.word	0x08009664
 8005bc4:	0800966c 	.word	0x0800966c

08005bc8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005bd2:	f107 0308 	add.w	r3, r7, #8
 8005bd6:	2218      	movs	r2, #24
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f982 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005be0:	233f      	movs	r3, #63	@ 0x3f
 8005be2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005be4:	2381      	movs	r3, #129	@ 0x81
 8005be6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005be8:	1dfb      	adds	r3, r7, #7
 8005bea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005bec:	2301      	movs	r3, #1
 8005bee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fbfe 	bl	80073f8 <hci_send_req>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da01      	bge.n	8005c06 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005c02:	23ff      	movs	r3, #255	@ 0xff
 8005c04:	e000      	b.n	8005c08 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005c06:	79fb      	ldrb	r3, [r7, #7]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b0ce      	sub	sp, #312	@ 0x138
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4605      	mov	r5, r0
 8005c18:	460c      	mov	r4, r1
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c22:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c26:	462a      	mov	r2, r5
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005c32:	4622      	mov	r2, r4
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c3a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005c3e:	4602      	mov	r2, r0
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c46:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005c4e:	f107 0310 	add.w	r3, r7, #16
 8005c52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005c56:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	f107 0210 	add.w	r2, r7, #16
 8005c60:	4413      	add	r3, r2
 8005c62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005c66:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005c6a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005c6e:	4413      	add	r3, r2
 8005c70:	3309      	adds	r3, #9
 8005c72:	f107 0210 	add.w	r2, r7, #16
 8005c76:	4413      	add	r3, r2
 8005c78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005c92:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005c96:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005ca8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005cac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005cb0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005cb4:	8812      	ldrh	r2, [r2, #0]
 8005cb6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005cc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005cc8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ccc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cda:	3302      	adds	r3, #2
 8005cdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005ce0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ce4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ce8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005cfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005cfe:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005d02:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d12:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005d16:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d26:	3308      	adds	r3, #8
 8005d28:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f8c7 	bl	8006ec4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005d36:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005d3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005d3e:	4413      	add	r3, r2
 8005d40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d48:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005d4c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d52:	3301      	adds	r3, #1
 8005d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005d62:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 f8ac 	bl	8006ec4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005d6c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005d70:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005d74:	4413      	add	r3, r2
 8005d76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d7e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005d82:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d92:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005d96:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005da6:	2218      	movs	r2, #24
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f89a 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005db0:	233f      	movs	r3, #63	@ 0x3f
 8005db2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005db6:	2383      	movs	r3, #131	@ 0x83
 8005db8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005dcc:	f107 030f 	add.w	r3, r7, #15
 8005dd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 fb09 	bl	80073f8 <hci_send_req>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da01      	bge.n	8005df0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005dec:	23ff      	movs	r3, #255	@ 0xff
 8005dee:	e004      	b.n	8005dfa <aci_gap_set_discoverable+0x1ea>
  return status;
 8005df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005df4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005df8:	781b      	ldrb	r3, [r3, #0]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bdb0      	pop	{r4, r5, r7, pc}

08005e04 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b0cc      	sub	sp, #304	@ 0x130
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e10:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005e14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005e16:	f107 0310 	add.w	r3, r7, #16
 8005e1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e22:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e34:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e38:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e4e:	2218      	movs	r2, #24
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 f846 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e58:	233f      	movs	r3, #63	@ 0x3f
 8005e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005e5e:	2385      	movs	r3, #133	@ 0x85
 8005e60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e64:	f107 0310 	add.w	r3, r7, #16
 8005e68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e74:	f107 030f 	add.w	r3, r7, #15
 8005e78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fab5 	bl	80073f8 <hci_send_req>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da01      	bge.n	8005e98 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005e94:	23ff      	movs	r3, #255	@ 0xff
 8005e96:	e004      	b.n	8005ea2 <aci_gap_set_io_capability+0x9e>
  return status;
 8005e98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ea0:	781b      	ldrb	r3, [r3, #0]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005eac:	b5b0      	push	{r4, r5, r7, lr}
 8005eae:	b0cc      	sub	sp, #304	@ 0x130
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ebe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ece:	4622      	mov	r2, r4
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ed6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005eda:	4602      	mov	r2, r0
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005ee6:	460a      	mov	r2, r1
 8005ee8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ef6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f32:	3301      	adds	r3, #1
 8005f34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f40:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f5a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f66:	3301      	adds	r3, #1
 8005f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f70:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005f74:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f84:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005f88:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f98:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005f9c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005fb0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fb8:	3304      	adds	r3, #4
 8005fba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fc2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005fc6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fd6:	2218      	movs	r2, #24
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 ff82 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fe0:	233f      	movs	r3, #63	@ 0x3f
 8005fe2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005fe6:	2386      	movs	r3, #134	@ 0x86
 8005fe8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005fec:	f107 0310 	add.w	r3, r7, #16
 8005ff0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ff8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005ffc:	f107 030f 	add.w	r3, r7, #15
 8006000:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006004:	2301      	movs	r3, #1
 8006006:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800600a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f9f1 	bl	80073f8 <hci_send_req>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	da01      	bge.n	8006020 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800601c:	23ff      	movs	r3, #255	@ 0xff
 800601e:	e004      	b.n	800602a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006024:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006028:	781b      	ldrb	r3, [r3, #0]
}
 800602a:	4618      	mov	r0, r3
 800602c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006030:	46bd      	mov	sp, r7
 8006032:	bdb0      	pop	{r4, r5, r7, pc}

08006034 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b0cc      	sub	sp, #304	@ 0x130
 8006038:	af00      	add	r7, sp, #0
 800603a:	4602      	mov	r2, r0
 800603c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006040:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006044:	6019      	str	r1, [r3, #0]
 8006046:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800604a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800604e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006050:	f107 0310 	add.w	r3, r7, #16
 8006054:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800605c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800606a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800606e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006072:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800607a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800607e:	3302      	adds	r3, #2
 8006080:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006088:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800608c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800609a:	3304      	adds	r3, #4
 800609c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060a4:	2218      	movs	r2, #24
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 ff1b 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060ae:	233f      	movs	r3, #63	@ 0x3f
 80060b0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80060b4:	2388      	movs	r3, #136	@ 0x88
 80060b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060ba:	f107 0310 	add.w	r3, r7, #16
 80060be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060ca:	f107 030f 	add.w	r3, r7, #15
 80060ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f98a 	bl	80073f8 <hci_send_req>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da01      	bge.n	80060ee <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80060ea:	23ff      	movs	r3, #255	@ 0xff
 80060ec:	e004      	b.n	80060f8 <aci_gap_pass_key_resp+0xc4>
  return status;
 80060ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060f6:	781b      	ldrb	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006102:	b590      	push	{r4, r7, lr}
 8006104:	b0cd      	sub	sp, #308	@ 0x134
 8006106:	af00      	add	r7, sp, #0
 8006108:	4604      	mov	r4, r0
 800610a:	4608      	mov	r0, r1
 800610c:	4611      	mov	r1, r2
 800610e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006112:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800611c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006120:	4622      	mov	r2, r4
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006128:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800612c:	4602      	mov	r2, r0
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006134:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006138:	460a      	mov	r2, r1
 800613a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800613c:	f107 0310 	add.w	r3, r7, #16
 8006140:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	2207      	movs	r2, #7
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fec9 	bl	8006ee4 <Osal_MemSet>
  int index_input = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800615c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006160:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006168:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800616c:	3301      	adds	r3, #1
 800616e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006176:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800617a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800618c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006190:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006194:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800619c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061a0:	3301      	adds	r3, #1
 80061a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061aa:	2218      	movs	r2, #24
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fe98 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80061b4:	233f      	movs	r3, #63	@ 0x3f
 80061b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80061ba:	238a      	movs	r3, #138	@ 0x8a
 80061bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80061d0:	f107 0308 	add.w	r3, r7, #8
 80061d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80061d8:	2307      	movs	r3, #7
 80061da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f907 	bl	80073f8 <hci_send_req>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da01      	bge.n	80061f4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80061f0:	23ff      	movs	r3, #255	@ 0xff
 80061f2:	e02e      	b.n	8006252 <aci_gap_init+0x150>
  if ( resp.Status )
 80061f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <aci_gap_init+0x10c>
    return resp.Status;
 8006202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006206:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	e021      	b.n	8006252 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800620e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006212:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006216:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800621a:	b29a      	uxth	r2, r3
 800621c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006220:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006228:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800622c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006230:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800623a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800623c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006240:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006244:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800624e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006258:	46bd      	mov	sp, r7
 800625a:	bd90      	pop	{r4, r7, pc}

0800625c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b0cc      	sub	sp, #304	@ 0x130
 8006260:	af00      	add	r7, sp, #0
 8006262:	4602      	mov	r2, r0
 8006264:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006268:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800626c:	6019      	str	r1, [r3, #0]
 800626e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006272:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006276:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006284:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006292:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006296:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800629a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80062a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062a6:	3301      	adds	r3, #1
 80062a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062b0:	1c58      	adds	r0, r3, #1
 80062b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062b6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	f000 fdfd 	bl	8006ec4 <Osal_MemCpy>
  index_input += AdvDataLen;
 80062ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ce:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062e2:	2218      	movs	r2, #24
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fdfc 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062ec:	233f      	movs	r3, #63	@ 0x3f
 80062ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80062f2:	238e      	movs	r3, #142	@ 0x8e
 80062f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80062f8:	f107 0310 	add.w	r3, r7, #16
 80062fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006300:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006304:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006308:	f107 030f 	add.w	r3, r7, #15
 800630c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006310:	2301      	movs	r3, #1
 8006312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f001 f86b 	bl	80073f8 <hci_send_req>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	da01      	bge.n	800632c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006328:	23ff      	movs	r3, #255	@ 0xff
 800632a:	e004      	b.n	8006336 <aci_gap_update_adv_data+0xda>
  return status;
 800632c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006330:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006334:	781b      	ldrb	r3, [r3, #0]
}
 8006336:	4618      	mov	r0, r3
 8006338:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800634a:	f107 0308 	add.w	r3, r7, #8
 800634e:	2218      	movs	r2, #24
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fdc6 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006358:	233f      	movs	r3, #63	@ 0x3f
 800635a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800635c:	2392      	movs	r3, #146	@ 0x92
 800635e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006360:	1dfb      	adds	r3, r7, #7
 8006362:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006364:	2301      	movs	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f842 	bl	80073f8 <hci_send_req>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	da01      	bge.n	800637e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800637a:	23ff      	movs	r3, #255	@ 0xff
 800637c:	e000      	b.n	8006380 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800637e:	79fb      	ldrb	r3, [r7, #7]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0cc      	sub	sp, #304	@ 0x130
 800638c:	af00      	add	r7, sp, #0
 800638e:	4602      	mov	r2, r0
 8006390:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006394:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006398:	801a      	strh	r2, [r3, #0]
 800639a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800639e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80063a2:	460a      	mov	r2, r1
 80063a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80063a6:	f107 0310 	add.w	r3, r7, #16
 80063aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80063ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063d4:	3302      	adds	r3, #2
 80063d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063e2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80063ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063f8:	2218      	movs	r2, #24
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fd71 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006402:	233f      	movs	r3, #63	@ 0x3f
 8006404:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8006408:	23a5      	movs	r3, #165	@ 0xa5
 800640a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800640e:	f107 0310 	add.w	r3, r7, #16
 8006412:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006416:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800641a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800641e:	f107 030f 	add.w	r3, r7, #15
 8006422:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006426:	2301      	movs	r3, #1
 8006428:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800642c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f000 ffe0 	bl	80073f8 <hci_send_req>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	da01      	bge.n	8006442 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800643e:	23ff      	movs	r3, #255	@ 0xff
 8006440:	e004      	b.n	800644c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006446:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800644a:	781b      	ldrb	r3, [r3, #0]
}
 800644c:	4618      	mov	r0, r3
 800644e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b088      	sub	sp, #32
 800645a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006460:	f107 0308 	add.w	r3, r7, #8
 8006464:	2218      	movs	r2, #24
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fd3b 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800646e:	233f      	movs	r3, #63	@ 0x3f
 8006470:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006472:	f240 1301 	movw	r3, #257	@ 0x101
 8006476:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800647c:	2301      	movs	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 ffb6 	bl	80073f8 <hci_send_req>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	da01      	bge.n	8006496 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006492:	23ff      	movs	r3, #255	@ 0xff
 8006494:	e000      	b.n	8006498 <aci_gatt_init+0x42>
  return status;
 8006496:	79fb      	ldrb	r3, [r7, #7]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b0cf      	sub	sp, #316	@ 0x13c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80064ac:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80064b0:	6001      	str	r1, [r0, #0]
 80064b2:	4610      	mov	r0, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80064be:	4622      	mov	r2, r4
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80064ca:	4602      	mov	r2, r0
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80064d6:	460a      	mov	r2, r1
 80064d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80064da:	f107 0310 	add.w	r3, r7, #16
 80064de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80064e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064e6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d00a      	beq.n	8006506 <aci_gatt_add_service+0x66>
 80064f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064f4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d101      	bne.n	8006502 <aci_gatt_add_service+0x62>
 80064fe:	2311      	movs	r3, #17
 8006500:	e002      	b.n	8006508 <aci_gatt_add_service+0x68>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <aci_gatt_add_service+0x68>
 8006506:	2303      	movs	r3, #3
 8006508:	f107 0210 	add.w	r2, r7, #16
 800650c:	4413      	add	r3, r2
 800650e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006512:	f107 030c 	add.w	r3, r7, #12
 8006516:	2203      	movs	r2, #3
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fce2 	bl	8006ee4 <Osal_MemSet>
  int index_input = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006526:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800652a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800652e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800653a:	3301      	adds	r3, #1
 800653c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006540:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006544:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d002      	beq.n	8006554 <aci_gatt_add_service+0xb4>
 800654e:	2b02      	cmp	r3, #2
 8006550:	d004      	beq.n	800655c <aci_gatt_add_service+0xbc>
 8006552:	e007      	b.n	8006564 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006554:	2302      	movs	r3, #2
 8006556:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800655a:	e005      	b.n	8006568 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800655c:	2310      	movs	r3, #16
 800655e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006562:	e001      	b.n	8006568 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006564:	2397      	movs	r3, #151	@ 0x97
 8006566:	e06c      	b.n	8006642 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006568:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800656c:	1c58      	adds	r0, r3, #1
 800656e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8006572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006576:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	f000 fca2 	bl	8006ec4 <Osal_MemCpy>
    index_input += size;
 8006580:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006584:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006588:	4413      	add	r3, r2
 800658a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006592:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006596:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800659e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065a2:	3301      	adds	r3, #1
 80065a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80065b0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80065b4:	7812      	ldrb	r2, [r2, #0]
 80065b6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80065b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065bc:	3301      	adds	r3, #1
 80065be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065c6:	2218      	movs	r2, #24
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fc8a 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80065d0:	233f      	movs	r3, #63	@ 0x3f
 80065d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80065d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80065da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80065e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80065f6:	2303      	movs	r3, #3
 80065f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fef8 	bl	80073f8 <hci_send_req>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	da01      	bge.n	8006612 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800660e:	23ff      	movs	r3, #255	@ 0xff
 8006610:	e017      	b.n	8006642 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006612:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006616:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006620:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	e00a      	b.n	8006642 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800662c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006630:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006634:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800663e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006648:	46bd      	mov	sp, r7
 800664a:	bd90      	pop	{r4, r7, pc}

0800664c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b0d1      	sub	sp, #324	@ 0x144
 8006650:	af00      	add	r7, sp, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800665a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800665e:	600a      	str	r2, [r1, #0]
 8006660:	4619      	mov	r1, r3
 8006662:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006666:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800666a:	4622      	mov	r2, r4
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006672:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006676:	4602      	mov	r2, r0
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800667e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8006682:	460a      	mov	r2, r1
 8006684:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006686:	f107 0318 	add.w	r3, r7, #24
 800668a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800668e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006692:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d00a      	beq.n	80066b2 <aci_gatt_add_char+0x66>
 800669c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066a0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d101      	bne.n	80066ae <aci_gatt_add_char+0x62>
 80066aa:	2313      	movs	r3, #19
 80066ac:	e002      	b.n	80066b4 <aci_gatt_add_char+0x68>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e000      	b.n	80066b4 <aci_gatt_add_char+0x68>
 80066b2:	2305      	movs	r3, #5
 80066b4:	f107 0218 	add.w	r2, r7, #24
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	2203      	movs	r2, #3
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fc0c 	bl	8006ee4 <Osal_MemSet>
  int index_input = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80066d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80066d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80066da:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80066de:	8812      	ldrh	r2, [r2, #0]
 80066e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80066e6:	3302      	adds	r3, #2
 80066e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80066ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80066f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80066f4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80066fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006700:	3301      	adds	r3, #1
 8006702:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006706:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800670a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d002      	beq.n	800671a <aci_gatt_add_char+0xce>
 8006714:	2b02      	cmp	r3, #2
 8006716:	d004      	beq.n	8006722 <aci_gatt_add_char+0xd6>
 8006718:	e007      	b.n	800672a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800671a:	2302      	movs	r3, #2
 800671c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006720:	e005      	b.n	800672e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006722:	2310      	movs	r3, #16
 8006724:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006728:	e001      	b.n	800672e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800672a:	2397      	movs	r3, #151	@ 0x97
 800672c:	e091      	b.n	8006852 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800672e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006732:	1cd8      	adds	r0, r3, #3
 8006734:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8006738:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800673c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	f000 fbbf 	bl	8006ec4 <Osal_MemCpy>
    index_input += size;
 8006746:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800674a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800674e:	4413      	add	r3, r2
 8006750:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006754:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006758:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800675c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006760:	8812      	ldrh	r2, [r2, #0]
 8006762:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006764:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006768:	3302      	adds	r3, #2
 800676a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800676e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006772:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006776:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006778:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800677c:	3301      	adds	r3, #1
 800677e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006782:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006786:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800678a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800678c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006790:	3301      	adds	r3, #1
 8006792:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006796:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800679a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800679e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80067a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80067a4:	3301      	adds	r3, #1
 80067a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80067aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80067ae:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80067b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80067b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80067b8:	3301      	adds	r3, #1
 80067ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80067be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80067c2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80067c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80067c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80067d6:	2218      	movs	r2, #24
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fb82 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067e0:	233f      	movs	r3, #63	@ 0x3f
 80067e2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80067e6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80067ea:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80067f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80067fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8006806:	2303      	movs	r3, #3
 8006808:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800680c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fdf0 	bl	80073f8 <hci_send_req>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	da01      	bge.n	8006822 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800681e:	23ff      	movs	r3, #255	@ 0xff
 8006820:	e017      	b.n	8006852 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006822:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006826:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006830:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006834:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	e00a      	b.n	8006852 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800683c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006840:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006844:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800684e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}

0800685c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b0cc      	sub	sp, #304	@ 0x130
 8006860:	af00      	add	r7, sp, #0
 8006862:	4605      	mov	r5, r0
 8006864:	460c      	mov	r4, r1
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800686e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006872:	462a      	mov	r2, r5
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800687a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800687e:	4622      	mov	r2, r4
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006886:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800688a:	4602      	mov	r2, r0
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006892:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006896:	460a      	mov	r2, r1
 8006898:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800689a:	f107 0310 	add.w	r3, r7, #16
 800689e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80068a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80068b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80068c0:	8812      	ldrh	r2, [r2, #0]
 80068c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80068c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068c8:	3302      	adds	r3, #2
 80068ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80068ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80068d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068d6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80068da:	8812      	ldrh	r2, [r2, #0]
 80068dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80068de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068e2:	3302      	adds	r3, #2
 80068e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80068e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80068ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068f0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80068f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068fc:	3301      	adds	r3, #1
 80068fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006902:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006906:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800690a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800690e:	7812      	ldrb	r2, [r2, #0]
 8006910:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006912:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006916:	3301      	adds	r3, #1
 8006918:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800691c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006920:	1d98      	adds	r0, r3, #6
 8006922:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006926:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006932:	f000 fac7 	bl	8006ec4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800693a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006944:	4413      	add	r3, r2
 8006946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800694a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800694e:	2218      	movs	r2, #24
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fac6 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006958:	233f      	movs	r3, #63	@ 0x3f
 800695a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800695e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8006962:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800696e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006972:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006976:	f107 030f 	add.w	r3, r7, #15
 800697a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fd34 	bl	80073f8 <hci_send_req>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	da01      	bge.n	800699a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006996:	23ff      	movs	r3, #255	@ 0xff
 8006998:	e004      	b.n	80069a4 <aci_gatt_update_char_value+0x148>
  return status;
 800699a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800699e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069a2:	781b      	ldrb	r3, [r3, #0]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}

080069ae <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b0cc      	sub	sp, #304	@ 0x130
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4602      	mov	r2, r0
 80069b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80069be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80069c0:	f107 0310 	add.w	r3, r7, #16
 80069c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80069c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80069da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80069de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80069e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80069e6:	8812      	ldrh	r2, [r2, #0]
 80069e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069ee:	3302      	adds	r3, #2
 80069f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069f8:	2218      	movs	r2, #24
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fa71 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a02:	233f      	movs	r3, #63	@ 0x3f
 8006a04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006a08:	f240 1325 	movw	r3, #293	@ 0x125
 8006a0c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a10:	f107 0310 	add.w	r3, r7, #16
 8006a14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006a20:	f107 030f 	add.w	r3, r7, #15
 8006a24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fcdf 	bl	80073f8 <hci_send_req>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da01      	bge.n	8006a44 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006a40:	23ff      	movs	r3, #255	@ 0xff
 8006a42:	e004      	b.n	8006a4e <aci_gatt_confirm_indication+0xa0>
  return status;
 8006a44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a48:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a4c:	781b      	ldrb	r3, [r3, #0]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b0cc      	sub	sp, #304	@ 0x130
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4602      	mov	r2, r0
 8006a60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a64:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006a68:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8006a6a:	f107 0310 	add.w	r3, r7, #16
 8006a6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a76:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a8c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a90:	8812      	ldrh	r2, [r2, #0]
 8006a92:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a98:	3302      	adds	r3, #2
 8006a9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006aa2:	2218      	movs	r2, #24
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fa1c 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006aac:	233f      	movs	r3, #63	@ 0x3f
 8006aae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8006ab2:	f240 1327 	movw	r3, #295	@ 0x127
 8006ab6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006aba:	f107 0310 	add.w	r3, r7, #16
 8006abe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ac6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006aca:	f107 030f 	add.w	r3, r7, #15
 8006ace:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fc8a 	bl	80073f8 <hci_send_req>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da01      	bge.n	8006aee <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8006aea:	23ff      	movs	r3, #255	@ 0xff
 8006aec:	e004      	b.n	8006af8 <aci_gatt_allow_read+0xa0>
  return status;
 8006aee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006af2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006af6:	781b      	ldrb	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b0cc      	sub	sp, #304	@ 0x130
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b16:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006b26:	460a      	mov	r2, r1
 8006b28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006b2a:	f107 0310 	add.w	r3, r7, #16
 8006b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b4c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b72:	3301      	adds	r3, #1
 8006b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b7c:	1c98      	adds	r0, r3, #2
 8006b7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b8c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006b90:	6819      	ldr	r1, [r3, #0]
 8006b92:	f000 f997 	bl	8006ec4 <Osal_MemCpy>
  index_input += Length;
 8006b96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b9a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bae:	2218      	movs	r2, #24
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f996 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bb8:	233f      	movs	r3, #63	@ 0x3f
 8006bba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006bc4:	f107 0310 	add.w	r3, r7, #16
 8006bc8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006bd0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006bd4:	f107 030f 	add.w	r3, r7, #15
 8006bd8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fc05 	bl	80073f8 <hci_send_req>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da01      	bge.n	8006bf8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006bf4:	23ff      	movs	r3, #255	@ 0xff
 8006bf6:	e004      	b.n	8006c02 <aci_hal_write_config_data+0x100>
  return status;
 8006bf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bfc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c00:	781b      	ldrb	r3, [r3, #0]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b0cc      	sub	sp, #304	@ 0x130
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4602      	mov	r2, r0
 8006c14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006c26:	460a      	mov	r2, r1
 8006c28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006c2a:	f107 0310 	add.w	r3, r7, #16
 8006c2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006c32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c4c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c72:	3301      	adds	r3, #1
 8006c74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c7c:	2218      	movs	r2, #24
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 f92f 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c86:	233f      	movs	r3, #63	@ 0x3f
 8006c88:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006c8c:	230f      	movs	r3, #15
 8006c8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c92:	f107 0310 	add.w	r3, r7, #16
 8006c96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006ca2:	f107 030f 	add.w	r3, r7, #15
 8006ca6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fb9e 	bl	80073f8 <hci_send_req>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da01      	bge.n	8006cc6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006cc2:	23ff      	movs	r3, #255	@ 0xff
 8006cc4:	e004      	b.n	8006cd0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006cca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006cce:	781b      	ldrb	r3, [r3, #0]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b0cc      	sub	sp, #304	@ 0x130
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ce6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006cea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006cf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006cf8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006d12:	8812      	ldrh	r2, [r2, #0]
 8006d14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d24:	2218      	movs	r2, #24
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f8db 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d2e:	233f      	movs	r3, #63	@ 0x3f
 8006d30:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006d34:	2318      	movs	r3, #24
 8006d36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006d3a:	f107 0310 	add.w	r3, r7, #16
 8006d3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006d42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006d4a:	f107 030f 	add.w	r3, r7, #15
 8006d4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fb4a 	bl	80073f8 <hci_send_req>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da01      	bge.n	8006d6e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006d6a:	23ff      	movs	r3, #255	@ 0xff
 8006d6c:	e004      	b.n	8006d78 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006d6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006d76:	781b      	ldrb	r3, [r3, #0]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b088      	sub	sp, #32
 8006d86:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d8c:	f107 0308 	add.w	r3, r7, #8
 8006d90:	2218      	movs	r2, #24
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f8a5 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x03;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006da2:	1dfb      	adds	r3, r7, #7
 8006da4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006da6:	2301      	movs	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fb21 	bl	80073f8 <hci_send_req>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da01      	bge.n	8006dc0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006dbc:	23ff      	movs	r3, #255	@ 0xff
 8006dbe:	e000      	b.n	8006dc2 <hci_reset+0x40>
  return status;
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006dca:	b590      	push	{r4, r7, lr}
 8006dcc:	b0cd      	sub	sp, #308	@ 0x134
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dda:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006dde:	4622      	mov	r2, r4
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006de6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006dea:	4602      	mov	r2, r0
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006df2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006df6:	460a      	mov	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006dfa:	f107 0310 	add.w	r3, r7, #16
 8006dfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e1c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e36:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e42:	3301      	adds	r3, #1
 8006e44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e50:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e66:	2218      	movs	r2, #24
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f83a 	bl	8006ee4 <Osal_MemSet>
  rq.ogf = 0x08;
 8006e70:	2308      	movs	r3, #8
 8006e72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006e76:	2331      	movs	r3, #49	@ 0x31
 8006e78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006e8c:	f107 030f 	add.w	r3, r7, #15
 8006e90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 faa9 	bl	80073f8 <hci_send_req>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da01      	bge.n	8006eb0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006eac:	23ff      	movs	r3, #255	@ 0xff
 8006eae:	e004      	b.n	8006eba <hci_le_set_default_phy+0xf0>
  return status;
 8006eb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006eb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006eb8:	781b      	ldrb	r3, [r3, #0]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd90      	pop	{r4, r7, pc}

08006ec4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f002 fa6f 	bl	80093b8 <memcpy>
 8006eda:	4603      	mov	r3, r0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f002 fa33 	bl	8009360 <memset>
 8006efa:	4603      	mov	r3, r0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  return;
 8006f08:	bf00      	nop
}
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006f12:	b480      	push	{r7}
 8006f14:	af00      	add	r7, sp, #0
  return;
 8006f16:	bf00      	nop
}
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return;
 8006f24:	bf00      	nop
}
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006f2e:	b480      	push	{r7}
 8006f30:	af00      	add	r7, sp, #0
  return;
 8006f32:	bf00      	nop
}
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return;
 8006f40:	bf00      	nop
}
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	af00      	add	r7, sp, #0
  return;
 8006f4e:	bf00      	nop
}
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return;
 8006f5c:	bf00      	nop
}
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006f66:	b480      	push	{r7}
 8006f68:	af00      	add	r7, sp, #0
  return;
 8006f6a:	bf00      	nop
}
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  return;
 8006f78:	bf00      	nop
}
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  return;
 8006f86:	bf00      	nop
}
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  return;
 8006f94:	bf00      	nop
}
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	af00      	add	r7, sp, #0
  return;
 8006fa2:	bf00      	nop
}
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return;
 8006fb0:	bf00      	nop
}
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	af00      	add	r7, sp, #0
  return;
 8006fbe:	bf00      	nop
}
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return;
 8006fcc:	bf00      	nop
}
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	af00      	add	r7, sp, #0
  return;
 8006fda:	bf00      	nop
}
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return;
 8006fe8:	bf00      	nop
}
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006ff8:	4b04      	ldr	r3, [pc, #16]	@ (800700c <SVCCTL_Init+0x18>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006ffe:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <SVCCTL_Init+0x1c>)
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007004:	f000 f806 	bl	8007014 <SVCCTL_SvcInit>

  return;
 8007008:	bf00      	nop
}
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000030 	.word	0x20000030
 8007010:	20000050 	.word	0x20000050

08007014 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  BAS_Init();
 8007018:	f7ff ff74 	bl	8006f04 <BAS_Init>

  BLS_Init();
 800701c:	f7ff ff79 	bl	8006f12 <BLS_Init>

  CRS_STM_Init();
 8007020:	f7ff ff7e 	bl	8006f20 <CRS_STM_Init>

  DIS_Init();
 8007024:	f7ff ff83 	bl	8006f2e <DIS_Init>

  EDS_STM_Init();
 8007028:	f7ff ff88 	bl	8006f3c <EDS_STM_Init>

  HIDS_Init();
 800702c:	f7ff ff8d 	bl	8006f4a <HIDS_Init>

  HRS_Init();
 8007030:	f7ff ff92 	bl	8006f58 <HRS_Init>

  HTS_Init();
 8007034:	f7ff ff97 	bl	8006f66 <HTS_Init>

  IAS_Init();
 8007038:	f7ff ff9c 	bl	8006f74 <IAS_Init>

  LLS_Init();
 800703c:	f7ff ffa1 	bl	8006f82 <LLS_Init>

  TPS_Init();
 8007040:	f7ff ffa6 	bl	8006f90 <TPS_Init>

  MOTENV_STM_Init();
 8007044:	f7ff ffab 	bl	8006f9e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007048:	f7ff ffb0 	bl	8006fac <P2PS_STM_Init>

  ZDD_STM_Init();
 800704c:	f7ff ffb5 	bl	8006fba <ZDD_STM_Init>

  OTAS_STM_Init();
 8007050:	f7ff ffba 	bl	8006fc8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007054:	f7ff ffc6 	bl	8006fe4 <BVOPUS_STM_Init>

  MESH_Init();
 8007058:	f7ff ffbd 	bl	8006fd6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800705c:	f001 fba4 	bl	80087a8 <SVCCTL_InitCustomSvc>
  
  return;
 8007060:	bf00      	nop
}
 8007062:	bd80      	pop	{r7, pc}

08007064 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800706c:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <SVCCTL_RegisterSvcHandler+0x30>)
 800706e:	7f1b      	ldrb	r3, [r3, #28]
 8007070:	4619      	mov	r1, r3
 8007072:	4a08      	ldr	r2, [pc, #32]	@ (8007094 <SVCCTL_RegisterSvcHandler+0x30>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800707a:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <SVCCTL_RegisterSvcHandler+0x30>)
 800707c:	7f1b      	ldrb	r3, [r3, #28]
 800707e:	3301      	adds	r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <SVCCTL_RegisterSvcHandler+0x30>)
 8007084:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007086:	bf00      	nop
}
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000030 	.word	0x20000030

08007098 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3301      	adds	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2bff      	cmp	r3, #255	@ 0xff
 80070b0:	d125      	bne.n	80070fe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3302      	adds	r3, #2
 80070b6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80070c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070c6:	d118      	bne.n	80070fa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	757b      	strb	r3, [r7, #21]
 80070cc:	e00d      	b.n	80070ea <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80070ce:	7d7b      	ldrb	r3, [r7, #21]
 80070d0:	4a1a      	ldr	r2, [pc, #104]	@ (800713c <SVCCTL_UserEvtRx+0xa4>)
 80070d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80070e4:	7d7b      	ldrb	r3, [r7, #21]
 80070e6:	3301      	adds	r3, #1
 80070e8:	757b      	strb	r3, [r7, #21]
 80070ea:	4b14      	ldr	r3, [pc, #80]	@ (800713c <SVCCTL_UserEvtRx+0xa4>)
 80070ec:	7f1b      	ldrb	r3, [r3, #28]
 80070ee:	7d7a      	ldrb	r2, [r7, #21]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d3ec      	bcc.n	80070ce <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80070f4:	e002      	b.n	80070fc <SVCCTL_UserEvtRx+0x64>
              break;
 80070f6:	bf00      	nop
          break;
 80070f8:	e000      	b.n	80070fc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80070fa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80070fc:	e000      	b.n	8007100 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80070fe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d00f      	beq.n	8007126 <SVCCTL_UserEvtRx+0x8e>
 8007106:	2b02      	cmp	r3, #2
 8007108:	dc10      	bgt.n	800712c <SVCCTL_UserEvtRx+0x94>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <SVCCTL_UserEvtRx+0x7c>
 800710e:	2b01      	cmp	r3, #1
 8007110:	d006      	beq.n	8007120 <SVCCTL_UserEvtRx+0x88>
 8007112:	e00b      	b.n	800712c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 ff85 	bl	8008024 <SVCCTL_App_Notification>
 800711a:	4603      	mov	r3, r0
 800711c:	75bb      	strb	r3, [r7, #22]
      break;
 800711e:	e008      	b.n	8007132 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007120:	2301      	movs	r3, #1
 8007122:	75bb      	strb	r3, [r7, #22]
      break;
 8007124:	e005      	b.n	8007132 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007126:	2300      	movs	r3, #0
 8007128:	75bb      	strb	r3, [r7, #22]
      break;
 800712a:	e002      	b.n	8007132 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800712c:	2301      	movs	r3, #1
 800712e:	75bb      	strb	r3, [r7, #22]
      break;
 8007130:	bf00      	nop
  }

  return (return_status);
 8007132:	7dbb      	ldrb	r3, [r7, #22]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000030 	.word	0x20000030

08007140 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007148:	f107 030c 	add.w	r3, r7, #12
 800714c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	212e      	movs	r1, #46	@ 0x2e
 8007158:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800715c:	f000 fae8 	bl	8007730 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	330b      	adds	r3, #11
 8007164:	78db      	ldrb	r3, [r3, #3]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b088      	sub	sp, #32
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	210f      	movs	r1, #15
 8007186:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800718a:	f000 fad1 	bl	8007730 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	330b      	adds	r3, #11
 8007192:	78db      	ldrb	r3, [r3, #3]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	2110      	movs	r1, #16
 80071b0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80071b4:	f000 fabc 	bl	8007730 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	330b      	adds	r3, #11
 80071bc:	78db      	ldrb	r3, [r3, #3]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b08b      	sub	sp, #44	@ 0x2c
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80071f0:	4b4a      	ldr	r3, [pc, #296]	@ (800731c <SHCI_GetWirelessFwInfo+0x154>)
 80071f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071f8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007202:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a44      	ldr	r2, [pc, #272]	@ (8007320 <SHCI_GetWirelessFwInfo+0x158>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d10f      	bne.n	8007234 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e01a      	b.n	800726a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800723c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007240:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	b2da      	uxtb	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	b2da      	uxtb	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	b2da      	uxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	0a1b      	lsrs	r3, r3, #8
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	0e1b      	lsrs	r3, r3, #24
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	0e1b      	lsrs	r3, r3, #24
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	372c      	adds	r7, #44	@ 0x2c
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	58004000 	.word	0x58004000
 8007320:	a94656b9 	.word	0xa94656b9

08007324 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	4a08      	ldr	r2, [pc, #32]	@ (8007354 <hci_init+0x30>)
 8007334:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007336:	4a08      	ldr	r2, [pc, #32]	@ (8007358 <hci_init+0x34>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800733c:	4806      	ldr	r0, [pc, #24]	@ (8007358 <hci_init+0x34>)
 800733e:	f000 f979 	bl	8007634 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8da 	bl	8007500 <TlInit>

  return;
 800734c:	bf00      	nop
}
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000378 	.word	0x20000378
 8007358:	20000350 	.word	0x20000350

0800735c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007362:	4822      	ldr	r0, [pc, #136]	@ (80073ec <hci_user_evt_proc+0x90>)
 8007364:	f000 fd32 	bl	8007dcc <LST_is_empty>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d12b      	bne.n	80073c6 <hci_user_evt_proc+0x6a>
 800736e:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <hci_user_evt_proc+0x94>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d027      	beq.n	80073c6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4619      	mov	r1, r3
 800737c:	481b      	ldr	r0, [pc, #108]	@ (80073ec <hci_user_evt_proc+0x90>)
 800737e:	f000 fdb4 	bl	8007eea <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007382:	4b1c      	ldr	r3, [pc, #112]	@ (80073f4 <hci_user_evt_proc+0x98>)
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800738e:	2301      	movs	r3, #1
 8007390:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007392:	4b18      	ldr	r3, [pc, #96]	@ (80073f4 <hci_user_evt_proc+0x98>)
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	1d3a      	adds	r2, r7, #4
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800739c:	793a      	ldrb	r2, [r7, #4]
 800739e:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <hci_user_evt_proc+0x94>)
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e002      	b.n	80073aa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80073a4:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <hci_user_evt_proc+0x94>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80073aa:	4b11      	ldr	r3, [pc, #68]	@ (80073f0 <hci_user_evt_proc+0x94>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fc0d 	bl	8007bd4 <TL_MM_EvtDone>
 80073ba:	e004      	b.n	80073c6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	480a      	ldr	r0, [pc, #40]	@ (80073ec <hci_user_evt_proc+0x90>)
 80073c2:	f000 fd25 	bl	8007e10 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80073c6:	4809      	ldr	r0, [pc, #36]	@ (80073ec <hci_user_evt_proc+0x90>)
 80073c8:	f000 fd00 	bl	8007dcc <LST_is_empty>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <hci_user_evt_proc+0x86>
 80073d2:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <hci_user_evt_proc+0x94>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80073da:	4804      	ldr	r0, [pc, #16]	@ (80073ec <hci_user_evt_proc+0x90>)
 80073dc:	f001 f848 	bl	8008470 <hci_notify_asynch_evt>
  }


  return;
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
}
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000058 	.word	0x20000058
 80073f0:	20000064 	.word	0x20000064
 80073f4:	20000350 	.word	0x20000350

080073f8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007404:	2000      	movs	r0, #0
 8007406:	f000 f8d1 	bl	80075ac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800740a:	2300      	movs	r3, #0
 800740c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	885b      	ldrh	r3, [r3, #2]
 8007412:	b21b      	sxth	r3, r3
 8007414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007418:	b21a      	sxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	029b      	lsls	r3, r3, #10
 8007420:	b21b      	sxth	r3, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	b21b      	sxth	r3, r3
 8007426:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007428:	4b33      	ldr	r3, [pc, #204]	@ (80074f8 <hci_send_req+0x100>)
 800742a:	2201      	movs	r2, #1
 800742c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	b2d9      	uxtb	r1, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	8bbb      	ldrh	r3, [r7, #28]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f890 	bl	8007560 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007440:	e04e      	b.n	80074e0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007442:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007446:	f001 f82a 	bl	800849e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800744a:	e043      	b.n	80074d4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800744c:	f107 030c 	add.w	r3, r7, #12
 8007450:	4619      	mov	r1, r3
 8007452:	482a      	ldr	r0, [pc, #168]	@ (80074fc <hci_send_req+0x104>)
 8007454:	f000 fd49 	bl	8007eea <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	7a5b      	ldrb	r3, [r3, #9]
 800745c:	2b0f      	cmp	r3, #15
 800745e:	d114      	bne.n	800748a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	330b      	adds	r3, #11
 8007464:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	b29b      	uxth	r3, r3
 800746c:	8bba      	ldrh	r2, [r7, #28]
 800746e:	429a      	cmp	r2, r3
 8007470:	d104      	bne.n	800747c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d027      	beq.n	80074d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007484:	2301      	movs	r3, #1
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e024      	b.n	80074d4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	330b      	adds	r3, #11
 800748e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007496:	b29b      	uxth	r3, r3
 8007498:	8bba      	ldrh	r2, [r7, #28]
 800749a:	429a      	cmp	r2, r3
 800749c:	d114      	bne.n	80074c8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	7a9b      	ldrb	r3, [r3, #10]
 80074a2:	3b03      	subs	r3, #3
 80074a4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	bfa8      	it	ge
 80074b0:	461a      	movge	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6918      	ldr	r0, [r3, #16]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	1cd9      	adds	r1, r3, #3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f001 ff78 	bl	80093b8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80074d4:	4809      	ldr	r0, [pc, #36]	@ (80074fc <hci_send_req+0x104>)
 80074d6:	f000 fc79 	bl	8007dcc <LST_is_empty>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0b5      	beq.n	800744c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80074e0:	7ffb      	ldrb	r3, [r7, #31]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0ad      	beq.n	8007442 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80074e6:	2001      	movs	r0, #1
 80074e8:	f000 f860 	bl	80075ac <NotifyCmdStatus>

  return 0;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000037c 	.word	0x2000037c
 80074fc:	20000370 	.word	0x20000370

08007500 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007508:	480f      	ldr	r0, [pc, #60]	@ (8007548 <TlInit+0x48>)
 800750a:	f000 fc4f 	bl	8007dac <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800750e:	4a0f      	ldr	r2, [pc, #60]	@ (800754c <TlInit+0x4c>)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007514:	480e      	ldr	r0, [pc, #56]	@ (8007550 <TlInit+0x50>)
 8007516:	f000 fc49 	bl	8007dac <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800751a:	4b0e      	ldr	r3, [pc, #56]	@ (8007554 <TlInit+0x54>)
 800751c:	2201      	movs	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007520:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <TlInit+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800752c:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <TlInit+0x5c>)
 800752e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007530:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <TlInit+0x58>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f107 0208 	add.w	r2, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
  }

  return;
 800753c:	bf00      	nop
 800753e:	bf00      	nop
}
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000370 	.word	0x20000370
 800754c:	20000060 	.word	0x20000060
 8007550:	20000058 	.word	0x20000058
 8007554:	20000064 	.word	0x20000064
 8007558:	20000350 	.word	0x20000350
 800755c:	080075ed 	.word	0x080075ed

08007560 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	603a      	str	r2, [r7, #0]
 800756a:	80fb      	strh	r3, [r7, #6]
 800756c:	460b      	mov	r3, r1
 800756e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <SendCmd+0x44>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800757a:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <SendCmd+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	797a      	ldrb	r2, [r7, #5]
 8007580:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007582:	4b08      	ldr	r3, [pc, #32]	@ (80075a4 <SendCmd+0x44>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	797a      	ldrb	r2, [r7, #5]
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f001 ff13 	bl	80093b8 <memcpy>

  hciContext.io.Send(0,0);
 8007592:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <SendCmd+0x48>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2100      	movs	r1, #0
 8007598:	2000      	movs	r0, #0
 800759a:	4798      	blx	r3

  return;
 800759c:	bf00      	nop
}
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000060 	.word	0x20000060
 80075a8:	20000350 	.word	0x20000350

080075ac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80075bc:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <NotifyCmdStatus+0x3c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80075c4:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <NotifyCmdStatus+0x3c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80075cc:	e008      	b.n	80075e0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80075ce:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <NotifyCmdStatus+0x3c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80075d6:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <NotifyCmdStatus+0x3c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2001      	movs	r0, #1
 80075dc:	4798      	blx	r3
  return;
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
}
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000378 	.word	0x20000378

080075ec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7a5b      	ldrb	r3, [r3, #9]
 80075f8:	2b0f      	cmp	r3, #15
 80075fa:	d003      	beq.n	8007604 <TlEvtReceived+0x18>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7a5b      	ldrb	r3, [r3, #9]
 8007600:	2b0e      	cmp	r3, #14
 8007602:	d107      	bne.n	8007614 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4809      	ldr	r0, [pc, #36]	@ (800762c <TlEvtReceived+0x40>)
 8007608:	f000 fc28 	bl	8007e5c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800760c:	2000      	movs	r0, #0
 800760e:	f000 ff3b 	bl	8008488 <hci_cmd_resp_release>
 8007612:	e006      	b.n	8007622 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4806      	ldr	r0, [pc, #24]	@ (8007630 <TlEvtReceived+0x44>)
 8007618:	f000 fc20 	bl	8007e5c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800761c:	4804      	ldr	r0, [pc, #16]	@ (8007630 <TlEvtReceived+0x44>)
 800761e:	f000 ff27 	bl	8008470 <hci_notify_asynch_evt>
  }

  return;
 8007622:	bf00      	nop
}
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000370 	.word	0x20000370
 8007630:	20000058 	.word	0x20000058

08007634 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a05      	ldr	r2, [pc, #20]	@ (8007654 <hci_register_io_bus+0x20>)
 8007640:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <hci_register_io_bus+0x24>)
 8007646:	611a      	str	r2, [r3, #16]

  return;
 8007648:	bf00      	nop
}
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	0800794d 	.word	0x0800794d
 8007658:	080079b5 	.word	0x080079b5

0800765c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4a08      	ldr	r2, [pc, #32]	@ (800768c <shci_init+0x30>)
 800766c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800766e:	4a08      	ldr	r2, [pc, #32]	@ (8007690 <shci_init+0x34>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007674:	4806      	ldr	r0, [pc, #24]	@ (8007690 <shci_init+0x34>)
 8007676:	f000 f915 	bl	80078a4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f898 	bl	80077b4 <TlInit>

  return;
 8007684:	bf00      	nop
}
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200003a0 	.word	0x200003a0
 8007690:	20000380 	.word	0x20000380

08007694 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800769a:	4822      	ldr	r0, [pc, #136]	@ (8007724 <shci_user_evt_proc+0x90>)
 800769c:	f000 fb96 	bl	8007dcc <LST_is_empty>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d12b      	bne.n	80076fe <shci_user_evt_proc+0x6a>
 80076a6:	4b20      	ldr	r3, [pc, #128]	@ (8007728 <shci_user_evt_proc+0x94>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d027      	beq.n	80076fe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80076ae:	f107 030c 	add.w	r3, r7, #12
 80076b2:	4619      	mov	r1, r3
 80076b4:	481b      	ldr	r0, [pc, #108]	@ (8007724 <shci_user_evt_proc+0x90>)
 80076b6:	f000 fc18 	bl	8007eea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80076ba:	4b1c      	ldr	r3, [pc, #112]	@ (800772c <shci_user_evt_proc+0x98>)
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00c      	beq.n	80076dc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80076c6:	2301      	movs	r3, #1
 80076c8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80076ca:	4b18      	ldr	r3, [pc, #96]	@ (800772c <shci_user_evt_proc+0x98>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	1d3a      	adds	r2, r7, #4
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80076d4:	793a      	ldrb	r2, [r7, #4]
 80076d6:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <shci_user_evt_proc+0x94>)
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e002      	b.n	80076e2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80076dc:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <shci_user_evt_proc+0x94>)
 80076de:	2201      	movs	r2, #1
 80076e0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80076e2:	4b11      	ldr	r3, [pc, #68]	@ (8007728 <shci_user_evt_proc+0x94>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fa71 	bl	8007bd4 <TL_MM_EvtDone>
 80076f2:	e004      	b.n	80076fe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4619      	mov	r1, r3
 80076f8:	480a      	ldr	r0, [pc, #40]	@ (8007724 <shci_user_evt_proc+0x90>)
 80076fa:	f000 fb89 	bl	8007e10 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80076fe:	4809      	ldr	r0, [pc, #36]	@ (8007724 <shci_user_evt_proc+0x90>)
 8007700:	f000 fb64 	bl	8007dcc <LST_is_empty>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <shci_user_evt_proc+0x86>
 800770a:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <shci_user_evt_proc+0x94>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007712:	4804      	ldr	r0, [pc, #16]	@ (8007724 <shci_user_evt_proc+0x90>)
 8007714:	f7f9 f8cd 	bl	80008b2 <shci_notify_asynch_evt>
  }


  return;
 8007718:	bf00      	nop
 800771a:	bf00      	nop
}
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000068 	.word	0x20000068
 8007728:	20000078 	.word	0x20000078
 800772c:	20000380 	.word	0x20000380

08007730 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60ba      	str	r2, [r7, #8]
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	4603      	mov	r3, r0
 800773c:	81fb      	strh	r3, [r7, #14]
 800773e:	460b      	mov	r3, r1
 8007740:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007742:	2000      	movs	r0, #0
 8007744:	f000 f868 	bl	8007818 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007748:	4b17      	ldr	r3, [pc, #92]	@ (80077a8 <shci_send+0x78>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	89fa      	ldrh	r2, [r7, #14]
 800774e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007752:	4b15      	ldr	r3, [pc, #84]	@ (80077a8 <shci_send+0x78>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	7b7a      	ldrb	r2, [r7, #13]
 8007758:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800775a:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <shci_send+0x78>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	7b7a      	ldrb	r2, [r7, #13]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	4618      	mov	r0, r3
 8007766:	f001 fe27 	bl	80093b8 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800776a:	4b10      	ldr	r3, [pc, #64]	@ (80077ac <shci_send+0x7c>)
 800776c:	2201      	movs	r2, #1
 800776e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8007770:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <shci_send+0x80>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2100      	movs	r1, #0
 8007776:	2000      	movs	r0, #0
 8007778:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800777a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800777e:	f7f9 f8af 	bl	80008e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f103 0008 	add.w	r0, r3, #8
 8007788:	4b07      	ldr	r3, [pc, #28]	@ (80077a8 <shci_send+0x78>)
 800778a:	6819      	ldr	r1, [r3, #0]
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <shci_send+0x78>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	789b      	ldrb	r3, [r3, #2]
 8007792:	3303      	adds	r3, #3
 8007794:	461a      	mov	r2, r3
 8007796:	f001 fe0f 	bl	80093b8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800779a:	2001      	movs	r0, #1
 800779c:	f000 f83c 	bl	8007818 <Cmd_SetStatus>

  return;
 80077a0:	bf00      	nop
}
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000074 	.word	0x20000074
 80077ac:	200003a4 	.word	0x200003a4
 80077b0:	20000380 	.word	0x20000380

080077b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80077bc:	4a10      	ldr	r2, [pc, #64]	@ (8007800 <TlInit+0x4c>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80077c2:	4810      	ldr	r0, [pc, #64]	@ (8007804 <TlInit+0x50>)
 80077c4:	f000 faf2 	bl	8007dac <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f000 f825 	bl	8007818 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80077ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007808 <TlInit+0x54>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80077d4:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <TlInit+0x58>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00c      	beq.n	80077f6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <TlInit+0x5c>)
 80077e2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80077e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <TlInit+0x60>)
 80077e6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80077e8:	4b08      	ldr	r3, [pc, #32]	@ (800780c <TlInit+0x58>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f107 020c 	add.w	r2, r7, #12
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
  }

  return;
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
}
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000074 	.word	0x20000074
 8007804:	20000068 	.word	0x20000068
 8007808:	20000078 	.word	0x20000078
 800780c:	20000380 	.word	0x20000380
 8007810:	08007869 	.word	0x08007869
 8007814:	08007881 	.word	0x08007881

08007818 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007828:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <Cmd_SetStatus+0x48>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007830:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <Cmd_SetStatus+0x48>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2000      	movs	r0, #0
 8007836:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007838:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <Cmd_SetStatus+0x4c>)
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800783e:	e00b      	b.n	8007858 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007840:	4b08      	ldr	r3, [pc, #32]	@ (8007864 <Cmd_SetStatus+0x4c>)
 8007842:	2201      	movs	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007846:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <Cmd_SetStatus+0x48>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800784e:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <Cmd_SetStatus+0x48>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2001      	movs	r0, #1
 8007854:	4798      	blx	r3
  return;
 8007856:	bf00      	nop
 8007858:	bf00      	nop
}
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200003a0 	.word	0x200003a0
 8007864:	20000070 	.word	0x20000070

08007868 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007870:	2000      	movs	r0, #0
 8007872:	f7f9 f82a 	bl	80008ca <shci_cmd_resp_release>

  return;
 8007876:	bf00      	nop
}
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4805      	ldr	r0, [pc, #20]	@ (80078a0 <TlUserEvtReceived+0x20>)
 800788c:	f000 fae6 	bl	8007e5c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007890:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <TlUserEvtReceived+0x20>)
 8007892:	f7f9 f80e 	bl	80008b2 <shci_notify_asynch_evt>

  return;
 8007896:	bf00      	nop
}
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000068 	.word	0x20000068

080078a4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a05      	ldr	r2, [pc, #20]	@ (80078c4 <shci_register_io_bus+0x20>)
 80078b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a04      	ldr	r2, [pc, #16]	@ (80078c8 <shci_register_io_bus+0x24>)
 80078b6:	611a      	str	r2, [r3, #16]

  return;
 80078b8:	bf00      	nop
}
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	08007a61 	.word	0x08007a61
 80078c8:	08007ab5 	.word	0x08007ab5

080078cc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80078d0:	f001 f9f8 	bl	8008cc4 <HW_IPCC_Enable>

  return;
 80078d4:	bf00      	nop
}
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <TL_Init>:


void TL_Init( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80078dc:	4b10      	ldr	r3, [pc, #64]	@ (8007920 <TL_Init+0x48>)
 80078de:	4a11      	ldr	r2, [pc, #68]	@ (8007924 <TL_Init+0x4c>)
 80078e0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <TL_Init+0x48>)
 80078e4:	4a10      	ldr	r2, [pc, #64]	@ (8007928 <TL_Init+0x50>)
 80078e6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80078e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <TL_Init+0x48>)
 80078ea:	4a10      	ldr	r2, [pc, #64]	@ (800792c <TL_Init+0x54>)
 80078ec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80078ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007920 <TL_Init+0x48>)
 80078f0:	4a0f      	ldr	r2, [pc, #60]	@ (8007930 <TL_Init+0x58>)
 80078f2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <TL_Init+0x48>)
 80078f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007934 <TL_Init+0x5c>)
 80078f8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <TL_Init+0x48>)
 80078fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <TL_Init+0x60>)
 80078fe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <TL_Init+0x48>)
 8007902:	4a0e      	ldr	r2, [pc, #56]	@ (800793c <TL_Init+0x64>)
 8007904:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007906:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <TL_Init+0x48>)
 8007908:	4a0d      	ldr	r2, [pc, #52]	@ (8007940 <TL_Init+0x68>)
 800790a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800790c:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <TL_Init+0x48>)
 800790e:	4a0d      	ldr	r2, [pc, #52]	@ (8007944 <TL_Init+0x6c>)
 8007910:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007912:	4b03      	ldr	r3, [pc, #12]	@ (8007920 <TL_Init+0x48>)
 8007914:	4a0c      	ldr	r2, [pc, #48]	@ (8007948 <TL_Init+0x70>)
 8007916:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007918:	f001 f9e8 	bl	8008cec <HW_IPCC_Init>

  return;
 800791c:	bf00      	nop
}
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20030000 	.word	0x20030000
 8007924:	20030028 	.word	0x20030028
 8007928:	20030048 	.word	0x20030048
 800792c:	20030058 	.word	0x20030058
 8007930:	20030068 	.word	0x20030068
 8007934:	20030070 	.word	0x20030070
 8007938:	20030078 	.word	0x20030078
 800793c:	20030080 	.word	0x20030080
 8007940:	2003009c 	.word	0x2003009c
 8007944:	200300a0 	.word	0x200300a0
 8007948:	200300ac 	.word	0x200300ac

0800794c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007958:	4811      	ldr	r0, [pc, #68]	@ (80079a0 <TL_BLE_Init+0x54>)
 800795a:	f000 fa27 	bl	8007dac <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800795e:	4b11      	ldr	r3, [pc, #68]	@ (80079a4 <TL_BLE_Init+0x58>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4a0c      	ldr	r2, [pc, #48]	@ (80079a8 <TL_BLE_Init+0x5c>)
 8007978:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4a08      	ldr	r2, [pc, #32]	@ (80079a0 <TL_BLE_Init+0x54>)
 800797e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007980:	f001 f9ca 	bl	8008d18 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a08      	ldr	r2, [pc, #32]	@ (80079ac <TL_BLE_Init+0x60>)
 800798a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4a07      	ldr	r2, [pc, #28]	@ (80079b0 <TL_BLE_Init+0x64>)
 8007992:	6013      	str	r3, [r2, #0]

  return 0;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200300c8 	.word	0x200300c8
 80079a4:	20030000 	.word	0x20030000
 80079a8:	20030a58 	.word	0x20030a58
 80079ac:	200003b0 	.word	0x200003b0
 80079b0:	200003b4 	.word	0x200003b4

080079b4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80079c0:	4b09      	ldr	r3, [pc, #36]	@ (80079e8 <TL_BLE_SendCmd+0x34>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2201      	movs	r2, #1
 80079c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80079ca:	4b07      	ldr	r3, [pc, #28]	@ (80079e8 <TL_BLE_SendCmd+0x34>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	2001      	movs	r0, #1
 80079d4:	f000 f96c 	bl	8007cb0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80079d8:	f001 f9a8 	bl	8008d2c <HW_IPCC_BLE_SendCmd>

  return 0;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20030000 	.word	0x20030000

080079ec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80079f2:	e01c      	b.n	8007a2e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	4812      	ldr	r0, [pc, #72]	@ (8007a44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80079fa:	f000 fa76 	bl	8007eea <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7a5b      	ldrb	r3, [r3, #9]
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d003      	beq.n	8007a0e <HW_IPCC_BLE_RxEvtNot+0x22>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7a5b      	ldrb	r3, [r3, #9]
 8007a0a:	2b0e      	cmp	r3, #14
 8007a0c:	d105      	bne.n	8007a1a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4619      	mov	r1, r3
 8007a12:	2002      	movs	r0, #2
 8007a14:	f000 f94c 	bl	8007cb0 <OutputDbgTrace>
 8007a18:	e004      	b.n	8007a24 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	2003      	movs	r0, #3
 8007a20:	f000 f946 	bl	8007cb0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007a24:	4b08      	ldr	r3, [pc, #32]	@ (8007a48 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007a2e:	4805      	ldr	r0, [pc, #20]	@ (8007a44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007a30:	f000 f9cc 	bl	8007dcc <LST_is_empty>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0dc      	beq.n	80079f4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007a3a:	bf00      	nop
}
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200300c8 	.word	0x200300c8
 8007a48:	200003b0 	.word	0x200003b0

08007a4c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007a50:	4b02      	ldr	r3, [pc, #8]	@ (8007a5c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4798      	blx	r3

  return;
 8007a56:	bf00      	nop
}
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200003b4 	.word	0x200003b4

08007a60 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007a6c:	480d      	ldr	r0, [pc, #52]	@ (8007aa4 <TL_SYS_Init+0x44>)
 8007a6e:	f000 f99d 	bl	8007dac <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <TL_SYS_Init+0x48>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4a08      	ldr	r2, [pc, #32]	@ (8007aa4 <TL_SYS_Init+0x44>)
 8007a84:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007a86:	f001 f973 	bl	8008d70 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a07      	ldr	r2, [pc, #28]	@ (8007aac <TL_SYS_Init+0x4c>)
 8007a90:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4a06      	ldr	r2, [pc, #24]	@ (8007ab0 <TL_SYS_Init+0x50>)
 8007a98:	6013      	str	r3, [r2, #0]

  return 0;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200300d0 	.word	0x200300d0
 8007aa8:	20030000 	.word	0x20030000
 8007aac:	200003b8 	.word	0x200003b8
 8007ab0:	200003bc 	.word	0x200003bc

08007ab4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007ac0:	4b09      	ldr	r3, [pc, #36]	@ (8007ae8 <TL_SYS_SendCmd+0x34>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <TL_SYS_SendCmd+0x34>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2004      	movs	r0, #4
 8007ad4:	f000 f8ec 	bl	8007cb0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007ad8:	f001 f954 	bl	8008d84 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20030000 	.word	0x20030000

08007aec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	2005      	movs	r0, #5
 8007afa:	f000 f8d9 	bl	8007cb0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007afe:	4b05      	ldr	r3, [pc, #20]	@ (8007b14 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a03      	ldr	r2, [pc, #12]	@ (8007b10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007b04:	68d2      	ldr	r2, [r2, #12]
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3

  return;
 8007b0c:	bf00      	nop
}
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20030000 	.word	0x20030000
 8007b14:	200003b8 	.word	0x200003b8

08007b18 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007b1e:	e00e      	b.n	8007b3e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007b20:	1d3b      	adds	r3, r7, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	480b      	ldr	r0, [pc, #44]	@ (8007b54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007b26:	f000 f9e0 	bl	8007eea <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	2006      	movs	r0, #6
 8007b30:	f000 f8be 	bl	8007cb0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007b34:	4b08      	ldr	r3, [pc, #32]	@ (8007b58 <HW_IPCC_SYS_EvtNot+0x40>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007b3e:	4805      	ldr	r0, [pc, #20]	@ (8007b54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007b40:	f000 f944 	bl	8007dcc <LST_is_empty>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0ea      	beq.n	8007b20 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007b4a:	bf00      	nop
}
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200300d0 	.word	0x200300d0
 8007b58:	200003bc 	.word	0x200003bc

08007b5c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007b64:	4817      	ldr	r0, [pc, #92]	@ (8007bc4 <TL_MM_Init+0x68>)
 8007b66:	f000 f921 	bl	8007dac <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007b6a:	4817      	ldr	r0, [pc, #92]	@ (8007bc8 <TL_MM_Init+0x6c>)
 8007b6c:	f000 f91e 	bl	8007dac <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007b70:	4b16      	ldr	r3, [pc, #88]	@ (8007bcc <TL_MM_Init+0x70>)
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	4a16      	ldr	r2, [pc, #88]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007b76:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007b78:	4b15      	ldr	r3, [pc, #84]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6892      	ldr	r2, [r2, #8]
 8007b80:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007b82:	4b13      	ldr	r3, [pc, #76]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68d2      	ldr	r2, [r2, #12]
 8007b8a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007b8c:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0c      	ldr	r2, [pc, #48]	@ (8007bc4 <TL_MM_Init+0x68>)
 8007b92:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007b94:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007ba8:	4b09      	ldr	r3, [pc, #36]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6912      	ldr	r2, [r2, #16]
 8007bb0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007bb2:	4b07      	ldr	r3, [pc, #28]	@ (8007bd0 <TL_MM_Init+0x74>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6952      	ldr	r2, [r2, #20]
 8007bba:	619a      	str	r2, [r3, #24]

  return;
 8007bbc:	bf00      	nop
}
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	200300b8 	.word	0x200300b8
 8007bc8:	200003a8 	.word	0x200003a8
 8007bcc:	20030000 	.word	0x20030000
 8007bd0:	200003c0 	.word	0x200003c0

08007bd4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4807      	ldr	r0, [pc, #28]	@ (8007bfc <TL_MM_EvtDone+0x28>)
 8007be0:	f000 f93c 	bl	8007e5c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	2000      	movs	r0, #0
 8007be8:	f000 f862 	bl	8007cb0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007bec:	4804      	ldr	r0, [pc, #16]	@ (8007c00 <TL_MM_EvtDone+0x2c>)
 8007bee:	f001 f8ef 	bl	8008dd0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007bf2:	bf00      	nop
}
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200003a8 	.word	0x200003a8
 8007c00:	08007c05 	.word	0x08007c05

08007c04 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007c0a:	e00c      	b.n	8007c26 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007c0c:	1d3b      	adds	r3, r7, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	480a      	ldr	r0, [pc, #40]	@ (8007c3c <SendFreeBuf+0x38>)
 8007c12:	f000 f96a 	bl	8007eea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007c16:	4b0a      	ldr	r3, [pc, #40]	@ (8007c40 <SendFreeBuf+0x3c>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f91b 	bl	8007e5c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007c26:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <SendFreeBuf+0x38>)
 8007c28:	f000 f8d0 	bl	8007dcc <LST_is_empty>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ec      	beq.n	8007c0c <SendFreeBuf+0x8>
  }

  return;
 8007c32:	bf00      	nop
}
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200003a8 	.word	0x200003a8
 8007c40:	20030000 	.word	0x20030000

08007c44 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007c48:	4805      	ldr	r0, [pc, #20]	@ (8007c60 <TL_TRACES_Init+0x1c>)
 8007c4a:	f000 f8af 	bl	8007dac <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007c4e:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <TL_TRACES_Init+0x20>)
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	4a03      	ldr	r2, [pc, #12]	@ (8007c60 <TL_TRACES_Init+0x1c>)
 8007c54:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007c56:	f001 f8f1 	bl	8008e3c <HW_IPCC_TRACES_Init>

  return;
 8007c5a:	bf00      	nop
}
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200300c0 	.word	0x200300c0
 8007c64:	20030000 	.word	0x20030000

08007c68 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007c6e:	e008      	b.n	8007c82 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007c70:	1d3b      	adds	r3, r7, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4808      	ldr	r0, [pc, #32]	@ (8007c98 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007c76:	f000 f938 	bl	8007eea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f80d 	bl	8007c9c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007c82:	4805      	ldr	r0, [pc, #20]	@ (8007c98 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007c84:	f000 f8a2 	bl	8007dcc <LST_is_empty>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007c8e:	bf00      	nop
}
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200300c0 	.word	0x200300c0

08007c9c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b06      	cmp	r3, #6
 8007cc0:	d845      	bhi.n	8007d4e <OutputDbgTrace+0x9e>
 8007cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <OutputDbgTrace+0x18>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007d23 	.word	0x08007d23
 8007cd8:	08007d2f 	.word	0x08007d2f
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d43 	.word	0x08007d43
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	7a5b      	ldrb	r3, [r3, #9]
 8007cec:	2bff      	cmp	r3, #255	@ 0xff
 8007cee:	d005      	beq.n	8007cfc <OutputDbgTrace+0x4c>
 8007cf0:	2bff      	cmp	r3, #255	@ 0xff
 8007cf2:	dc05      	bgt.n	8007d00 <OutputDbgTrace+0x50>
 8007cf4:	2b0e      	cmp	r3, #14
 8007cf6:	d005      	beq.n	8007d04 <OutputDbgTrace+0x54>
 8007cf8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007cfa:	e001      	b.n	8007d00 <OutputDbgTrace+0x50>
          break;
 8007cfc:	bf00      	nop
 8007cfe:	e027      	b.n	8007d50 <OutputDbgTrace+0xa0>
          break;
 8007d00:	bf00      	nop
 8007d02:	e025      	b.n	8007d50 <OutputDbgTrace+0xa0>
          break;
 8007d04:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007d06:	e023      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007d0c:	e020      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	7a5b      	ldrb	r3, [r3, #9]
 8007d16:	2b0e      	cmp	r3, #14
 8007d18:	d001      	beq.n	8007d1e <OutputDbgTrace+0x6e>
 8007d1a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007d1c:	e000      	b.n	8007d20 <OutputDbgTrace+0x70>
          break;
 8007d1e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007d20:	e016      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	7a5b      	ldrb	r3, [r3, #9]
 8007d2a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007d2c:	e010      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007d32:	e00d      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	7a5b      	ldrb	r3, [r3, #9]
 8007d3c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007d3e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007d40:	e006      	b.n	8007d50 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7a5b      	ldrb	r3, [r3, #9]
 8007d4a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007d4c:	e000      	b.n	8007d50 <OutputDbgTrace+0xa0>

    default:
      break;
 8007d4e:	bf00      	nop
  }

  return;
 8007d50:	bf00      	nop
}
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007d66:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <OTP_Read+0x48>)
 8007d68:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007d6a:	e002      	b.n	8007d72 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b08      	subs	r3, #8
 8007d70:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3307      	adds	r3, #7
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	79fa      	ldrb	r2, [r7, #7]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d003      	beq.n	8007d86 <OTP_Read+0x2a>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a09      	ldr	r2, [pc, #36]	@ (8007da8 <OTP_Read+0x4c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d1f2      	bne.n	8007d6c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3307      	adds	r3, #7
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	79fa      	ldrb	r2, [r7, #7]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d001      	beq.n	8007d96 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	1fff73f8 	.word	0x1fff73f8
 8007da8:	1fff7000 	.word	0x1fff7000

08007dac <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	605a      	str	r2, [r3, #4]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dda:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dde:	b672      	cpsid	i
}
 8007de0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d102      	bne.n	8007df2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
 8007df0:	e001      	b.n	8007df6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f383 8810 	msr	PRIMASK, r3
}
 8007e00:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e24:	b672      	cpsid	i
}
 8007e26:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e66:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e70:	b672      	cpsid	i
}
 8007e72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eba:	b672      	cpsid	i
}
 8007ebc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6852      	ldr	r2, [r2, #4]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007efa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007efe:	b672      	cpsid	i
}
 8007f00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff ffca 	bl	8007ea8 <LST_remove_node>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f383 8810 	msr	PRIMASK, r3
}
 8007f1e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007f2c:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <LL_FLASH_GetUDN+0x14>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	1fff7580 	.word	0x1fff7580

08007f40 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007f44:	4b03      	ldr	r3, [pc, #12]	@ (8007f54 <LL_FLASH_GetDeviceID+0x14>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	b2db      	uxtb	r3, r3
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	1fff7584 	.word	0x1fff7584

08007f58 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007f5c:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <LL_FLASH_GetSTCompanyID+0x14>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	0a1b      	lsrs	r3, r3, #8
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	1fff7584 	.word	0x1fff7584

08007f70 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007f70:	b5b0      	push	{r4, r5, r7, lr}
 8007f72:	b090      	sub	sp, #64	@ 0x40
 8007f74:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f76:	2392      	movs	r3, #146	@ 0x92
 8007f78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007f7c:	4b25      	ldr	r3, [pc, #148]	@ (8008014 <APP_BLE_Init+0xa4>)
 8007f7e:	1d3c      	adds	r4, r7, #4
 8007f80:	461d      	mov	r5, r3
 8007f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f92:	c403      	stmia	r4!, {r0, r1}
 8007f94:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007f96:	f000 f913 	bl	80081c0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	2002      	movs	r0, #2
 8007f9e:	f000 ff75 	bl	8008e8c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8008018 <APP_BLE_Init+0xa8>)
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	2002      	movs	r0, #2
 8007fa8:	f001 f89c 	bl	80090e4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff f8c6 	bl	8007140 <SHCI_C2_BLE_Init>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007fba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007fc2:	f7f9 fcc9 	bl	8001958 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007fc6:	f000 f911 	bl	80081ec <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007fca:	f7ff f813 	bl	8006ff4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007fce:	4b13      	ldr	r3, [pc, #76]	@ (800801c <APP_BLE_Init+0xac>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007fd6:	4b11      	ldr	r3, [pc, #68]	@ (800801c <APP_BLE_Init+0xac>)
 8007fd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fdc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007fde:	4a10      	ldr	r2, [pc, #64]	@ (8008020 <APP_BLE_Init+0xb0>)
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	f001 f87e 	bl	80090e4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007fe8:	2006      	movs	r0, #6
 8007fea:	f7fe fe76 	bl	8006cda <aci_hal_set_radio_activity_mask>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007ff4:	f000 facc 	bl	8008590 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007ff8:	4b08      	ldr	r3, [pc, #32]	@ (800801c <APP_BLE_Init+0xac>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007ffe:	4b07      	ldr	r3, [pc, #28]	@ (800801c <APP_BLE_Init+0xac>)
 8008000:	2200      	movs	r2, #0
 8008002:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008004:	2001      	movs	r0, #1
 8008006:	f000 f9a5 	bl	8008354 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800800a:	bf00      	nop
}
 800800c:	3740      	adds	r7, #64	@ 0x40
 800800e:	46bd      	mov	sp, r7
 8008010:	bdb0      	pop	{r4, r5, r7, pc}
 8008012:	bf00      	nop
 8008014:	08009434 	.word	0x08009434
 8008018:	0800735d 	.word	0x0800735d
 800801c:	200003cc 	.word	0x200003cc
 8008020:	0800843d 	.word	0x0800843d

08008024 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	@ 0x28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800802c:	2392      	movs	r3, #146	@ 0x92
 800802e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3301      	adds	r3, #1
 8008036:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2bff      	cmp	r3, #255	@ 0xff
 800803e:	d053      	beq.n	80080e8 <SVCCTL_App_Notification+0xc4>
 8008040:	2bff      	cmp	r3, #255	@ 0xff
 8008042:	f300 80af 	bgt.w	80081a4 <SVCCTL_App_Notification+0x180>
 8008046:	2b05      	cmp	r3, #5
 8008048:	d002      	beq.n	8008050 <SVCCTL_App_Notification+0x2c>
 800804a:	2b3e      	cmp	r3, #62	@ 0x3e
 800804c:	d020      	beq.n	8008090 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800804e:	e0a9      	b.n	80081a4 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	3302      	adds	r3, #2
 8008054:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800805c:	b29a      	uxth	r2, r3
 800805e:	4b55      	ldr	r3, [pc, #340]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 8008060:	8adb      	ldrh	r3, [r3, #22]
 8008062:	429a      	cmp	r2, r3
 8008064:	d106      	bne.n	8008074 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008066:	4b53      	ldr	r3, [pc, #332]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 8008068:	2200      	movs	r2, #0
 800806a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800806c:	4b51      	ldr	r3, [pc, #324]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008074:	2001      	movs	r0, #1
 8008076:	f000 f96d 	bl	8008354 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800807a:	4b4f      	ldr	r3, [pc, #316]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 800807c:	2201      	movs	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008080:	4b4c      	ldr	r3, [pc, #304]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 8008082:	8ada      	ldrh	r2, [r3, #22]
 8008084:	4b4c      	ldr	r3, [pc, #304]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 8008086:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008088:	484b      	ldr	r0, [pc, #300]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 800808a:	f000 fa6d 	bl	8008568 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800808e:	e08c      	b.n	80081aa <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	3302      	adds	r3, #2
 8008094:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d001      	beq.n	80080a2 <SVCCTL_App_Notification+0x7e>
 800809e:	2b03      	cmp	r3, #3
          break;
 80080a0:	e021      	b.n	80080e6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	3301      	adds	r3, #1
 80080a6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80080a8:	4b42      	ldr	r3, [pc, #264]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 80080aa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d104      	bne.n	80080bc <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80080b2:	4b40      	ldr	r3, [pc, #256]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 80080b4:	2206      	movs	r2, #6
 80080b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80080ba:	e003      	b.n	80080c4 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80080bc:	4b3d      	ldr	r3, [pc, #244]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 80080be:	2205      	movs	r2, #5
 80080c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	4b39      	ldr	r3, [pc, #228]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 80080ce:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80080d0:	4b39      	ldr	r3, [pc, #228]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80080d6:	4b37      	ldr	r3, [pc, #220]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 80080d8:	8ada      	ldrh	r2, [r3, #22]
 80080da:	4b37      	ldr	r3, [pc, #220]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 80080dc:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80080de:	4836      	ldr	r0, [pc, #216]	@ (80081b8 <SVCCTL_App_Notification+0x194>)
 80080e0:	f000 fa42 	bl	8008568 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80080e4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80080e6:	e060      	b.n	80081aa <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	3302      	adds	r3, #2
 80080ec:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d047      	beq.n	800818c <SVCCTL_App_Notification+0x168>
 80080fc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008100:	4293      	cmp	r3, r2
 8008102:	dc51      	bgt.n	80081a8 <SVCCTL_App_Notification+0x184>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d046      	beq.n	8008198 <SVCCTL_App_Notification+0x174>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800810e:	dc4b      	bgt.n	80081a8 <SVCCTL_App_Notification+0x184>
 8008110:	2b04      	cmp	r3, #4
 8008112:	d043      	beq.n	800819c <SVCCTL_App_Notification+0x178>
 8008114:	2b04      	cmp	r3, #4
 8008116:	db47      	blt.n	80081a8 <SVCCTL_App_Notification+0x184>
 8008118:	f240 420a 	movw	r2, #1034	@ 0x40a
 800811c:	4293      	cmp	r3, r2
 800811e:	dc43      	bgt.n	80081a8 <SVCCTL_App_Notification+0x184>
 8008120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008124:	dd40      	ble.n	80081a8 <SVCCTL_App_Notification+0x184>
 8008126:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800812a:	2b09      	cmp	r3, #9
 800812c:	d83c      	bhi.n	80081a8 <SVCCTL_App_Notification+0x184>
 800812e:	a201      	add	r2, pc, #4	@ (adr r2, 8008134 <SVCCTL_App_Notification+0x110>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008185 	.word	0x08008185
 8008138:	0800815d 	.word	0x0800815d
 800813c:	080081a9 	.word	0x080081a9
 8008140:	080081a9 	.word	0x080081a9
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081a9 	.word	0x080081a9
 800814c:	080081a1 	.word	0x080081a1
 8008150:	080081a9 	.word	0x080081a9
 8008154:	08008171 	.word	0x08008171
 8008158:	080081a1 	.word	0x080081a1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800815c:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 800815e:	8adb      	ldrh	r3, [r3, #22]
 8008160:	4916      	ldr	r1, [pc, #88]	@ (80081bc <SVCCTL_App_Notification+0x198>)
 8008162:	4618      	mov	r0, r3
 8008164:	f7fd ff66 	bl	8006034 <aci_gap_pass_key_resp>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800816e:	e018      	b.n	80081a2 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008170:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 8008172:	8adb      	ldrh	r3, [r3, #22]
 8008174:	2101      	movs	r1, #1
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f906 	bl	8006388 <aci_gap_numeric_comparison_value_confirm_yesno>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8008182:	e00e      	b.n	80081a2 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3302      	adds	r3, #2
 8008188:	61bb      	str	r3, [r7, #24]
          break;
 800818a:	e00a      	b.n	80081a2 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800818c:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <SVCCTL_App_Notification+0x190>)
 800818e:	8adb      	ldrh	r3, [r3, #22]
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fc0c 	bl	80069ae <aci_gatt_confirm_indication>
        break;
 8008196:	e004      	b.n	80081a2 <SVCCTL_App_Notification+0x17e>
          break;
 8008198:	bf00      	nop
 800819a:	e005      	b.n	80081a8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800819c:	bf00      	nop
 800819e:	e003      	b.n	80081a8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80081a0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80081a2:	e001      	b.n	80081a8 <SVCCTL_App_Notification+0x184>
      break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80081a8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80081aa:	2301      	movs	r3, #1
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	@ 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	200003cc 	.word	0x200003cc
 80081b8:	20000450 	.word	0x20000450
 80081bc:	0001b207 	.word	0x0001b207

080081c0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80081c6:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <Ble_Tl_Init+0x20>)
 80081c8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80081ca:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <Ble_Tl_Init+0x24>)
 80081cc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80081ce:	463b      	mov	r3, r7
 80081d0:	4619      	mov	r1, r3
 80081d2:	4805      	ldr	r0, [pc, #20]	@ (80081e8 <Ble_Tl_Init+0x28>)
 80081d4:	f7ff f8a6 	bl	8007324 <hci_init>

  return;
 80081d8:	bf00      	nop
}
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200300d8 	.word	0x200300d8
 80081e4:	080084ed 	.word	0x080084ed
 80081e8:	080084b5 	.word	0x080084b5

080081ec <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80081ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ee:	b08d      	sub	sp, #52	@ 0x34
 80081f0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80081f2:	2300      	movs	r3, #0
 80081f4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80081f6:	2392      	movs	r3, #146	@ 0x92
 80081f8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80081fa:	f7fe fdc2 	bl	8006d82 <hci_reset>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008202:	f000 f8d7 	bl	80083b4 <BleGetBdAddress>
 8008206:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	2106      	movs	r1, #6
 800820c:	2000      	movs	r0, #0
 800820e:	f7fe fc78 	bl	8006b02 <aci_hal_write_config_data>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008216:	4a4a      	ldr	r2, [pc, #296]	@ (8008340 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008218:	2110      	movs	r1, #16
 800821a:	2018      	movs	r0, #24
 800821c:	f7fe fc71 	bl	8006b02 <aci_hal_write_config_data>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008224:	4a47      	ldr	r2, [pc, #284]	@ (8008344 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008226:	2110      	movs	r1, #16
 8008228:	2008      	movs	r0, #8
 800822a:	f7fe fc6a 	bl	8006b02 <aci_hal_write_config_data>
 800822e:	4603      	mov	r3, r0
 8008230:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008232:	2118      	movs	r1, #24
 8008234:	2001      	movs	r0, #1
 8008236:	f7fe fce9 	bl	8006c0c <aci_hal_set_tx_power_level>
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800823e:	f7fe f90a 	bl	8006456 <aci_gatt_init>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	f043 0301 	orr.w	r3, r3, #1
 8008250:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01f      	beq.n	8008298 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008258:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800825a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800825c:	1dba      	adds	r2, r7, #6
 800825e:	7bf8      	ldrb	r0, [r7, #15]
 8008260:	1cbb      	adds	r3, r7, #2
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4613      	mov	r3, r2
 800826a:	2208      	movs	r2, #8
 800826c:	2100      	movs	r1, #0
 800826e:	f7fd ff48 	bl	8006102 <aci_gap_init>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008276:	88fc      	ldrh	r4, [r7, #6]
 8008278:	88bd      	ldrh	r5, [r7, #4]
 800827a:	68b8      	ldr	r0, [r7, #8]
 800827c:	f7f7 ff7e 	bl	800017c <strlen>
 8008280:	4603      	mov	r3, r0
 8008282:	b2da      	uxtb	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4613      	mov	r3, r2
 800828a:	2200      	movs	r2, #0
 800828c:	4629      	mov	r1, r5
 800828e:	4620      	mov	r0, r4
 8008290:	f7fe fae4 	bl	800685c <aci_gatt_update_char_value>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008298:	88f8      	ldrh	r0, [r7, #6]
 800829a:	8879      	ldrh	r1, [r7, #2]
 800829c:	463b      	mov	r3, r7
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2302      	movs	r3, #2
 80082a2:	2200      	movs	r2, #0
 80082a4:	f7fe fada 	bl	800685c <aci_gatt_update_char_value>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80082ac:	2202      	movs	r2, #2
 80082ae:	2102      	movs	r1, #2
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7fe fd8a 	bl	8006dca <hci_le_set_default_phy>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80082ba:	4b24      	ldr	r3, [pc, #144]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082bc:	2201      	movs	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80082c0:	4b22      	ldr	r3, [pc, #136]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fd fd9d 	bl	8005e04 <aci_gap_set_io_capability>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80082ce:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80082d4:	4b1d      	ldr	r3, [pc, #116]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082d6:	2208      	movs	r2, #8
 80082d8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80082da:	4b1c      	ldr	r3, [pc, #112]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082dc:	2210      	movs	r2, #16
 80082de:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80082e0:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80082e6:	4b19      	ldr	r3, [pc, #100]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082e8:	4a19      	ldr	r2, [pc, #100]	@ (8008350 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80082ea:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80082ec:	4b17      	ldr	r3, [pc, #92]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80082f2:	4b16      	ldr	r3, [pc, #88]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082f4:	789c      	ldrb	r4, [r3, #2]
 80082f6:	4b15      	ldr	r3, [pc, #84]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082f8:	785d      	ldrb	r5, [r3, #1]
 80082fa:	4b14      	ldr	r3, [pc, #80]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80082fc:	791b      	ldrb	r3, [r3, #4]
 80082fe:	4a13      	ldr	r2, [pc, #76]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008300:	7952      	ldrb	r2, [r2, #5]
 8008302:	4912      	ldr	r1, [pc, #72]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008304:	78c9      	ldrb	r1, [r1, #3]
 8008306:	4811      	ldr	r0, [pc, #68]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008308:	6880      	ldr	r0, [r0, #8]
 800830a:	2600      	movs	r6, #0
 800830c:	9604      	str	r6, [sp, #16]
 800830e:	9003      	str	r0, [sp, #12]
 8008310:	9102      	str	r1, [sp, #8]
 8008312:	9201      	str	r2, [sp, #4]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2300      	movs	r3, #0
 8008318:	2201      	movs	r2, #1
 800831a:	4629      	mov	r1, r5
 800831c:	4620      	mov	r0, r4
 800831e:	f7fd fdc5 	bl	8005eac <aci_gap_set_authentication_requirement>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008326:	4b09      	ldr	r3, [pc, #36]	@ (800834c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008328:	789b      	ldrb	r3, [r3, #2]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800832e:	f7fe f807 	bl	8006340 <aci_gap_configure_filter_accept_list>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833e:	bf00      	nop
 8008340:	0800967c 	.word	0x0800967c
 8008344:	0800968c 	.word	0x0800968c
 8008348:	08009470 	.word	0x08009470
 800834c:	200003cc 	.word	0x200003cc
 8008350:	0001b207 	.word	0x0001b207

08008354 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08c      	sub	sp, #48	@ 0x30
 8008358:	af08      	add	r7, sp, #32
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800835e:	2392      	movs	r3, #146	@ 0x92
 8008360:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008362:	4a12      	ldr	r2, [pc, #72]	@ (80083ac <Adv_Request+0x58>)
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800836a:	2300      	movs	r3, #0
 800836c:	9306      	str	r3, [sp, #24]
 800836e:	2300      	movs	r3, #0
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	2300      	movs	r3, #0
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	2300      	movs	r3, #0
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	2300      	movs	r3, #0
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	2300      	movs	r3, #0
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	2300      	movs	r3, #0
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	2300      	movs	r3, #0
 8008388:	22a0      	movs	r2, #160	@ 0xa0
 800838a:	2180      	movs	r1, #128	@ 0x80
 800838c:	2000      	movs	r0, #0
 800838e:	f7fd fc3f 	bl	8005c10 <aci_gap_set_discoverable>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008396:	4906      	ldr	r1, [pc, #24]	@ (80083b0 <Adv_Request+0x5c>)
 8008398:	200e      	movs	r0, #14
 800839a:	f7fd ff5f 	bl	800625c <aci_gap_update_adv_data>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80083a2:	bf00      	nop
}
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200003cc 	.word	0x200003cc
 80083b0:	20000014 	.word	0x20000014

080083b4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80083ba:	f7ff fdb5 	bl	8007f28 <LL_FLASH_GetUDN>
 80083be:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d023      	beq.n	8008410 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80083c8:	f7ff fdc6 	bl	8007f58 <LL_FLASH_GetSTCompanyID>
 80083cc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80083ce:	f7ff fdb7 	bl	8007f40 <LL_FLASH_GetDeviceID>
 80083d2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	4b16      	ldr	r3, [pc, #88]	@ (8008434 <BleGetBdAddress+0x80>)
 80083da:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	4b14      	ldr	r3, [pc, #80]	@ (8008434 <BleGetBdAddress+0x80>)
 80083e4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	4b12      	ldr	r3, [pc, #72]	@ (8008434 <BleGetBdAddress+0x80>)
 80083ec:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	4b10      	ldr	r3, [pc, #64]	@ (8008434 <BleGetBdAddress+0x80>)
 80083f4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <BleGetBdAddress+0x80>)
 80083fe:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b2da      	uxtb	r2, r3
 8008406:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <BleGetBdAddress+0x80>)
 8008408:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800840a:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <BleGetBdAddress+0x80>)
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e00b      	b.n	8008428 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008410:	2000      	movs	r0, #0
 8008412:	f7ff fca3 	bl	8007d5c <OTP_Read>
 8008416:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e001      	b.n	8008428 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008424:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <BleGetBdAddress+0x84>)
 8008426:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008428:	697b      	ldr	r3, [r7, #20]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200003c4 	.word	0x200003c4
 8008438:	08009674 	.word	0x08009674

0800843c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <Adv_Cancel+0x30>)
 8008444:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008448:	2b05      	cmp	r3, #5
 800844a:	d00a      	beq.n	8008462 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800844c:	2392      	movs	r3, #146	@ 0x92
 800844e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008450:	f7fd fbba 	bl	8005bc8 <aci_gap_set_non_discoverable>
 8008454:	4603      	mov	r3, r0
 8008456:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008458:	4b04      	ldr	r3, [pc, #16]	@ (800846c <Adv_Cancel+0x30>)
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008460:	bf00      	nop
 8008462:	bf00      	nop
}
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200003cc 	.word	0x200003cc

08008470 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008478:	2100      	movs	r1, #0
 800847a:	2002      	movs	r0, #2
 800847c:	f000 fe54 	bl	8009128 <UTIL_SEQ_SetTask>

  return;
 8008480:	bf00      	nop
}
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008490:	2001      	movs	r0, #1
 8008492:	f000 feb5 	bl	8009200 <UTIL_SEQ_SetEvt>

  return;
 8008496:	bf00      	nop
}
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80084a6:	2001      	movs	r0, #1
 80084a8:	f000 feca 	bl	8009240 <UTIL_SEQ_WaitEvt>

  return;
 80084ac:	bf00      	nop
}
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	3308      	adds	r3, #8
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fde6 	bl	8007098 <SVCCTL_UserEvtRx>
 80084cc:	4603      	mov	r3, r0
 80084ce:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80084dc:	e003      	b.n	80084e6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
  return;
 80084e4:	bf00      	nop
}
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <BLE_StatusNot+0x16>
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d006      	beq.n	800850e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008500:	e00b      	b.n	800851a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008502:	2303      	movs	r3, #3
 8008504:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fe3a 	bl	8009180 <UTIL_SEQ_PauseTask>
      break;
 800850c:	e005      	b.n	800851a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800850e:	2303      	movs	r3, #3
 8008510:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 fe54 	bl	80091c0 <UTIL_SEQ_ResumeTask>
      break;
 8008518:	bf00      	nop
  }

  return;
 800851a:	bf00      	nop
}
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b06      	cmp	r3, #6
 8008532:	d811      	bhi.n	8008558 <Custom_STM_App_Notification+0x34>
 8008534:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <Custom_STM_App_Notification+0x18>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008559 	.word	0x08008559
 8008540:	08008559 	.word	0x08008559
 8008544:	08008559 	.word	0x08008559
 8008548:	08008559 	.word	0x08008559
 800854c:	08008559 	.word	0x08008559
 8008550:	08008559 	.word	0x08008559
 8008554:	08008559 	.word	0x08008559

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008558:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800855a:	bf00      	nop
}
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop

08008568 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <Custom_APP_Notification+0x16>
 8008578:	2b01      	cmp	r3, #1
 800857a:	d002      	beq.n	8008582 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800857c:	e002      	b.n	8008584 <Custom_APP_Notification+0x1c>
      break;
 800857e:	bf00      	nop
 8008580:	e000      	b.n	8008584 <Custom_APP_Notification+0x1c>
      break;
 8008582:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008584:	bf00      	nop
}
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008594:	bf00      	nop
}
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	@ 0x38
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3301      	adds	r3, #1
 80085b2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2bff      	cmp	r3, #255	@ 0xff
 80085ba:	f040 80ec 	bne.w	8008796 <Custom_STM_Event_Handler+0x1f6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	3302      	adds	r3, #2
 80085c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 80085c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80085ce:	2b1a      	cmp	r3, #26
 80085d0:	f200 80d9 	bhi.w	8008786 <Custom_STM_Event_Handler+0x1e6>
 80085d4:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <Custom_STM_Event_Handler+0x3c>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008787 	.word	0x08008787
 80085e4:	08008787 	.word	0x08008787
 80085e8:	08008787 	.word	0x08008787
 80085ec:	08008787 	.word	0x08008787
 80085f0:	08008787 	.word	0x08008787
 80085f4:	08008787 	.word	0x08008787
 80085f8:	08008787 	.word	0x08008787
 80085fc:	08008787 	.word	0x08008787
 8008600:	08008787 	.word	0x08008787
 8008604:	08008787 	.word	0x08008787
 8008608:	08008787 	.word	0x08008787
 800860c:	08008787 	.word	0x08008787
 8008610:	08008787 	.word	0x08008787
 8008614:	08008787 	.word	0x08008787
 8008618:	08008787 	.word	0x08008787
 800861c:	08008787 	.word	0x08008787
 8008620:	08008787 	.word	0x08008787
 8008624:	08008715 	.word	0x08008715
 8008628:	0800869d 	.word	0x0800869d
 800862c:	08008787 	.word	0x08008787
 8008630:	08008787 	.word	0x08008787
 8008634:	08008787 	.word	0x08008787
 8008638:	08008787 	.word	0x08008787
 800863c:	08008787 	.word	0x08008787
 8008640:	08008787 	.word	0x08008787
 8008644:	08008769 	.word	0x08008769
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	3302      	adds	r3, #2
 800864c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomDl_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	b29b      	uxth	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	4b53      	ldr	r3, [pc, #332]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	3301      	adds	r3, #1
 800865c:	429a      	cmp	r2, r3
 800865e:	d103      	bne.n	8008668 <Custom_STM_Event_Handler+0xc8>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE END CUSTOM_STM_Service_2_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8008666:	e090      	b.n	800878a <Custom_STM_Event_Handler+0x1ea>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBs_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	885b      	ldrh	r3, [r3, #2]
 800866c:	b29b      	uxth	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	4b4c      	ldr	r3, [pc, #304]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 8008672:	889b      	ldrh	r3, [r3, #4]
 8008674:	3301      	adds	r3, #1
 8008676:	429a      	cmp	r2, r3
 8008678:	d103      	bne.n	8008682 <Custom_STM_Event_Handler+0xe2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800867a:	2301      	movs	r3, #1
 800867c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 8008680:	e083      	b.n	800878a <Custom_STM_Event_Handler+0x1ea>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	885b      	ldrh	r3, [r3, #2]
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	4b46      	ldr	r3, [pc, #280]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 800868c:	891b      	ldrh	r3, [r3, #8]
 800868e:	3301      	adds	r3, #1
 8008690:	429a      	cmp	r2, r3
 8008692:	d17a      	bne.n	800878a <Custom_STM_Event_Handler+0x1ea>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008694:	2301      	movs	r3, #1
 8008696:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 800869a:	e076      	b.n	800878a <Custom_STM_Event_Handler+0x1ea>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	3302      	adds	r3, #2
 80086a0:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDl_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	885b      	ldrh	r3, [r3, #2]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	4b3e      	ldr	r3, [pc, #248]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 80086ac:	885b      	ldrh	r3, [r3, #2]
 80086ae:	3301      	adds	r3, #1
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d109      	bne.n	80086c8 <Custom_STM_Event_Handler+0x128>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe f9c9 	bl	8006a58 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_2_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80086c6:	e062      	b.n	800878e <Custom_STM_Event_Handler+0x1ee>
          else if (read_req->Attribute_Handle == (CustomContext.CustomBs_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b34      	ldr	r3, [pc, #208]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 80086d2:	889b      	ldrh	r3, [r3, #4]
 80086d4:	3301      	adds	r3, #1
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d109      	bne.n	80086ee <Custom_STM_Event_Handler+0x14e>
            return_value = SVCCTL_EvtAckFlowEnable;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe f9b6 	bl	8006a58 <aci_gatt_allow_read>
          break;
 80086ec:	e04f      	b.n	800878e <Custom_STM_Event_Handler+0x1ee>
          else if (read_req->Attribute_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b2b      	ldr	r3, [pc, #172]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 80086f8:	891b      	ldrh	r3, [r3, #8]
 80086fa:	3301      	adds	r3, #1
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d146      	bne.n	800878e <Custom_STM_Event_Handler+0x1ee>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe f9a3 	bl	8006a58 <aci_gatt_allow_read>
          break;
 8008712:	e03c      	b.n	800878e <Custom_STM_Event_Handler+0x1ee>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008716:	3302      	adds	r3, #2
 8008718:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomDl_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	b29b      	uxth	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	4b20      	ldr	r3, [pc, #128]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 8008724:	885b      	ldrh	r3, [r3, #2]
 8008726:	3301      	adds	r3, #1
 8008728:	429a      	cmp	r2, r3
 800872a:	d103      	bne.n	8008734 <Custom_STM_Event_Handler+0x194>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /*if (write_perm_req->Attribute_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008732:	e02e      	b.n	8008792 <Custom_STM_Event_Handler+0x1f2>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomBs_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	b29b      	uxth	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	4b19      	ldr	r3, [pc, #100]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 800873e:	889b      	ldrh	r3, [r3, #4]
 8008740:	3301      	adds	r3, #1
 8008742:	429a      	cmp	r2, r3
 8008744:	d103      	bne.n	800874e <Custom_STM_Event_Handler+0x1ae>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 800874c:	e021      	b.n	8008792 <Custom_STM_Event_Handler+0x1f2>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomOtadataHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	4b13      	ldr	r3, [pc, #76]	@ (80087a4 <Custom_STM_Event_Handler+0x204>)
 8008758:	891b      	ldrh	r3, [r3, #8]
 800875a:	3301      	adds	r3, #1
 800875c:	429a      	cmp	r2, r3
 800875e:	d118      	bne.n	8008792 <Custom_STM_Event_Handler+0x1f2>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 8008766:	e014      	b.n	8008792 <Custom_STM_Event_Handler+0x1f2>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	3302      	adds	r3, #2
 800876c:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800876e:	2306      	movs	r3, #6
 8008770:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fed0 	bl	8008524 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8008784:	e006      	b.n	8008794 <Custom_STM_Event_Handler+0x1f4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008786:	bf00      	nop
 8008788:	e006      	b.n	8008798 <Custom_STM_Event_Handler+0x1f8>
          break;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <Custom_STM_Event_Handler+0x1f8>
          break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <Custom_STM_Event_Handler+0x1f8>
          break;
 8008792:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008794:	e000      	b.n	8008798 <Custom_STM_Event_Handler+0x1f8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008796:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008798:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800879c:	4618      	mov	r0, r3
 800879e:	3738      	adds	r7, #56	@ 0x38
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000454 	.word	0x20000454

080087a8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08c      	sub	sp, #48	@ 0x30
 80087ac:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80087ae:	2392      	movs	r3, #146	@ 0x92
 80087b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80087b2:	4880      	ldr	r0, [pc, #512]	@ (80089b4 <SVCCTL_InitCustomSvc+0x20c>)
 80087b4:	f7fe fc56 	bl	8007064 <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 80087b8:	2305      	movs	r3, #5
 80087ba:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_LS_DATAL_UUID(uuid.Char_UUID_128);
 80087bc:	238f      	movs	r3, #143	@ 0x8f
 80087be:	713b      	strb	r3, [r7, #4]
 80087c0:	23e5      	movs	r3, #229	@ 0xe5
 80087c2:	717b      	strb	r3, [r7, #5]
 80087c4:	23b3      	movs	r3, #179	@ 0xb3
 80087c6:	71bb      	strb	r3, [r7, #6]
 80087c8:	23d5      	movs	r3, #213	@ 0xd5
 80087ca:	71fb      	strb	r3, [r7, #7]
 80087cc:	232e      	movs	r3, #46	@ 0x2e
 80087ce:	723b      	strb	r3, [r7, #8]
 80087d0:	237f      	movs	r3, #127	@ 0x7f
 80087d2:	727b      	strb	r3, [r7, #9]
 80087d4:	234a      	movs	r3, #74	@ 0x4a
 80087d6:	72bb      	strb	r3, [r7, #10]
 80087d8:	2398      	movs	r3, #152	@ 0x98
 80087da:	72fb      	strb	r3, [r7, #11]
 80087dc:	232a      	movs	r3, #42	@ 0x2a
 80087de:	733b      	strb	r3, [r7, #12]
 80087e0:	2348      	movs	r3, #72	@ 0x48
 80087e2:	737b      	strb	r3, [r7, #13]
 80087e4:	237a      	movs	r3, #122	@ 0x7a
 80087e6:	73bb      	strb	r3, [r7, #14]
 80087e8:	23cc      	movs	r3, #204	@ 0xcc
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	2300      	movs	r3, #0
 80087ee:	743b      	strb	r3, [r7, #16]
 80087f0:	2300      	movs	r3, #0
 80087f2:	747b      	strb	r3, [r7, #17]
 80087f4:	2300      	movs	r3, #0
 80087f6:	74bb      	strb	r3, [r7, #18]
 80087f8:	2300      	movs	r3, #0
 80087fa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
 80087fe:	1d39      	adds	r1, r7, #4
 8008800:	4a6d      	ldr	r2, [pc, #436]	@ (80089b8 <SVCCTL_InitCustomSvc+0x210>)
 8008802:	9200      	str	r2, [sp, #0]
 8008804:	2201      	movs	r2, #1
 8008806:	2002      	movs	r0, #2
 8008808:	f7fd fe4a 	bl	80064a0 <aci_gatt_add_service>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Device_Locking_Char
   */
  COPY_DEVICE_LOCKING_CHAR_UUID(uuid.Char_UUID_128);
 8008810:	2319      	movs	r3, #25
 8008812:	713b      	strb	r3, [r7, #4]
 8008814:	23ed      	movs	r3, #237	@ 0xed
 8008816:	717b      	strb	r3, [r7, #5]
 8008818:	2382      	movs	r3, #130	@ 0x82
 800881a:	71bb      	strb	r3, [r7, #6]
 800881c:	23ae      	movs	r3, #174	@ 0xae
 800881e:	71fb      	strb	r3, [r7, #7]
 8008820:	23ed      	movs	r3, #237	@ 0xed
 8008822:	723b      	strb	r3, [r7, #8]
 8008824:	2321      	movs	r3, #33	@ 0x21
 8008826:	727b      	strb	r3, [r7, #9]
 8008828:	234c      	movs	r3, #76	@ 0x4c
 800882a:	72bb      	strb	r3, [r7, #10]
 800882c:	239d      	movs	r3, #157	@ 0x9d
 800882e:	72fb      	strb	r3, [r7, #11]
 8008830:	2341      	movs	r3, #65	@ 0x41
 8008832:	733b      	strb	r3, [r7, #12]
 8008834:	2345      	movs	r3, #69	@ 0x45
 8008836:	737b      	strb	r3, [r7, #13]
 8008838:	2322      	movs	r3, #34	@ 0x22
 800883a:	73bb      	strb	r3, [r7, #14]
 800883c:	238e      	movs	r3, #142	@ 0x8e
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	2300      	movs	r3, #0
 8008842:	743b      	strb	r3, [r7, #16]
 8008844:	2300      	movs	r3, #0
 8008846:	747b      	strb	r3, [r7, #17]
 8008848:	2300      	movs	r3, #0
 800884a:	74bb      	strb	r3, [r7, #18]
 800884c:	2300      	movs	r3, #0
 800884e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLs_DatasHdle,
 8008850:	4b59      	ldr	r3, [pc, #356]	@ (80089b8 <SVCCTL_InitCustomSvc+0x210>)
 8008852:	8818      	ldrh	r0, [r3, #0]
 8008854:	4b59      	ldr	r3, [pc, #356]	@ (80089bc <SVCCTL_InitCustomSvc+0x214>)
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	1d3a      	adds	r2, r7, #4
 800885a:	4959      	ldr	r1, [pc, #356]	@ (80089c0 <SVCCTL_InitCustomSvc+0x218>)
 800885c:	9105      	str	r1, [sp, #20]
 800885e:	2100      	movs	r1, #0
 8008860:	9104      	str	r1, [sp, #16]
 8008862:	2110      	movs	r1, #16
 8008864:	9103      	str	r1, [sp, #12]
 8008866:	2107      	movs	r1, #7
 8008868:	9102      	str	r1, [sp, #8]
 800886a:	2100      	movs	r1, #0
 800886c:	9101      	str	r1, [sp, #4]
 800886e:	2106      	movs	r1, #6
 8008870:	9100      	str	r1, [sp, #0]
 8008872:	2102      	movs	r1, #2
 8008874:	f7fd feea 	bl	800664c <aci_gatt_add_char>
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Battery_Status_Char
   */
  COPY_BATTERY_STATUS_CHAR_UUID(uuid.Char_UUID_128);
 800887c:	2319      	movs	r3, #25
 800887e:	713b      	strb	r3, [r7, #4]
 8008880:	23ed      	movs	r3, #237	@ 0xed
 8008882:	717b      	strb	r3, [r7, #5]
 8008884:	2382      	movs	r3, #130	@ 0x82
 8008886:	71bb      	strb	r3, [r7, #6]
 8008888:	23ae      	movs	r3, #174	@ 0xae
 800888a:	71fb      	strb	r3, [r7, #7]
 800888c:	23ed      	movs	r3, #237	@ 0xed
 800888e:	723b      	strb	r3, [r7, #8]
 8008890:	2321      	movs	r3, #33	@ 0x21
 8008892:	727b      	strb	r3, [r7, #9]
 8008894:	234c      	movs	r3, #76	@ 0x4c
 8008896:	72bb      	strb	r3, [r7, #10]
 8008898:	239d      	movs	r3, #157	@ 0x9d
 800889a:	72fb      	strb	r3, [r7, #11]
 800889c:	2341      	movs	r3, #65	@ 0x41
 800889e:	733b      	strb	r3, [r7, #12]
 80088a0:	2345      	movs	r3, #69	@ 0x45
 80088a2:	737b      	strb	r3, [r7, #13]
 80088a4:	2322      	movs	r3, #34	@ 0x22
 80088a6:	73bb      	strb	r3, [r7, #14]
 80088a8:	238e      	movs	r3, #142	@ 0x8e
 80088aa:	73fb      	strb	r3, [r7, #15]
 80088ac:	2300      	movs	r3, #0
 80088ae:	743b      	strb	r3, [r7, #16]
 80088b0:	2300      	movs	r3, #0
 80088b2:	747b      	strb	r3, [r7, #17]
 80088b4:	2300      	movs	r3, #0
 80088b6:	74bb      	strb	r3, [r7, #18]
 80088b8:	2300      	movs	r3, #0
 80088ba:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLs_DatasHdle,
 80088bc:	4b3e      	ldr	r3, [pc, #248]	@ (80089b8 <SVCCTL_InitCustomSvc+0x210>)
 80088be:	8818      	ldrh	r0, [r3, #0]
 80088c0:	4b40      	ldr	r3, [pc, #256]	@ (80089c4 <SVCCTL_InitCustomSvc+0x21c>)
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	1d3a      	adds	r2, r7, #4
 80088c6:	4940      	ldr	r1, [pc, #256]	@ (80089c8 <SVCCTL_InitCustomSvc+0x220>)
 80088c8:	9105      	str	r1, [sp, #20]
 80088ca:	2100      	movs	r1, #0
 80088cc:	9104      	str	r1, [sp, #16]
 80088ce:	2110      	movs	r1, #16
 80088d0:	9103      	str	r1, [sp, #12]
 80088d2:	2107      	movs	r1, #7
 80088d4:	9102      	str	r1, [sp, #8]
 80088d6:	2100      	movs	r1, #0
 80088d8:	9101      	str	r1, [sp, #4]
 80088da:	2106      	movs	r1, #6
 80088dc:	9100      	str	r1, [sp, #0]
 80088de:	2102      	movs	r1, #2
 80088e0:	f7fd feb4 	bl	800664c <aci_gatt_add_char>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 80088e8:	2303      	movs	r3, #3
 80088ea:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_LS_OTAL_UUID(uuid.Char_UUID_128);
 80088ec:	238f      	movs	r3, #143	@ 0x8f
 80088ee:	713b      	strb	r3, [r7, #4]
 80088f0:	23e5      	movs	r3, #229	@ 0xe5
 80088f2:	717b      	strb	r3, [r7, #5]
 80088f4:	23b3      	movs	r3, #179	@ 0xb3
 80088f6:	71bb      	strb	r3, [r7, #6]
 80088f8:	23d5      	movs	r3, #213	@ 0xd5
 80088fa:	71fb      	strb	r3, [r7, #7]
 80088fc:	232e      	movs	r3, #46	@ 0x2e
 80088fe:	723b      	strb	r3, [r7, #8]
 8008900:	237f      	movs	r3, #127	@ 0x7f
 8008902:	727b      	strb	r3, [r7, #9]
 8008904:	234a      	movs	r3, #74	@ 0x4a
 8008906:	72bb      	strb	r3, [r7, #10]
 8008908:	2398      	movs	r3, #152	@ 0x98
 800890a:	72fb      	strb	r3, [r7, #11]
 800890c:	232a      	movs	r3, #42	@ 0x2a
 800890e:	733b      	strb	r3, [r7, #12]
 8008910:	2348      	movs	r3, #72	@ 0x48
 8008912:	737b      	strb	r3, [r7, #13]
 8008914:	237a      	movs	r3, #122	@ 0x7a
 8008916:	73bb      	strb	r3, [r7, #14]
 8008918:	23cc      	movs	r3, #204	@ 0xcc
 800891a:	73fb      	strb	r3, [r7, #15]
 800891c:	2300      	movs	r3, #0
 800891e:	743b      	strb	r3, [r7, #16]
 8008920:	2300      	movs	r3, #0
 8008922:	747b      	strb	r3, [r7, #17]
 8008924:	2300      	movs	r3, #0
 8008926:	74bb      	strb	r3, [r7, #18]
 8008928:	2300      	movs	r3, #0
 800892a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800892c:	7dbb      	ldrb	r3, [r7, #22]
 800892e:	1d39      	adds	r1, r7, #4
 8008930:	4a26      	ldr	r2, [pc, #152]	@ (80089cc <SVCCTL_InitCustomSvc+0x224>)
 8008932:	9200      	str	r2, [sp, #0]
 8008934:	2201      	movs	r2, #1
 8008936:	2002      	movs	r0, #2
 8008938:	f7fd fdb2 	bl	80064a0 <aci_gatt_add_service>
 800893c:	4603      	mov	r3, r0
 800893e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  OTAData
   */
  COPY_OTADATA_UUID(uuid.Char_UUID_128);
 8008940:	2319      	movs	r3, #25
 8008942:	713b      	strb	r3, [r7, #4]
 8008944:	23ed      	movs	r3, #237	@ 0xed
 8008946:	717b      	strb	r3, [r7, #5]
 8008948:	2382      	movs	r3, #130	@ 0x82
 800894a:	71bb      	strb	r3, [r7, #6]
 800894c:	23ae      	movs	r3, #174	@ 0xae
 800894e:	71fb      	strb	r3, [r7, #7]
 8008950:	23ed      	movs	r3, #237	@ 0xed
 8008952:	723b      	strb	r3, [r7, #8]
 8008954:	2321      	movs	r3, #33	@ 0x21
 8008956:	727b      	strb	r3, [r7, #9]
 8008958:	234c      	movs	r3, #76	@ 0x4c
 800895a:	72bb      	strb	r3, [r7, #10]
 800895c:	239d      	movs	r3, #157	@ 0x9d
 800895e:	72fb      	strb	r3, [r7, #11]
 8008960:	2341      	movs	r3, #65	@ 0x41
 8008962:	733b      	strb	r3, [r7, #12]
 8008964:	2345      	movs	r3, #69	@ 0x45
 8008966:	737b      	strb	r3, [r7, #13]
 8008968:	2322      	movs	r3, #34	@ 0x22
 800896a:	73bb      	strb	r3, [r7, #14]
 800896c:	238e      	movs	r3, #142	@ 0x8e
 800896e:	73fb      	strb	r3, [r7, #15]
 8008970:	2300      	movs	r3, #0
 8008972:	743b      	strb	r3, [r7, #16]
 8008974:	2300      	movs	r3, #0
 8008976:	747b      	strb	r3, [r7, #17]
 8008978:	2300      	movs	r3, #0
 800897a:	74bb      	strb	r3, [r7, #18]
 800897c:	2300      	movs	r3, #0
 800897e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLs_OtasHdle,
 8008980:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <SVCCTL_InitCustomSvc+0x210>)
 8008982:	88d8      	ldrh	r0, [r3, #6]
 8008984:	4b12      	ldr	r3, [pc, #72]	@ (80089d0 <SVCCTL_InitCustomSvc+0x228>)
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	1d3a      	adds	r2, r7, #4
 800898a:	4912      	ldr	r1, [pc, #72]	@ (80089d4 <SVCCTL_InitCustomSvc+0x22c>)
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	2100      	movs	r1, #0
 8008990:	9104      	str	r1, [sp, #16]
 8008992:	2110      	movs	r1, #16
 8008994:	9103      	str	r1, [sp, #12]
 8008996:	2107      	movs	r1, #7
 8008998:	9102      	str	r1, [sp, #8]
 800899a:	2100      	movs	r1, #0
 800899c:	9101      	str	r1, [sp, #4]
 800899e:	2106      	movs	r1, #6
 80089a0:	9100      	str	r1, [sp, #0]
 80089a2:	2102      	movs	r1, #2
 80089a4:	f7fd fe52 	bl	800664c <aci_gatt_add_char>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80089ac:	bf00      	nop
}
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	080085a1 	.word	0x080085a1
 80089b8:	20000454 	.word	0x20000454
 80089bc:	20000022 	.word	0x20000022
 80089c0:	20000456 	.word	0x20000456
 80089c4:	20000024 	.word	0x20000024
 80089c8:	20000458 	.word	0x20000458
 80089cc:	2000045a 	.word	0x2000045a
 80089d0:	20000026 	.word	0x20000026
 80089d4:	2000045c 	.word	0x2000045c

080089d8 <LL_PWR_EnableBootC2>:
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <LL_PWR_EnableBootC2+0x1c>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <LL_PWR_EnableBootC2+0x1c>)
 80089e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089e6:	60d3      	str	r3, [r2, #12]
}
 80089e8:	bf00      	nop
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	58000400 	.word	0x58000400

080089f8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008a00:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008a02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008a06:	4905      	ldr	r1, [pc, #20]	@ (8008a1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	58000800 	.word	0x58000800

08008a20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008a28:	4b05      	ldr	r3, [pc, #20]	@ (8008a40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008a2a:	6a1a      	ldr	r2, [r3, #32]
 8008a2c:	4904      	ldr	r1, [pc, #16]	@ (8008a40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	620b      	str	r3, [r1, #32]
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	58000800 	.word	0x58000800

08008a44 <LL_AHB3_GRP1_EnableClock>:
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4013      	ands	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a68:	68fb      	ldr	r3, [r7, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a82:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a96:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f043 0201 	orr.w	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	43db      	mvns	r3, r3
 8008b02:	401a      	ands	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	605a      	str	r2, [r3, #4]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	401a      	ands	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	609a      	str	r2, [r3, #8]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	041a      	lsls	r2, r3, #16
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	609a      	str	r2, [r3, #8]
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d101      	bne.n	8008bb2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69da      	ldr	r2, [r3, #28]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d101      	bne.n	8008bdc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	4818      	ldr	r0, [pc, #96]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008bf4:	f7ff ffe4 	bl	8008bc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d008      	beq.n	8008c10 <HW_IPCC_Rx_Handler+0x24>
 8008bfe:	4b15      	ldr	r3, [pc, #84]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008c0a:	f000 f8d5 	bl	8008db8 <HW_IPCC_SYS_EvtHandler>
 8008c0e:	e01e      	b.n	8008c4e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008c10:	2101      	movs	r1, #1
 8008c12:	4810      	ldr	r0, [pc, #64]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008c14:	f7ff ffd4 	bl	8008bc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <HW_IPCC_Rx_Handler+0x44>
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008c2a:	f000 f889 	bl	8008d40 <HW_IPCC_BLE_EvtHandler>
 8008c2e:	e00e      	b.n	8008c4e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008c30:	2108      	movs	r1, #8
 8008c32:	4808      	ldr	r0, [pc, #32]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008c34:	f7ff ffc4 	bl	8008bc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <HW_IPCC_Rx_Handler+0x64>
 8008c3e:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <HW_IPCC_Rx_Handler+0x68>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008c4a:	f000 f901 	bl	8008e50 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
}
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	58000c00 	.word	0x58000c00

08008c58 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	4818      	ldr	r0, [pc, #96]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008c60:	f7ff ff99 	bl	8008b96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d108      	bne.n	8008c7c <HW_IPCC_Tx_Handler+0x24>
 8008c6a:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008c76:	f000 f893 	bl	8008da0 <HW_IPCC_SYS_CmdEvtHandler>
 8008c7a:	e01e      	b.n	8008cba <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008c7c:	2108      	movs	r1, #8
 8008c7e:	4810      	ldr	r0, [pc, #64]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008c80:	f7ff ff89 	bl	8008b96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d108      	bne.n	8008c9c <HW_IPCC_Tx_Handler+0x44>
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008c96:	f000 f8bd 	bl	8008e14 <HW_IPCC_MM_FreeBufHandler>
 8008c9a:	e00e      	b.n	8008cba <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008c9c:	2120      	movs	r1, #32
 8008c9e:	4808      	ldr	r0, [pc, #32]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008ca0:	f7ff ff79 	bl	8008b96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d108      	bne.n	8008cbc <HW_IPCC_Tx_Handler+0x64>
 8008caa:	4b05      	ldr	r3, [pc, #20]	@ (8008cc0 <HW_IPCC_Tx_Handler+0x68>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008cb6:	f000 f84f 	bl	8008d58 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008cba:	bf00      	nop
 8008cbc:	bf00      	nop
}
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	58000c00 	.word	0x58000c00

08008cc4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008cc8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008ccc:	f7ff fed3 	bl	8008a76 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008cd0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008cd4:	f7ff fea4 	bl	8008a20 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008cd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008cdc:	f7ff fe8c 	bl	80089f8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008ce0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008ce2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008ce4:	f7ff fe78 	bl	80089d8 <LL_PWR_EnableBootC2>

  return;
 8008ce8:	bf00      	nop
}
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008cf0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008cf4:	f7ff fea6 	bl	8008a44 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008cf8:	4806      	ldr	r0, [pc, #24]	@ (8008d14 <HW_IPCC_Init+0x28>)
 8008cfa:	f7ff fee8 	bl	8008ace <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008cfe:	4805      	ldr	r0, [pc, #20]	@ (8008d14 <HW_IPCC_Init+0x28>)
 8008d00:	f7ff fed5 	bl	8008aae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008d04:	202c      	movs	r0, #44	@ 0x2c
 8008d06:	f7f9 fa57 	bl	80021b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008d0a:	202d      	movs	r0, #45	@ 0x2d
 8008d0c:	f7f9 fa54 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  return;
 8008d10:	bf00      	nop
}
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	58000c00 	.word	0x58000c00

08008d18 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4802      	ldr	r0, [pc, #8]	@ (8008d28 <HW_IPCC_BLE_Init+0x10>)
 8008d20:	f7ff ff0a 	bl	8008b38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008d24:	bf00      	nop
}
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	58000c00 	.word	0x58000c00

08008d2c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008d30:	2101      	movs	r1, #1
 8008d32:	4802      	ldr	r0, [pc, #8]	@ (8008d3c <HW_IPCC_BLE_SendCmd+0x10>)
 8008d34:	f7ff ff20 	bl	8008b78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008d38:	bf00      	nop
}
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	58000c00 	.word	0x58000c00

08008d40 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008d44:	f7fe fe52 	bl	80079ec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008d48:	2101      	movs	r1, #1
 8008d4a:	4802      	ldr	r0, [pc, #8]	@ (8008d54 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008d4c:	f7ff ff06 	bl	8008b5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008d50:	bf00      	nop
}
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	58000c00 	.word	0x58000c00

08008d58 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	4803      	ldr	r0, [pc, #12]	@ (8008d6c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008d60:	f7ff fed8 	bl	8008b14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008d64:	f7fe fe72 	bl	8007a4c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008d68:	bf00      	nop
}
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	58000c00 	.word	0x58000c00

08008d70 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008d74:	2102      	movs	r1, #2
 8008d76:	4802      	ldr	r0, [pc, #8]	@ (8008d80 <HW_IPCC_SYS_Init+0x10>)
 8008d78:	f7ff fede 	bl	8008b38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008d7c:	bf00      	nop
}
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	58000c00 	.word	0x58000c00

08008d84 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008d88:	2102      	movs	r1, #2
 8008d8a:	4804      	ldr	r0, [pc, #16]	@ (8008d9c <HW_IPCC_SYS_SendCmd+0x18>)
 8008d8c:	f7ff fef4 	bl	8008b78 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008d90:	2102      	movs	r1, #2
 8008d92:	4802      	ldr	r0, [pc, #8]	@ (8008d9c <HW_IPCC_SYS_SendCmd+0x18>)
 8008d94:	f7ff feab 	bl	8008aee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008d98:	bf00      	nop
}
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	58000c00 	.word	0x58000c00

08008da0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008da4:	2102      	movs	r1, #2
 8008da6:	4803      	ldr	r0, [pc, #12]	@ (8008db4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008da8:	f7ff feb4 	bl	8008b14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008dac:	f7fe fe9e 	bl	8007aec <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008db0:	bf00      	nop
}
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	58000c00 	.word	0x58000c00

08008db8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008dbc:	f7fe feac 	bl	8007b18 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	4802      	ldr	r0, [pc, #8]	@ (8008dcc <HW_IPCC_SYS_EvtHandler+0x14>)
 8008dc4:	f7ff feca 	bl	8008b5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008dc8:	bf00      	nop
}
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	58000c00 	.word	0x58000c00

08008dd0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008dd8:	2108      	movs	r1, #8
 8008dda:	480c      	ldr	r0, [pc, #48]	@ (8008e0c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ddc:	f7ff fedb 	bl	8008b96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008de6:	4a0a      	ldr	r2, [pc, #40]	@ (8008e10 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008dec:	2108      	movs	r1, #8
 8008dee:	4807      	ldr	r0, [pc, #28]	@ (8008e0c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008df0:	f7ff fe7d 	bl	8008aee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008df4:	e006      	b.n	8008e04 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008dfa:	2108      	movs	r1, #8
 8008dfc:	4803      	ldr	r0, [pc, #12]	@ (8008e0c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008dfe:	f7ff febb 	bl	8008b78 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008e02:	bf00      	nop
}
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	58000c00 	.word	0x58000c00
 8008e10:	20000460 	.word	0x20000460

08008e14 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e18:	2108      	movs	r1, #8
 8008e1a:	4806      	ldr	r0, [pc, #24]	@ (8008e34 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e1c:	f7ff fe7a 	bl	8008b14 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008e20:	4b05      	ldr	r3, [pc, #20]	@ (8008e38 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e26:	2108      	movs	r1, #8
 8008e28:	4802      	ldr	r0, [pc, #8]	@ (8008e34 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e2a:	f7ff fea5 	bl	8008b78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008e2e:	bf00      	nop
}
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	58000c00 	.word	0x58000c00
 8008e38:	20000460 	.word	0x20000460

08008e3c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008e40:	2108      	movs	r1, #8
 8008e42:	4802      	ldr	r0, [pc, #8]	@ (8008e4c <HW_IPCC_TRACES_Init+0x10>)
 8008e44:	f7ff fe78 	bl	8008b38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008e48:	bf00      	nop
}
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	58000c00 	.word	0x58000c00

08008e50 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008e54:	f7fe ff08 	bl	8007c68 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008e58:	2108      	movs	r1, #8
 8008e5a:	4802      	ldr	r0, [pc, #8]	@ (8008e64 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008e5c:	f7ff fe7e 	bl	8008b5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008e60:	bf00      	nop
}
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	58000c00 	.word	0x58000c00

08008e68 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <UTIL_LPM_Init+0x1c>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008e72:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <UTIL_LPM_Init+0x20>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000464 	.word	0x20000464
 8008e88:	20000468 	.word	0x20000468

08008e8c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e98:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ea2:	b672      	cpsid	i
}
 8008ea4:	bf00      	nop
  
  switch(state)
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <UTIL_LPM_SetOffMode+0x32>
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d10e      	bne.n	8008ece <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <UTIL_LPM_SetOffMode+0x5c>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ee8 <UTIL_LPM_SetOffMode+0x5c>)
 8008eba:	6013      	str	r3, [r2, #0]
      break;
 8008ebc:	e008      	b.n	8008ed0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	43da      	mvns	r2, r3
 8008ec2:	4b09      	ldr	r3, [pc, #36]	@ (8008ee8 <UTIL_LPM_SetOffMode+0x5c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	4a07      	ldr	r2, [pc, #28]	@ (8008ee8 <UTIL_LPM_SetOffMode+0x5c>)
 8008eca:	6013      	str	r3, [r2, #0]
      break;
 8008ecc:	e000      	b.n	8008ed0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008ece:	bf00      	nop
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f383 8810 	msr	PRIMASK, r3
}
 8008eda:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20000468 	.word	0x20000468

08008eec <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b090      	sub	sp, #64	@ 0x40
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008ef4:	4b73      	ldr	r3, [pc, #460]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008efa:	4b72      	ldr	r3, [pc, #456]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4013      	ands	r3, r2
 8008f02:	4a70      	ldr	r2, [pc, #448]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8008f04:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008f06:	4b70      	ldr	r3, [pc, #448]	@ (80090c8 <UTIL_SEQ_Run+0x1dc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80090cc <UTIL_SEQ_Run+0x1e0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008f12:	4b6f      	ldr	r3, [pc, #444]	@ (80090d0 <UTIL_SEQ_Run+0x1e4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008f18:	4b6e      	ldr	r3, [pc, #440]	@ (80090d4 <UTIL_SEQ_Run+0x1e8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008f1e:	e08d      	b.n	800903c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008f24:	e002      	b.n	8008f2c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f28:	3301      	adds	r3, #1
 8008f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	401a      	ands	r2, r3
 8008f38:	4b62      	ldr	r3, [pc, #392]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0f1      	beq.n	8008f26 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008f42:	4a65      	ldr	r2, [pc, #404]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f46:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	401a      	ands	r2, r3
 8008f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4013      	ands	r3, r2
 8008f54:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008f56:	4a60      	ldr	r2, [pc, #384]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f62:	4013      	ands	r3, r2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008f68:	4a5b      	ldr	r2, [pc, #364]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008f76:	4a58      	ldr	r2, [pc, #352]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	4013      	ands	r3, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 f9b3 	bl	80092f0 <SEQ_BitPosition>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b53      	ldr	r3, [pc, #332]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 8008f90:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008f92:	4a51      	ldr	r2, [pc, #324]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	4413      	add	r3, r2
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	43db      	mvns	r3, r3
 8008fa8:	401a      	ands	r2, r3
 8008faa:	494b      	ldr	r1, [pc, #300]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	440b      	add	r3, r1
 8008fb2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fba:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008fbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fbe:	b672      	cpsid	i
}
 8008fc0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008fc2:	4b46      	ldr	r3, [pc, #280]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	43da      	mvns	r2, r3
 8008fce:	4b3e      	ldr	r3, [pc, #248]	@ (80090c8 <UTIL_SEQ_Run+0x1dc>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80090c8 <UTIL_SEQ_Run+0x1dc>)
 8008fd6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008fd8:	2302      	movs	r3, #2
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fdc:	e013      	b.n	8009006 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008fe4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2201      	movs	r2, #1
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43da      	mvns	r2, r3
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	400a      	ands	r2, r1
 8008ffa:	4937      	ldr	r1, [pc, #220]	@ (80090d8 <UTIL_SEQ_Run+0x1ec>)
 8008ffc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009002:	3b01      	subs	r3, #1
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e8      	bne.n	8008fde <UTIL_SEQ_Run+0xf2>
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f383 8810 	msr	PRIMASK, r3
}
 8009016:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009018:	4b30      	ldr	r3, [pc, #192]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a30      	ldr	r2, [pc, #192]	@ (80090e0 <UTIL_SEQ_Run+0x1f4>)
 800901e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009022:	4798      	blx	r3

    local_taskset = TaskSet;
 8009024:	4b28      	ldr	r3, [pc, #160]	@ (80090c8 <UTIL_SEQ_Run+0x1dc>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800902a:	4b28      	ldr	r3, [pc, #160]	@ (80090cc <UTIL_SEQ_Run+0x1e0>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009030:	4b27      	ldr	r3, [pc, #156]	@ (80090d0 <UTIL_SEQ_Run+0x1e4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8009036:	4b27      	ldr	r3, [pc, #156]	@ (80090d4 <UTIL_SEQ_Run+0x1e8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800903c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009040:	401a      	ands	r2, r3
 8009042:	4b20      	ldr	r3, [pc, #128]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4013      	ands	r3, r2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <UTIL_SEQ_Run+0x16c>
 800904c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	4013      	ands	r3, r2
 8009052:	2b00      	cmp	r3, #0
 8009054:	f43f af64 	beq.w	8008f20 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009058:	4b20      	ldr	r3, [pc, #128]	@ (80090dc <UTIL_SEQ_Run+0x1f0>)
 800905a:	f04f 32ff 	mov.w	r2, #4294967295
 800905e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009060:	f000 f938 	bl	80092d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009064:	f3ef 8310 	mrs	r3, PRIMASK
 8009068:	613b      	str	r3, [r7, #16]
  return(result);
 800906a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800906c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800906e:	b672      	cpsid	i
}
 8009070:	bf00      	nop
  local_taskset = TaskSet;
 8009072:	4b15      	ldr	r3, [pc, #84]	@ (80090c8 <UTIL_SEQ_Run+0x1dc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009078:	4b14      	ldr	r3, [pc, #80]	@ (80090cc <UTIL_SEQ_Run+0x1e0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800907e:	4b14      	ldr	r3, [pc, #80]	@ (80090d0 <UTIL_SEQ_Run+0x1e4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	401a      	ands	r2, r3
 800908a:	4b0e      	ldr	r3, [pc, #56]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009094:	4b0f      	ldr	r3, [pc, #60]	@ (80090d4 <UTIL_SEQ_Run+0x1e8>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909a:	4013      	ands	r3, r2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80090a0:	f7f7 fbf3 	bl	800088a <UTIL_SEQ_Idle>
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f383 8810 	msr	PRIMASK, r3
}
 80090ae:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80090b0:	f000 f917 	bl	80092e2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80090b4:	4a03      	ldr	r2, [pc, #12]	@ (80090c4 <UTIL_SEQ_Run+0x1d8>)
 80090b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b8:	6013      	str	r3, [r2, #0]

  return;
 80090ba:	bf00      	nop
}
 80090bc:	3740      	adds	r7, #64	@ 0x40
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	2000002c 	.word	0x2000002c
 80090c8:	2000046c 	.word	0x2000046c
 80090cc:	20000470 	.word	0x20000470
 80090d0:	20000028 	.word	0x20000028
 80090d4:	20000474 	.word	0x20000474
 80090d8:	200004fc 	.word	0x200004fc
 80090dc:	20000478 	.word	0x20000478
 80090e0:	2000047c 	.word	0x2000047c

080090e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f0:	f3ef 8310 	mrs	r3, PRIMASK
 80090f4:	617b      	str	r3, [r7, #20]
  return(result);
 80090f6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80090f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80090fa:	b672      	cpsid	i
}
 80090fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f8f6 	bl	80092f0 <SEQ_BitPosition>
 8009104:	4603      	mov	r3, r0
 8009106:	4619      	mov	r1, r3
 8009108:	4a06      	ldr	r2, [pc, #24]	@ (8009124 <UTIL_SEQ_RegTask+0x40>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f383 8810 	msr	PRIMASK, r3
}
 800911a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800911c:	bf00      	nop
}
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	2000047c 	.word	0x2000047c

08009128 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009132:	f3ef 8310 	mrs	r3, PRIMASK
 8009136:	60fb      	str	r3, [r7, #12]
  return(result);
 8009138:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800913a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800913c:	b672      	cpsid	i
}
 800913e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009140:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <UTIL_SEQ_SetTask+0x50>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4313      	orrs	r3, r2
 8009148:	4a0b      	ldr	r2, [pc, #44]	@ (8009178 <UTIL_SEQ_SetTask+0x50>)
 800914a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800914c:	4a0b      	ldr	r2, [pc, #44]	@ (800917c <UTIL_SEQ_SetTask+0x54>)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	431a      	orrs	r2, r3
 8009158:	4908      	ldr	r1, [pc, #32]	@ (800917c <UTIL_SEQ_SetTask+0x54>)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f383 8810 	msr	PRIMASK, r3
}
 800916a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800916c:	bf00      	nop
}
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	2000046c 	.word	0x2000046c
 800917c:	200004fc 	.word	0x200004fc

08009180 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009188:	f3ef 8310 	mrs	r3, PRIMASK
 800918c:	60fb      	str	r3, [r7, #12]
  return(result);
 800918e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009192:	b672      	cpsid	i
}
 8009194:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	43da      	mvns	r2, r3
 800919a:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <UTIL_SEQ_PauseTask+0x3c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4013      	ands	r3, r2
 80091a0:	4a06      	ldr	r2, [pc, #24]	@ (80091bc <UTIL_SEQ_PauseTask+0x3c>)
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f383 8810 	msr	PRIMASK, r3
}
 80091ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091b0:	bf00      	nop
}
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000028 	.word	0x20000028

080091c0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c8:	f3ef 8310 	mrs	r3, PRIMASK
 80091cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80091ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80091d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091d2:	b672      	cpsid	i
}
 80091d4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80091d6:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <UTIL_SEQ_ResumeTask+0x3c>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4313      	orrs	r3, r2
 80091de:	4a07      	ldr	r2, [pc, #28]	@ (80091fc <UTIL_SEQ_ResumeTask+0x3c>)
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f383 8810 	msr	PRIMASK, r3
}
 80091ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091ee:	bf00      	nop
}
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20000028 	.word	0x20000028

08009200 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	60fb      	str	r3, [r7, #12]
  return(result);
 800920e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009212:	b672      	cpsid	i
}
 8009214:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <UTIL_SEQ_SetEvt+0x3c>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4313      	orrs	r3, r2
 800921e:	4a07      	ldr	r2, [pc, #28]	@ (800923c <UTIL_SEQ_SetEvt+0x3c>)
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f383 8810 	msr	PRIMASK, r3
}
 800922c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800922e:	bf00      	nop
}
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000470 	.word	0x20000470

08009240 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009248:	4b1f      	ldr	r3, [pc, #124]	@ (80092c8 <UTIL_SEQ_WaitEvt+0x88>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800924e:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <UTIL_SEQ_WaitEvt+0x88>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d102      	bne.n	800925e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	e005      	b.n	800926a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800925e:	4b1a      	ldr	r3, [pc, #104]	@ (80092c8 <UTIL_SEQ_WaitEvt+0x88>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2201      	movs	r2, #1
 8009264:	fa02 f303 	lsl.w	r3, r2, r3
 8009268:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800926a:	4b18      	ldr	r3, [pc, #96]	@ (80092cc <UTIL_SEQ_WaitEvt+0x8c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009270:	4a16      	ldr	r2, [pc, #88]	@ (80092cc <UTIL_SEQ_WaitEvt+0x8c>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009276:	e003      	b.n	8009280 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	69f8      	ldr	r0, [r7, #28]
 800927c:	f7f7 fb0c 	bl	8000898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009280:	4b13      	ldr	r3, [pc, #76]	@ (80092d0 <UTIL_SEQ_WaitEvt+0x90>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4013      	ands	r3, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f5      	beq.n	8009278 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800928c:	4a0e      	ldr	r2, [pc, #56]	@ (80092c8 <UTIL_SEQ_WaitEvt+0x88>)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009292:	f3ef 8310 	mrs	r3, PRIMASK
 8009296:	60bb      	str	r3, [r7, #8]
  return(result);
 8009298:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800929a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800929c:	b672      	cpsid	i
}
 800929e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	43da      	mvns	r2, r3
 80092a4:	4b0a      	ldr	r3, [pc, #40]	@ (80092d0 <UTIL_SEQ_WaitEvt+0x90>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4013      	ands	r3, r2
 80092aa:	4a09      	ldr	r2, [pc, #36]	@ (80092d0 <UTIL_SEQ_WaitEvt+0x90>)
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f383 8810 	msr	PRIMASK, r3
}
 80092b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80092ba:	4a04      	ldr	r2, [pc, #16]	@ (80092cc <UTIL_SEQ_WaitEvt+0x8c>)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	6013      	str	r3, [r2, #0]
  return;
 80092c0:	bf00      	nop
}
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000478 	.word	0x20000478
 80092cc:	20000474 	.word	0x20000474
 80092d0:	20000470 	.word	0x20000470

080092d4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80092d8:	bf00      	nop
}
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80092e2:	b480      	push	{r7}
 80092e4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80092e6:	bf00      	nop
}
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009306:	d204      	bcs.n	8009312 <SEQ_BitPosition+0x22>
 8009308:	2310      	movs	r3, #16
 800930a:	73fb      	strb	r3, [r7, #15]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009318:	d205      	bcs.n	8009326 <SEQ_BitPosition+0x36>
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	3308      	adds	r3, #8
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800932c:	d205      	bcs.n	800933a <SEQ_BitPosition+0x4a>
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	3304      	adds	r3, #4
 8009332:	73fb      	strb	r3, [r7, #15]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	0f1b      	lsrs	r3, r3, #28
 800933e:	4a07      	ldr	r2, [pc, #28]	@ (800935c <SEQ_BitPosition+0x6c>)
 8009340:	5cd2      	ldrb	r2, [r2, r3]
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	4413      	add	r3, r2
 8009346:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	f1c3 031f 	rsb	r3, r3, #31
 800934e:	b2db      	uxtb	r3, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	0800969c 	.word	0x0800969c

08009360 <memset>:
 8009360:	4402      	add	r2, r0
 8009362:	4603      	mov	r3, r0
 8009364:	4293      	cmp	r3, r2
 8009366:	d100      	bne.n	800936a <memset+0xa>
 8009368:	4770      	bx	lr
 800936a:	f803 1b01 	strb.w	r1, [r3], #1
 800936e:	e7f9      	b.n	8009364 <memset+0x4>

08009370 <__libc_init_array>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	4d0d      	ldr	r5, [pc, #52]	@ (80093a8 <__libc_init_array+0x38>)
 8009374:	4c0d      	ldr	r4, [pc, #52]	@ (80093ac <__libc_init_array+0x3c>)
 8009376:	1b64      	subs	r4, r4, r5
 8009378:	10a4      	asrs	r4, r4, #2
 800937a:	2600      	movs	r6, #0
 800937c:	42a6      	cmp	r6, r4
 800937e:	d109      	bne.n	8009394 <__libc_init_array+0x24>
 8009380:	4d0b      	ldr	r5, [pc, #44]	@ (80093b0 <__libc_init_array+0x40>)
 8009382:	4c0c      	ldr	r4, [pc, #48]	@ (80093b4 <__libc_init_array+0x44>)
 8009384:	f000 f826 	bl	80093d4 <_init>
 8009388:	1b64      	subs	r4, r4, r5
 800938a:	10a4      	asrs	r4, r4, #2
 800938c:	2600      	movs	r6, #0
 800938e:	42a6      	cmp	r6, r4
 8009390:	d105      	bne.n	800939e <__libc_init_array+0x2e>
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	f855 3b04 	ldr.w	r3, [r5], #4
 8009398:	4798      	blx	r3
 800939a:	3601      	adds	r6, #1
 800939c:	e7ee      	b.n	800937c <__libc_init_array+0xc>
 800939e:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a2:	4798      	blx	r3
 80093a4:	3601      	adds	r6, #1
 80093a6:	e7f2      	b.n	800938e <__libc_init_array+0x1e>
 80093a8:	080096b4 	.word	0x080096b4
 80093ac:	080096b4 	.word	0x080096b4
 80093b0:	080096b4 	.word	0x080096b4
 80093b4:	080096b8 	.word	0x080096b8

080093b8 <memcpy>:
 80093b8:	440a      	add	r2, r1
 80093ba:	4291      	cmp	r1, r2
 80093bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c0:	d100      	bne.n	80093c4 <memcpy+0xc>
 80093c2:	4770      	bx	lr
 80093c4:	b510      	push	{r4, lr}
 80093c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ce:	4291      	cmp	r1, r2
 80093d0:	d1f9      	bne.n	80093c6 <memcpy+0xe>
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <_init>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr

080093e0 <_fini>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr
