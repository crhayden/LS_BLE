
LS_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003834  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003a70  08003a70  00004a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  20000008  08003a74  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000118  20000014  08003a80  00005014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000012c  08003a80  0000512c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001117c  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002333  00000000  00000000  000161c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001390  00000000  00000000  000184f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ef3  00000000  00000000  00019888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020b9e  00000000  00000000  0001a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010c75  00000000  00000000  0003b319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d3f8a  00000000  00000000  0004bf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011ff18  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005220  00000000  00000000  0011ff5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  0012517c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003958 	.word	0x08003958

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003958 	.word	0x08003958

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fb0f 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f80b 	bl	80004c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004aa:	f000 f865 	bl	8000578 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f000 f90b 	bl	80006c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b2:	f000 f87f 	bl	80005b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004b6:	f000 f8bb 	bl	8000630 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ba:	bf00      	nop
 80004bc:	e7fd      	b.n	80004ba <main+0x1c>
	...

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09a      	sub	sp, #104	@ 0x68
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	2248      	movs	r2, #72	@ 0x48
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 fa16 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e6:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <SystemClock_Config+0xb4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80004ee:	4a21      	ldr	r2, [pc, #132]	@ (8000574 <SystemClock_Config+0xb4>)
 80004f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <SystemClock_Config+0xb4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000502:	2323      	movs	r3, #35	@ 0x23
 8000504:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2340      	movs	r3, #64	@ 0x40
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800051a:	2300      	movs	r3, #0
 800051c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800051e:	2360      	movs	r3, #96	@ 0x60
 8000520:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000522:	2300      	movs	r3, #0
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f950 	bl	80017d0 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000536:	f000 f953 	bl	80007e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800053a:	236f      	movs	r3, #111	@ 0x6f
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fcac 	bl	8001eb8 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000566:	f000 f93b 	bl	80007e0 <Error_Handler>
  }
}
 800056a:	bf00      	nop
 800056c:	3768      	adds	r7, #104	@ 0x68
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	58000400 	.word	0x58000400

08000578 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2250      	movs	r2, #80	@ 0x50
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f9bb 	bl	8003900 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800058a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000594:	2310      	movs	r3, #16
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f8cb 	bl	8002736 <HAL_RCCEx_PeriphCLKConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80005a6:	f000 f91b 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	@ 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	@ (800062c <MX_SPI1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_SPI1_Init+0x74>)
 8000602:	2207      	movs	r2, #7
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_SPI1_Init+0x74>)
 800060e:	2208      	movs	r2, #8
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_SPI1_Init+0x74>)
 8000614:	f002 fb16 	bl	8002c44 <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8df 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000030 	.word	0x20000030
 800062c:	40013000 	.word	0x40013000

08000630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000636:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000678:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800067a:	f002 fba6 	bl	8002dca <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 f8ac 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800068c:	f003 f86e 	bl	800376c <HAL_UARTEx_SetTxFifoThreshold>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000696:	f000 f8a3 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 800069e:	f003 f8a3 	bl	80037e8 <HAL_UARTEx_SetRxFifoThreshold>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f89a 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_USART1_UART_Init+0x90>)
 80006ae:	f003 f824 	bl	80036fa <HAL_UARTEx_DisableFifoMode>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f892 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000094 	.word	0x20000094
 80006c4:	40013800 	.word	0x40013800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006dc:	2004      	movs	r0, #4
 80006de:	f7ff fec5 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff fec2 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff febf 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	2010      	movs	r0, #16
 80006f0:	f7ff febc 	bl	800046c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BACKSTRAP_Pin|MB_SW3_Pin|MB_SW1_Pin|MB_SW2_Pin
 80006f4:	2200      	movs	r2, #0
 80006f6:	f240 210f 	movw	r1, #527	@ 0x20f
 80006fa:	4837      	ldr	r0, [pc, #220]	@ (80007d8 <MX_GPIO_Init+0x110>)
 80006fc:	f000 fcbc 	bl	8001078 <HAL_GPIO_WritePin>
                          |BAT_MEAS_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_G_Pin|LED_R_Pin|MOT_IN1_Pin
 8000700:	2200      	movs	r2, #0
 8000702:	f240 7107 	movw	r1, #1799	@ 0x707
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fcb5 	bl	8001078 <HAL_GPIO_WritePin>
                          |MOT_IN2_Pin|MUX_CONTROL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEEPON_GPIO_Port, KEEPON_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	4832      	ldr	r0, [pc, #200]	@ (80007dc <MX_GPIO_Init+0x114>)
 8000714:	f000 fcb0 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_IRQ2_Pin ACC_IRQ1_Pin */
  GPIO_InitStruct.Pin = ACC_IRQ2_Pin|ACC_IRQ1_Pin;
 8000718:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800071c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	482a      	ldr	r0, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0x110>)
 800072e:	f000 fb33 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKSTRAP_Pin MB_SW3_Pin MB_SW1_Pin MB_SW2_Pin
                           BAT_MEAS_EN_Pin */
  GPIO_InitStruct.Pin = BACKSTRAP_Pin|MB_SW3_Pin|MB_SW1_Pin|MB_SW2_Pin
 8000732:	f240 230f 	movw	r3, #527	@ 0x20f
 8000736:	607b      	str	r3, [r7, #4]
                          |BAT_MEAS_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x110>)
 800074a:	f000 fb25 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin MOT_IN1_Pin
                           MOT_IN2_Pin MUX_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin|MOT_IN1_Pin
 800074e:	f240 7307 	movw	r3, #1799	@ 0x707
 8000752:	607b      	str	r3, [r7, #4]
                          |MOT_IN2_Pin|MUX_CONTROL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 fb16 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	2308      	movs	r3, #8
 800076e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000770:	2303      	movs	r3, #3
 8000772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f000 fb0a 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEEPON_Pin */
  GPIO_InitStruct.Pin = KEEPON_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEEPON_GPIO_Port, &GPIO_InitStruct);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4810      	ldr	r0, [pc, #64]	@ (80007dc <MX_GPIO_Init+0x114>)
 800079a:	f000 fafd 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_FAULT_Pin */
  GPIO_InitStruct.Pin = MOT_FAULT_Pin;
 800079e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MOT_FAULT_GPIO_Port, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f000 faef 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BC_STATUS_Pin */
  GPIO_InitStruct.Pin = BC_STATUS_Pin;
 80007ba:	2310      	movs	r3, #16
 80007bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BC_STATUS_GPIO_Port, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_GPIO_Init+0x110>)
 80007cc:	f000 fae4 	bl	8000d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	48000400 	.word	0x48000400
 80007dc:	48001000 	.word	0x48001000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <LL_AHB2_GRP1_EnableClock>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000810:	68fb      	ldr	r3, [r7, #12]
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800081e:	b480      	push	{r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800082c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800083a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4013      	ands	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <HAL_SPI_MspInit+0x5c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d117      	bne.n	80008b2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000882:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000886:	f7ff ffca 	bl	800081e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff ffae 	bl	80007ec <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000890:	23f0      	movs	r3, #240	@ 0xf0
 8000892:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a0:	2305      	movs	r3, #5
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ae:	f000 fa73 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40013000 	.word	0x40013000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09c      	sub	sp, #112	@ 0x70
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2250      	movs	r2, #80	@ 0x50
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 f80d 	bl	8003900 <memset>
  if(huart->Instance==USART1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d124      	bne.n	800093a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 ff1a 	bl	8002736 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000908:	f7ff ff6a 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000910:	f7ff ff85 	bl	800081e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff ff69 	bl	80007ec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800091a:	23c0      	movs	r3, #192	@ 0xc0
 800091c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092a:	2307      	movs	r3, #7
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <HAL_UART_MspInit+0x88>)
 8000936:	f000 fa2f 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800093a:	bf00      	nop
 800093c:	3770      	adds	r7, #112	@ 0x70
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40013800 	.word	0x40013800
 8000948:	48000400 	.word	0x48000400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f8e9 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009b0:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <SystemInit+0x98>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <SystemInit+0x98>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009d4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80009d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80009da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <SystemInit+0x9c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009f6:	f023 0305 	bic.w	r3, r3, #5
 80009fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a16:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <SystemInit+0xa0>)
 8000a18:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <SystemInit+0xa0>)
 8000a20:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	faf6fefb 	.word	0xfaf6fefb
 8000a4c:	22041000 	.word	0x22041000

08000a50 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a54:	3304      	adds	r3, #4

08000a56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a5a:	d3f9      	bcc.n	8000a50 <CopyDataInit>
  bx lr
 8000a5c:	4770      	bx	lr

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a60:	3004      	adds	r0, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>
  bx lr
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff ff9e 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <LoopForever+0x6>)
 8000a72:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <LoopForever+0xa>)
 8000a74:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <LoopForever+0xe>)
 8000a76:	2300      	movs	r3, #0
 8000a78:	f7ff ffed 	bl	8000a56 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <LoopForever+0x12>)
 8000a7e:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <LoopForever+0x16>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <LoopForever+0x1a>)
 8000a82:	2300      	movs	r3, #0
 8000a84:	f7ff ffe7 	bl	8000a56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <LoopForever+0x1e>)
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <LoopForever+0x22>)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f7ff ffe8 	bl	8000a62 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a92:	f002 ff3d 	bl	8003910 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a96:	f7ff fd02 	bl	800049e <main>

08000a9a <LoopForever>:

LoopForever:
  b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	08003a74 	.word	0x08003a74
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000aac:	20030000 	.word	0x20030000
 8000ab0:	20030000 	.word	0x20030000
 8000ab4:	08003a80 	.word	0x08003a80
  INIT_BSS _sbss, _ebss
 8000ab8:	20000014 	.word	0x20000014
 8000abc:	2000012c 	.word	0x2000012c

08000ac0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f92a 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	f000 f80f 	bl	8000b04 <HAL_InitTick>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	e001      	b.n	8000af6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af2:	f7ff fead 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58004000 	.word	0x58004000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d024      	beq.n	8000b62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b18:	f001 fb7c 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_InitTick+0x6c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f924 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d809      	bhi.n	8000b56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f8fe 	bl	8000d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <HAL_InitTick+0x70>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e004      	b.n	8000b66 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000010 	.word	0x20000010
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000128 	.word	0x20000128

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000128 	.word	0x20000128

08000bb8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTickPrio+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000000c 	.word	0x2000000c

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	@ (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff47 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff90 	bl	8000c88 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5f 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb2 	bl	8000cf0 <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e14c      	b.n	8001042 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 813e 	beq.w	800103c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	f003 0201 	and.w	r2, r3, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0203 	and.w	r2, r3, #3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8098 	beq.w	800103c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0c:	4a54      	ldr	r2, [pc, #336]	@ (8001060 <HAL_GPIO_Init+0x2c8>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f36:	d019      	beq.n	8000f6c <HAL_GPIO_Init+0x1d4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <HAL_GPIO_Init+0x2cc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d013      	beq.n	8000f68 <HAL_GPIO_Init+0x1d0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x2d0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00d      	beq.n	8000f64 <HAL_GPIO_Init+0x1cc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2d4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x1c8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a47      	ldr	r2, [pc, #284]	@ (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d101      	bne.n	8000f5c <HAL_GPIO_Init+0x1c4>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e008      	b.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f60:	2303      	movs	r3, #3
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7e:	4938      	ldr	r1, [pc, #224]	@ (8001060 <HAL_GPIO_Init+0x2c8>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb0:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fda:	4a26      	ldr	r2, [pc, #152]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001006:	4a1b      	ldr	r2, [pc, #108]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8001010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_GPIO_Init+0x2dc>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	f47f aeab 	bne.w	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40010000 	.word	0x40010000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	58000800 	.word	0x58000800

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	58000400 	.word	0x58000400

080010c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	58000400 	.word	0x58000400

080010e4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80010f6:	d101      	bne.n	80010fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001156:	d101      	bne.n	800115c <LL_RCC_HSE_IsReady+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_RCC_HSE_IsReady+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800118a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001198:	6013      	str	r3, [r2, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b6:	d101      	bne.n	80011bc <LL_RCC_HSI_IsReady+0x18>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <LL_RCC_HSI_IsReady+0x1a>
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80011d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b02      	cmp	r3, #2
 8001248:	d101      	bne.n	800124e <LL_RCC_HSI48_IsReady+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_RCC_HSI48_IsReady+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d101      	bne.n	80012fa <LL_RCC_LSE_IsReady+0x18>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_RCC_LSE_IsReady+0x1a>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d101      	bne.n	8001362 <LL_RCC_LSI1_IsReady+0x18>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <LL_RCC_LSI1_IsReady+0x1a>
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800137a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800139c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d101      	bne.n	80013ca <LL_RCC_LSI2_IsReady+0x18>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_RCC_LSI2_IsReady+0x1a>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013f2:	4313      	orrs	r3, r2
 80013f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d101      	bne.n	8001456 <LL_RCC_MSI_IsReady+0x16>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_RCC_MSI_IsReady+0x18>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800146a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800149a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2bb0      	cmp	r3, #176	@ 0xb0
 80014a0:	d901      	bls.n	80014a6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80014a2:	23b0      	movs	r3, #176	@ 0xb0
 80014a4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 0203 	bic.w	r2, r3, #3
 80014f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001552:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001556:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800155a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4313      	orrs	r3, r2
 8001562:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001582:	f023 020f 	bic.w	r2, r3, #15
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800158e:	4313      	orrs	r3, r2
 8001590:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001610:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001680:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016a2:	d101      	bne.n	80016a8 <LL_RCC_PLL_IsReady+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_RCC_PLL_IsReady+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0303 	and.w	r3, r3, #3
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001728:	d101      	bne.n	800172e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001742:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800174e:	d101      	bne.n	8001754 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001768:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001774:	d101      	bne.n	800177a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001798:	d101      	bne.n	800179e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017bc:	d101      	bne.n	80017c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08d      	sub	sp, #52	@ 0x34
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e363      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 808d 	beq.w	800190a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f0:	f7ff fe89 	bl	8001506 <LL_RCC_GetSysClkSource>
 80017f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f6:	f7ff ff82 	bl	80016fe <LL_RCC_PLL_GetMainSource>
 80017fa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x3e>
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d147      	bne.n	8001898 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	2b01      	cmp	r3, #1
 800180c:	d144      	bne.n	8001898 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e347      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800181e:	f7ff fe34 	bl	800148a <LL_RCC_MSI_GetRange>
 8001822:	4603      	mov	r3, r0
 8001824:	429c      	cmp	r4, r3
 8001826:	d914      	bls.n	8001852 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fd31 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e336      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe0e 	bl	8001462 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe32 	bl	80014b4 <LL_RCC_MSI_SetCalibTrimming>
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe03 	bl	8001462 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe27 	bl	80014b4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd12 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e317      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800187a:	f000 fccb 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800187e:	4603      	mov	r3, r0
 8001880:	4aa4      	ldr	r2, [pc, #656]	@ (8001b14 <HAL_RCC_OscConfig+0x344>)
 8001882:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001884:	4ba4      	ldr	r3, [pc, #656]	@ (8001b18 <HAL_RCC_OscConfig+0x348>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f93b 	bl	8000b04 <HAL_InitTick>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d039      	beq.n	8001908 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e308      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a0:	f7ff fdb0 	bl	8001404 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a4:	f7ff f97c 	bl	8000ba0 <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ac:	f7ff f978 	bl	8000ba0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e2f5      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018be:	f7ff fdbf 	bl	8001440 <LL_RCC_MSI_IsReady>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f1      	beq.n	80018ac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fdc8 	bl	8001462 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fdec 	bl	80014b4 <LL_RCC_MSI_SetCalibTrimming>
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018de:	f7ff fda0 	bl	8001422 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f95d 	bl	8000ba0 <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ea:	f7ff f959 	bl	8000ba0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e2d6      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018fc:	f7ff fda0 	bl	8001440 <LL_RCC_MSI_IsReady>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f1      	bne.n	80018ea <HAL_RCC_OscConfig+0x11a>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001908:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d047      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	f7ff fdf6 	bl	8001506 <LL_RCC_GetSysClkSource>
 800191a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191c:	f7ff feef 	bl	80016fe <LL_RCC_PLL_GetMainSource>
 8001920:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	2b08      	cmp	r3, #8
 8001926:	d005      	beq.n	8001934 <HAL_RCC_OscConfig+0x164>
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d134      	bne.n	80019a6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e2b4      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x180>
 800194a:	f7ff fbdd 	bl	8001108 <LL_RCC_HSE_Enable>
 800194e:	e001      	b.n	8001954 <HAL_RCC_OscConfig+0x184>
 8001950:	f7ff fbe9 	bl	8001126 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d012      	beq.n	8001982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f920 	bl	8000ba0 <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f91c 	bl	8000ba0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e299      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001976:	f7ff fbe5 	bl	8001144 <LL_RCC_HSE_IsReady>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f1      	beq.n	8001964 <HAL_RCC_OscConfig+0x194>
 8001980:	e011      	b.n	80019a6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff f90d 	bl	8000ba0 <HAL_GetTick>
 8001986:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198a:	f7ff f909 	bl	8000ba0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	@ 0x64
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e286      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800199c:	f7ff fbd2 	bl	8001144 <LL_RCC_HSE_IsReady>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f1      	bne.n	800198a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	f7ff fda8 	bl	8001506 <LL_RCC_GetSysClkSource>
 80019b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b8:	f7ff fea1 	bl	80016fe <LL_RCC_PLL_GetMainSource>
 80019bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x200>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d10e      	bne.n	80019e8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e266      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fbf1 	bl	80011c8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019e6:	e031      	b.n	8001a4c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d019      	beq.n	8001a24 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	f7ff fbba 	bl	8001168 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8d4 	bl	8000ba0 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff f8d0 	bl	8000ba0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e24d      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a0e:	f7ff fbc9 	bl	80011a4 <LL_RCC_HSI_IsReady>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f1      	beq.n	80019fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fbd3 	bl	80011c8 <LL_RCC_HSI_SetCalibTrimming>
 8001a22:	e013      	b.n	8001a4c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a24:	f7ff fbaf 	bl	8001186 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8ba 	bl	8000ba0 <HAL_GetTick>
 8001a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff f8b6 	bl	8000ba0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e233      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a42:	f7ff fbaf 	bl	80011a4 <LL_RCC_HSI_IsReady>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f1      	bne.n	8001a30 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80a3 	beq.w	8001bac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d076      	beq.n	8001b5c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d046      	beq.n	8001b08 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001a7a:	f7ff fc66 	bl	800134a <LL_RCC_LSI1_IsReady>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d113      	bne.n	8001aac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001a84:	f7ff fc3f 	bl	8001306 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a88:	f7ff f88a 	bl	8000ba0 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a90:	f7ff f886 	bl	8000ba0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e203      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001aa2:	f7ff fc52 	bl	800134a <LL_RCC_LSI1_IsReady>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f1      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001aac:	f7ff fc5f 	bl	800136e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f876 	bl	8000ba0 <HAL_GetTick>
 8001ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ab8:	f7ff f872 	bl	8000ba0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1ef      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001aca:	f7ff fc72 	bl	80013b2 <LL_RCC_LSI2_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc7c 	bl	80013d6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001ade:	f7ff fc23 	bl	8001328 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f85d 	bl	8000ba0 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001aea:	f7ff f859 	bl	8000ba0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1d6      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001afc:	f7ff fc25 	bl	800134a <LL_RCC_LSI1_IsReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f1      	bne.n	8001aea <HAL_RCC_OscConfig+0x31a>
 8001b06:	e051      	b.n	8001bac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001b08:	f7ff fbfd 	bl	8001306 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f848 	bl	8000ba0 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b12:	e00c      	b.n	8001b2e <HAL_RCC_OscConfig+0x35e>
 8001b14:	20000008 	.word	0x20000008
 8001b18:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b1c:	f7ff f840 	bl	8000ba0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1bd      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b2e:	f7ff fc0c 	bl	800134a <LL_RCC_LSI1_IsReady>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f1      	beq.n	8001b1c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001b38:	f7ff fc2a 	bl	8001390 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b3e:	f7ff f82f 	bl	8000ba0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1ac      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b50:	f7ff fc2f 	bl	80013b2 <LL_RCC_LSI2_IsReady>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f1      	bne.n	8001b3e <HAL_RCC_OscConfig+0x36e>
 8001b5a:	e027      	b.n	8001bac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001b5c:	f7ff fc18 	bl	8001390 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f81e 	bl	8000ba0 <HAL_GetTick>
 8001b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b68:	f7ff f81a 	bl	8000ba0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e197      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001b7a:	f7ff fc1a 	bl	80013b2 <LL_RCC_LSI2_IsReady>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f1      	bne.n	8001b68 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001b84:	f7ff fbd0 	bl	8001328 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f80a 	bl	8000ba0 <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b90:	f7ff f806 	bl	8000ba0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e183      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001ba2:	f7ff fbd2 	bl	800134a <LL_RCC_LSI1_IsReady>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f1      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb8:	4ba7      	ldr	r3, [pc, #668]	@ (8001e58 <HAL_RCC_OscConfig+0x688>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d114      	bne.n	8001bee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001bc4:	f7ff fa70 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe ffea 	bl	8000ba0 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7fe ffe6 	bl	8000ba0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e163      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	4b9d      	ldr	r3, [pc, #628]	@ (8001e58 <HAL_RCC_OscConfig+0x688>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0x42c>
 8001bf6:	f7ff fb30 	bl	800125a <LL_RCC_LSE_Enable>
 8001bfa:	e00c      	b.n	8001c16 <HAL_RCC_OscConfig+0x446>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d104      	bne.n	8001c0e <HAL_RCC_OscConfig+0x43e>
 8001c04:	f7ff fb4b 	bl	800129e <LL_RCC_LSE_EnableBypass>
 8001c08:	f7ff fb27 	bl	800125a <LL_RCC_LSE_Enable>
 8001c0c:	e003      	b.n	8001c16 <HAL_RCC_OscConfig+0x446>
 8001c0e:	f7ff fb35 	bl	800127c <LL_RCC_LSE_Disable>
 8001c12:	f7ff fb55 	bl	80012c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d014      	beq.n	8001c48 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ffbf 	bl	8000ba0 <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7fe ffbb 	bl	8000ba0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e136      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c3c:	f7ff fb51 	bl	80012e2 <LL_RCC_LSE_IsReady>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0ef      	beq.n	8001c26 <HAL_RCC_OscConfig+0x456>
 8001c46:	e013      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7fe ffaa 	bl	8000ba0 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7fe ffa6 	bl	8000ba0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e121      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c66:	f7ff fb3c 	bl	80012e2 <LL_RCC_LSE_IsReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ef      	bne.n	8001c50 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d02c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c84:	f7ff fab5 	bl	80011f2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7fe ff8a 	bl	8000ba0 <HAL_GetTick>
 8001c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c90:	f7fe ff86 	bl	8000ba0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e103      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ca2:	f7ff fac8 	bl	8001236 <LL_RCC_HSI48_IsReady>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f1      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4c0>
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cae:	f7ff fab1 	bl	8001214 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ff75 	bl	8000ba0 <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cba:	f7fe ff71 	bl	8000ba0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0ee      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001ccc:	f7ff fab3 	bl	8001236 <LL_RCC_HSI48_IsReady>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f1      	bne.n	8001cba <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80e4 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce0:	f7ff fc11 	bl	8001506 <LL_RCC_GetSysClkSource>
 8001ce4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 80b4 	bne.w	8001e60 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d123      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d11c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d114      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d05d      	beq.n	8001e0a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d058      	beq.n	8001e06 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0a1      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d66:	f7ff fc84 	bl	8001672 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d6a:	f7fe ff19 	bl	8000ba0 <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe ff15 	bl	8000ba0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e092      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_RCC_OscConfig+0x68c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001daa:	0212      	lsls	r2, r2, #8
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc8:	f7ff fc44 	bl	8001654 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ddc:	f7fe fee0 	bl	8000ba0 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fedc 	bl	8000ba0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e059      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	e050      	b.n	8001ea8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e04f      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d147      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	f7ff fc1c 	bl	8001654 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e2c:	f7fe feb8 	bl	8000ba0 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe feb4 	bl	8000ba0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e031      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ef      	beq.n	8001e34 <HAL_RCC_OscConfig+0x664>
 8001e54:	e028      	b.n	8001ea8 <HAL_RCC_OscConfig+0x6d8>
 8001e56:	bf00      	nop
 8001e58:	58000400 	.word	0x58000400
 8001e5c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d01e      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	f7ff fc04 	bl	8001672 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fe99 	bl	8000ba0 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fe95 	bl	8000ba0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e012      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ef      	bne.n	8001e72 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_OscConfig+0x6e4>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
 8001ea2:	e001      	b.n	8001ea8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3734      	adds	r7, #52	@ 0x34
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	eefefffc 	.word	0xeefefffc

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e12d      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b98      	ldr	r3, [pc, #608]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d91b      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b95      	ldr	r3, [pc, #596]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0207 	bic.w	r2, r3, #7
 8001ee2:	4993      	ldr	r1, [pc, #588]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eea:	f7fe fe59 	bl	8000ba0 <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ef2:	f7fe fe55 	bl	8000ba0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e111      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	4b8a      	ldr	r3, [pc, #552]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fafb 	bl	800151e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f28:	f7fe fe3a 	bl	8000ba0 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f30:	f7fe fe36 	bl	8000ba0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0f2      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f42:	f7ff fbe8 	bl	8001716 <LL_RCC_IsActiveFlag_HPRE>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f1      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d016      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff faf2 	bl	8001546 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fe1d 	bl	8000ba0 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f6a:	f7fe fe19 	bl	8000ba0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0d5      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f7c:	f7ff fbdd 	bl	800173a <LL_RCC_IsActiveFlag_C2HPRE>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f1      	beq.n	8001f6a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff faeb 	bl	8001572 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fe00 	bl	8000ba0 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fa4:	f7fe fdfc 	bl	8000ba0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0b8      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fb6:	f7ff fbd3 	bl	8001760 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f1      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d016      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fae5 	bl	80015a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fd6:	f7fe fde3 	bl	8000ba0 <HAL_GetTick>
 8001fda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fde:	f7fe fddf 	bl	8000ba0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e09b      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ff0:	f7ff fbc9 	bl	8001786 <LL_RCC_IsActiveFlag_PPRE1>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f1      	beq.n	8001fde <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d017      	beq.n	8002036 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fadb 	bl	80015c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002012:	f7fe fdc5 	bl	8000ba0 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800201a:	f7fe fdc1 	bl	8000ba0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e07d      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800202c:	f7ff fbbd 	bl	80017aa <LL_RCC_IsActiveFlag_PPRE2>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f1      	beq.n	800201a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d043      	beq.n	80020ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d106      	bne.n	8002058 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800204a:	f7ff f87b 	bl	8001144 <LL_RCC_HSE_IsReady>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11e      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e067      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d106      	bne.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002060:	f7ff fb16 	bl	8001690 <LL_RCC_PLL_IsReady>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e05c      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002076:	f7ff f9e3 	bl	8001440 <LL_RCC_MSI_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e051      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002084:	f7ff f88e 	bl	80011a4 <LL_RCC_HSI_IsReady>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04a      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fa21 	bl	80014de <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209c:	f7fe fd80 	bl	8000ba0 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fd7c 	bl	8000ba0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e036      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	f7ff fa24 	bl	8001506 <LL_RCC_GetSysClkSource>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d1ec      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d21b      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d8:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0207 	bic.w	r2, r3, #7
 80020e0:	4913      	ldr	r1, [pc, #76]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e8:	f7fe fd5a 	bl	8000ba0 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020f0:	f7fe fd56 	bl	8000ba0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e012      	b.n	8002128 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_RCC_ClockConfig+0x278>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d1ef      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002110:	f000 f880 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002114:	4603      	mov	r3, r0
 8002116:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <HAL_RCC_ClockConfig+0x27c>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800211a:	f7fe fd4d 	bl	8000bb8 <HAL_GetTickPrio>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fcef 	bl	8000b04 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	58004000 	.word	0x58004000
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	f7ff f9e2 	bl	8001506 <LL_RCC_GetSysClkSource>
 8002142:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800214a:	f7ff f99e 	bl	800148a <LL_RCC_MSI_GetRange>
 800214e:	4603      	mov	r3, r0
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e04b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d102      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e045      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b08      	cmp	r3, #8
 8002170:	d10a      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002172:	f7fe ffb7 	bl	80010e4 <LL_RCC_HSE_IsEnabledDiv2>
 8002176:	4603      	mov	r3, r0
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_RCC_GetSysClockFreq+0xd4>)
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e03a      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e037      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002188:	f7ff fab9 	bl	80016fe <LL_RCC_PLL_GetMainSource>
 800218c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d003      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x64>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 800219e:	60bb      	str	r3, [r7, #8]
        break;
 80021a0:	e015      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021a2:	f7fe ff9f 	bl	80010e4 <LL_RCC_HSE_IsEnabledDiv2>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021ac:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_RCC_GetSysClockFreq+0xd4>)
 80021ae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021b0:	e00d      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_GetSysClockFreq+0xd8>)
 80021b4:	60bb      	str	r3, [r7, #8]
        break;
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80021b8:	f7ff f967 	bl	800148a <LL_RCC_MSI_GetRange>
 80021bc:	4603      	mov	r3, r0
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	60bb      	str	r3, [r7, #8]
        break;
 80021cc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80021ce:	f7ff fa71 	bl	80016b4 <LL_RCC_PLL_GetN>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	fb03 f402 	mul.w	r4, r3, r2
 80021da:	f7ff fa84 	bl	80016e6 <LL_RCC_PLL_GetDivider>
 80021de:	4603      	mov	r3, r0
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	3301      	adds	r3, #1
 80021e4:	fbb4 f4f3 	udiv	r4, r4, r3
 80021e8:	f7ff fa71 	bl	80016ce <LL_RCC_PLL_GetR>
 80021ec:	4603      	mov	r3, r0
 80021ee:	0f5b      	lsrs	r3, r3, #29
 80021f0:	3301      	adds	r3, #1
 80021f2:	fbb4 f3f3 	udiv	r3, r4, r3
 80021f6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	080039fc 	.word	0x080039fc
 8002208:	00f42400 	.word	0x00f42400
 800220c:	003d0900 	.word	0x003d0900
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b598      	push	{r3, r4, r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002218:	f7ff ff8e 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800221c:	4604      	mov	r4, r0
 800221e:	f7ff f9e7 	bl	80015f0 <LL_RCC_GetAHBPrescaler>
 8002222:	4603      	mov	r3, r0
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a03      	ldr	r2, [pc, #12]	@ (8002238 <HAL_RCC_GetHCLKFreq+0x24>)
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd98      	pop	{r3, r4, r7, pc}
 8002238:	0800399c 	.word	0x0800399c

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b598      	push	{r3, r4, r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002240:	f7ff ffe8 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002244:	4604      	mov	r4, r0
 8002246:	f7ff f9ed 	bl	8001624 <LL_RCC_GetAPB1Prescaler>
 800224a:	4603      	mov	r3, r0
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd98      	pop	{r3, r4, r7, pc}
 8002264:	080039dc 	.word	0x080039dc

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b598      	push	{r3, r4, r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800226c:	f7ff ffd2 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002270:	4604      	mov	r4, r0
 8002272:	f7ff f9e3 	bl	800163c <LL_RCC_GetAPB2Prescaler>
 8002276:	4603      	mov	r3, r0
 8002278:	0adb      	lsrs	r3, r3, #11
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa24 f303 	lsr.w	r3, r4, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd98      	pop	{r3, r4, r7, pc}
 8002290:	080039dc 	.word	0x080039dc

08002294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2bb0      	cmp	r3, #176	@ 0xb0
 80022a0:	d903      	bls.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e007      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80022b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80022ba:	f7ff f9a5 	bl	8001608 <LL_RCC_GetAHB4Prescaler>
 80022be:	4603      	mov	r3, r0
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9c      	lsrs	r4, r3, #18
 80022de:	f7fe fef3 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4619      	mov	r1, r3
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 f80c 	bl	8002304 <RCC_SetFlashLatency>
 80022ec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	080039fc 	.word	0x080039fc
 80022fc:	0800399c 	.word	0x0800399c
 8002300:	431bde83 	.word	0x431bde83

08002304 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b093      	sub	sp, #76	@ 0x4c
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800230e:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <RCC_SetFlashLatency+0xe8>)
 8002310:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800231a:	4a35      	ldr	r2, [pc, #212]	@ (80023f0 <RCC_SetFlashLatency+0xec>)
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	ca07      	ldmia	r2, {r0, r1, r2}
 8002322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002326:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <RCC_SetFlashLatency+0xf0>)
 8002328:	f107 040c 	add.w	r4, r7, #12
 800232c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002332:	2300      	movs	r3, #0
 8002334:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800233c:	d11a      	bne.n	8002374 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800233e:	2300      	movs	r3, #0
 8002340:	643b      	str	r3, [r7, #64]	@ 0x40
 8002342:	e013      	b.n	800236c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	3348      	adds	r3, #72	@ 0x48
 800234a:	443b      	add	r3, r7
 800234c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d807      	bhi.n	8002366 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3348      	adds	r3, #72	@ 0x48
 800235c:	443b      	add	r3, r7
 800235e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002364:	e020      	b.n	80023a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002368:	3301      	adds	r3, #1
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
 800236c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800236e:	2b03      	cmp	r3, #3
 8002370:	d9e8      	bls.n	8002344 <RCC_SetFlashLatency+0x40>
 8002372:	e019      	b.n	80023a8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002374:	2300      	movs	r3, #0
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002378:	e013      	b.n	80023a2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800237a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3348      	adds	r3, #72	@ 0x48
 8002380:	443b      	add	r3, r7
 8002382:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d807      	bhi.n	800239c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800238c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3348      	adds	r3, #72	@ 0x48
 8002392:	443b      	add	r3, r7
 8002394:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002398:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800239a:	e005      	b.n	80023a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239e:	3301      	adds	r3, #1
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d9e8      	bls.n	800237a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <RCC_SetFlashLatency+0xf4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	4911      	ldr	r1, [pc, #68]	@ (80023f8 <RCC_SetFlashLatency+0xf4>)
 80023b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023b8:	f7fe fbf2 	bl	8000ba0 <HAL_GetTick>
 80023bc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023be:	e008      	b.n	80023d2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023c0:	f7fe fbee 	bl	8000ba0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e007      	b.n	80023e2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <RCC_SetFlashLatency+0xf4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1ef      	bne.n	80023c0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	374c      	adds	r7, #76	@ 0x4c
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08003970 	.word	0x08003970
 80023f0:	08003980 	.word	0x08003980
 80023f4:	0800398c 	.word	0x0800398c
 80023f8:	58004000 	.word	0x58004000

080023fc <LL_RCC_LSE_IsEnabled>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_RCC_LSE_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_RCC_LSE_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_LSE_IsReady>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d101      	bne.n	8002438 <LL_RCC_LSE_IsReady+0x18>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <LL_RCC_LSE_IsReady+0x1a>
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_RCC_SetRFWKPClockSource>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002454:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_RCC_SetSMPSClockSource>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_RCC_SetSMPSPrescaler>:
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_SetUSARTClockSource>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f023 0203 	bic.w	r2, r3, #3
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_SetLPUARTClockSource>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_RCC_SetI2CClockSource>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002524:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800253c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_RCC_SetLPTIMClockSource>:
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_SetSAIClockSource>:
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800259a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_SetRNGClockSource>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80025c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_SetCLK48ClockSource>:
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_RCC_SetUSBClockSource>:
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffe3 	bl	80025de <LL_RCC_SetCLK48ClockSource>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <LL_RCC_SetADCClockSource>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_RCC_SetRTCClockSource>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_RCC_GetRTCClockSource>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_RCC_ForceBackupDomainReset>:
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80026b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_PLLSAI1_Enable>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_PLLSAI1_Disable>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_RCC_PLLSAI1_IsReady>:
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002724:	d101      	bne.n	800272a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b088      	sub	sp, #32
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800273e:	2300      	movs	r3, #0
 8002740:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002742:	2300      	movs	r3, #0
 8002744:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d034      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800275a:	d021      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800275c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002760:	d81b      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002766:	d01d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002768:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800276c:	d815      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002776:	d110      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002788:	e00d      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f947 	bl	8002a22 <RCCEx_PLLSAI1_ConfigNP>
 8002794:	4603      	mov	r3, r0
 8002796:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002798:	e005      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	77fb      	strb	r3, [r7, #31]
        break;
 800279e:	e002      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80027a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fee8 	bl	8002586 <LL_RCC_SetSAIClockSource>
 80027b6:	e001      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d046      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80027c8:	f7ff ff56 	bl	8002678 <LL_RCC_GetRTCClockSource>
 80027cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d03c      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80027d8:	f7fe fc66 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff30 	bl	800264c <LL_RCC_SetRTCClockSource>
 80027ec:	e02e      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80027f8:	f7ff ff4b 	bl	8002692 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80027fc:	f7ff ff5a 	bl	80026b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800280e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002818:	f7ff fdf0 	bl	80023fc <LL_RCC_LSE_IsEnabled>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d114      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002822:	f7fe f9bd 	bl	8000ba0 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002828:	e00b      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe f9b9 	bl	8000ba0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d902      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	77fb      	strb	r3, [r7, #31]
              break;
 8002840:	e004      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002842:	f7ff fded 	bl	8002420 <LL_RCC_LSE_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d1ee      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800284c:	7ffb      	ldrb	r3, [r7, #31]
 800284e:	77bb      	strb	r3, [r7, #30]
 8002850:	e001      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fe2a 	bl	80024c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe35 	bl	80024ec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fe5d 	bl	8002552 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fe52 	bl	8002552 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe2a 	bl	8002518 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fe1f 	bl	8002518 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d022      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fe8d 	bl	800260a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f8:	d107      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002904:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002908:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002912:	d10b      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f8dd 	bl	8002ad8 <RCCEx_PLLSAI1_ConfigNQ>
 800291e:	4603      	mov	r3, r0
 8002920:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02b      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800294a:	d003      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fe2a 	bl	80025b2 <LL_RCC_SetRNGClockSource>
 800295e:	e00a      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	2000      	movs	r0, #0
 800296c:	f7ff fe21 	bl	80025b2 <LL_RCC_SetRNGClockSource>
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fe34 	bl	80025de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800297e:	d107      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fe3d 	bl	8002620 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ae:	d107      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f8dd 	bl	8002b8e <RCCEx_PLLSAI1_ConfigNR>
 80029d4:	4603      	mov	r3, r0
 80029d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029d8:	7ffb      	ldrb	r3, [r7, #31]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fd26 	bl	8002444 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fd45 	bl	8002498 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fd2c 	bl	8002470 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002a18:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002a2e:	f7ff fe61 	bl	80026f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a32:	f7fe f8b5 	bl	8000ba0 <HAL_GetTick>
 8002a36:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002a38:	e009      	b.n	8002a4e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a3a:	f7fe f8b1 	bl	8000ba0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e004      	b.n	8002a58 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002a4e:	f7ff fe60 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d137      	bne.n	8002ace <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002a8c:	f7ff fe23 	bl	80026d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a90:	f7fe f886 	bl	8000ba0 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002a96:	e009      	b.n	8002aac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a98:	f7fe f882 	bl	8000ba0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d902      	bls.n	8002aac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aaa:	e004      	b.n	8002ab6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002aac:	f7ff fe31 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d1f0      	bne.n	8002a98 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aca:	4313      	orrs	r3, r2
 8002acc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ae4:	f7ff fe06 	bl	80026f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ae8:	f7fe f85a 	bl	8000ba0 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af0:	f7fe f856 	bl	8000ba0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
      break;
 8002b02:	e004      	b.n	8002b0e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b04:	f7ff fe05 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d137      	bne.n	8002b84 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b42:	f7ff fdc8 	bl	80026d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fe f82b 	bl	8000ba0 <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b4c:	e009      	b.n	8002b62 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b4e:	f7fe f827 	bl	8000ba0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b60:	e004      	b.n	8002b6c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b62:	f7ff fdd6 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1f0      	bne.n	8002b4e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b80:	4313      	orrs	r3, r2
 8002b82:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002b9a:	f7ff fdab 	bl	80026f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b9e:	f7fd ffff 	bl	8000ba0 <HAL_GetTick>
 8002ba2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ba4:	e009      	b.n	8002bba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba6:	f7fd fffb 	bl	8000ba0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d902      	bls.n	8002bba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e004      	b.n	8002bc4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bba:	f7ff fdaa 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d137      	bne.n	8002c3a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002bf8:	f7ff fd6d 	bl	80026d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fd ffd0 	bl	8000ba0 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c02:	e009      	b.n	8002c18 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c04:	f7fd ffcc 	bl	8000ba0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d902      	bls.n	8002c18 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	73fb      	strb	r3, [r7, #15]
        break;
 8002c16:	e004      	b.n	8002c22 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c18:	f7ff fd7b 	bl	8002712 <LL_RCC_PLLSAI1_IsReady>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d1f0      	bne.n	8002c04 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d108      	bne.n	8002c3a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c36:	4313      	orrs	r3, r2
 8002c38:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e095      	b.n	8002d82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c66:	d009      	beq.n	8002c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fde2 	bl	8000860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cbc:	d902      	bls.n	8002cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e002      	b.n	8002cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_Init+0xa0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	f003 0204 	and.w	r2, r3, #4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <LL_RCC_GetUSARTClockSource>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4013      	ands	r3, r2
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_GetLPUARTClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4013      	ands	r3, r2
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e042      	b.n	8002e62 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd fd66 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	@ 0x24
 8002df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa51 	bl	80032bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f826 	bl	8002e6c <UART_SetConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01b      	b.n	8002e62 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fad0 	bl	8003400 <UART_CheckIdleState>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b08c      	sub	sp, #48	@ 0x30
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4baf      	ldr	r3, [pc, #700]	@ (8003158 <UART_SetConfig+0x2ec>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4aa4      	ldr	r2, [pc, #656]	@ (800315c <UART_SetConfig+0x2f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ee2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	f023 010f 	bic.w	r1, r3, #15
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a95      	ldr	r2, [pc, #596]	@ (8003160 <UART_SetConfig+0x2f4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <UART_SetConfig+0xf0>
 8002f10:	2003      	movs	r0, #3
 8002f12:	f7ff ff3a 	bl	8002d8a <LL_RCC_GetUSARTClockSource>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d81b      	bhi.n	8002f54 <UART_SetConfig+0xe8>
 8002f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <UART_SetConfig+0xb8>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e042      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e03e      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f44:	2304      	movs	r3, #4
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e03a      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f52:	e036      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f54:	2310      	movs	r3, #16
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e032      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7e      	ldr	r2, [pc, #504]	@ (800315c <UART_SetConfig+0x2f0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d12a      	bne.n	8002fbc <UART_SetConfig+0x150>
 8002f66:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002f6a:	f7ff ff1e 	bl	8002daa <LL_RCC_GetLPUARTClockSource>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f74:	d01a      	beq.n	8002fac <UART_SetConfig+0x140>
 8002f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f7a:	d81b      	bhi.n	8002fb4 <UART_SetConfig+0x148>
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f80:	d00c      	beq.n	8002f9c <UART_SetConfig+0x130>
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f86:	d815      	bhi.n	8002fb4 <UART_SetConfig+0x148>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <UART_SetConfig+0x128>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f90:	d008      	beq.n	8002fa4 <UART_SetConfig+0x138>
 8002f92:	e00f      	b.n	8002fb4 <UART_SetConfig+0x148>
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e012      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e00e      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e00a      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002fac:	2308      	movs	r3, #8
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb2:	e006      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e002      	b.n	8002fc2 <UART_SetConfig+0x156>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	@ (800315c <UART_SetConfig+0x2f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 8097 	bne.w	80030fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d823      	bhi.n	800301e <UART_SetConfig+0x1b2>
 8002fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <UART_SetConfig+0x170>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	0800301f 	.word	0x0800301f
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	0800301f 	.word	0x0800301f
 8002fec:	0800300f 	.word	0x0800300f
 8002ff0:	0800301f 	.word	0x0800301f
 8002ff4:	0800301f 	.word	0x0800301f
 8002ff8:	0800301f 	.word	0x0800301f
 8002ffc:	08003017 	.word	0x08003017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7ff f91c 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003004:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003006:	e010      	b.n	800302a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b56      	ldr	r3, [pc, #344]	@ (8003164 <UART_SetConfig+0x2f8>)
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800300c:	e00d      	b.n	800302a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7ff f893 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003012:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003014:	e009      	b.n	800302a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800301c:	e005      	b.n	800302a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 812b 	beq.w	8003288 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	4a4c      	ldr	r2, [pc, #304]	@ (8003168 <UART_SetConfig+0x2fc>)
 8003038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800303c:	461a      	mov	r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	fbb3 f3f2 	udiv	r3, r3, r2
 8003044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	429a      	cmp	r2, r3
 8003054:	d305      	bcc.n	8003062 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d903      	bls.n	800306a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003068:	e10e      	b.n	8003288 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2200      	movs	r2, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	60fa      	str	r2, [r7, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	4a3c      	ldr	r2, [pc, #240]	@ (8003168 <UART_SetConfig+0x2fc>)
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2200      	movs	r2, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800308c:	f7fd f876 	bl	800017c <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	020b      	lsls	r3, r1, #8
 80030a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030a6:	0202      	lsls	r2, r0, #8
 80030a8:	6979      	ldr	r1, [r7, #20]
 80030aa:	6849      	ldr	r1, [r1, #4]
 80030ac:	0849      	lsrs	r1, r1, #1
 80030ae:	2000      	movs	r0, #0
 80030b0:	460c      	mov	r4, r1
 80030b2:	4605      	mov	r5, r0
 80030b4:	eb12 0804 	adds.w	r8, r2, r4
 80030b8:	eb43 0905 	adc.w	r9, r3, r5
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	469a      	mov	sl, r3
 80030c4:	4693      	mov	fp, r2
 80030c6:	4652      	mov	r2, sl
 80030c8:	465b      	mov	r3, fp
 80030ca:	4640      	mov	r0, r8
 80030cc:	4649      	mov	r1, r9
 80030ce:	f7fd f855 	bl	800017c <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4613      	mov	r3, r2
 80030d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e0:	d308      	bcc.n	80030f4 <UART_SetConfig+0x288>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e8:	d204      	bcs.n	80030f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a3a      	ldr	r2, [r7, #32]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e0c9      	b.n	8003288 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030fa:	e0c5      	b.n	8003288 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003104:	d16d      	bne.n	80031e2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800310a:	3b01      	subs	r3, #1
 800310c:	2b07      	cmp	r3, #7
 800310e:	d82d      	bhi.n	800316c <UART_SetConfig+0x300>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <UART_SetConfig+0x2ac>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003139 	.word	0x08003139
 800311c:	08003141 	.word	0x08003141
 8003120:	0800316d 	.word	0x0800316d
 8003124:	08003147 	.word	0x08003147
 8003128:	0800316d 	.word	0x0800316d
 800312c:	0800316d 	.word	0x0800316d
 8003130:	0800316d 	.word	0x0800316d
 8003134:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff f896 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800313e:	e01b      	b.n	8003178 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <UART_SetConfig+0x2f8>)
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003144:	e018      	b.n	8003178 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7fe fff7 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800314a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800314c:	e014      	b.n	8003178 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003154:	e010      	b.n	8003178 <UART_SetConfig+0x30c>
 8003156:	bf00      	nop
 8003158:	cfff69f3 	.word	0xcfff69f3
 800315c:	40008000 	.word	0x40008000
 8003160:	40013800 	.word	0x40013800
 8003164:	00f42400 	.word	0x00f42400
 8003168:	08003a3c 	.word	0x08003a3c
      default:
        pclk = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003176:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8084 	beq.w	8003288 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	4a4b      	ldr	r2, [pc, #300]	@ (80032b4 <UART_SetConfig+0x448>)
 8003186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800318a:	461a      	mov	r2, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003192:	005a      	lsls	r2, r3, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	441a      	add	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d916      	bls.n	80031da <UART_SetConfig+0x36e>
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b2:	d212      	bcs.n	80031da <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f023 030f 	bic.w	r3, r3, #15
 80031bc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	8bfb      	ldrh	r3, [r7, #30]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	8bfa      	ldrh	r2, [r7, #30]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e056      	b.n	8003288 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031e0:	e052      	b.n	8003288 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	3b01      	subs	r3, #1
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d822      	bhi.n	8003232 <UART_SetConfig+0x3c6>
 80031ec:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <UART_SetConfig+0x388>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003215 	.word	0x08003215
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003223 	.word	0x08003223
 8003204:	08003233 	.word	0x08003233
 8003208:	08003233 	.word	0x08003233
 800320c:	08003233 	.word	0x08003233
 8003210:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7ff f828 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321a:	e010      	b.n	800323e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <UART_SetConfig+0x44c>)
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003220:	e00d      	b.n	800323e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe ff89 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003228:	e009      	b.n	800323e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003230:	e005      	b.n	800323e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800323c:	bf00      	nop
    }

    if (pclk != 0U)
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d021      	beq.n	8003288 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	4a1a      	ldr	r2, [pc, #104]	@ (80032b4 <UART_SetConfig+0x448>)
 800324a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324e:	461a      	mov	r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	fbb3 f2f2 	udiv	r2, r3, r2
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d909      	bls.n	8003282 <UART_SetConfig+0x416>
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d205      	bcs.n	8003282 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	b29a      	uxth	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e002      	b.n	8003288 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2201      	movs	r2, #1
 800328c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2201      	movs	r2, #1
 8003294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2200      	movs	r2, #0
 800329c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3730      	adds	r7, #48	@ 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b2:	bf00      	nop
 80032b4:	08003a3c 	.word	0x08003a3c
 80032b8:	00f42400 	.word	0x00f42400

080032bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ba:	d10a      	bne.n	80033d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b098      	sub	sp, #96	@ 0x60
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003410:	f7fd fbc6 	bl	8000ba0 <HAL_GetTick>
 8003414:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d12f      	bne.n	8003484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f88e 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d022      	beq.n	8003484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003452:	653b      	str	r3, [r7, #80]	@ 0x50
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800345c:	647b      	str	r3, [r7, #68]	@ 0x44
 800345e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800346a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e6      	bne.n	800343e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e063      	b.n	800354c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d149      	bne.n	8003526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003492:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f857 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d03c      	beq.n	8003526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80034cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e6      	bne.n	80034ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034fe:	61fa      	str	r2, [r7, #28]
 8003500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	617b      	str	r3, [r7, #20]
   return(result);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e012      	b.n	800354c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3758      	adds	r7, #88	@ 0x58
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e04f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d04b      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fb17 	bl	8000ba0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <UART_WaitOnFlagUntilTimeout+0x30>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e04e      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d037      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d034      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d031      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d110      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f838 	bl	800362e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2208      	movs	r2, #8
 80035c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e029      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e0:	d111      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f81e 	bl	800362e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e00f      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d0a0      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362e:	b480      	push	{r7}
 8003630:	b095      	sub	sp, #84	@ 0x54
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003654:	643b      	str	r3, [r7, #64]	@ 0x40
 8003656:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800368c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e3      	bne.n	8003668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d118      	bne.n	80036da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0310 	bic.w	r3, r3, #16
 80036bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	613b      	str	r3, [r7, #16]
   return(result);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036ee:	bf00      	nop
 80036f0:	3754      	adds	r7, #84	@ 0x54
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_DisableFifoMode+0x16>
 800370c:	2302      	movs	r3, #2
 800370e:	e027      	b.n	8003760 <HAL_UARTEx_DisableFifoMode+0x66>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800373e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e02d      	b.n	80037e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f84f 	bl	8003864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e02d      	b.n	800385c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	@ 0x24
 800380c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f811 	bl	8003864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003884:	e031      	b.n	80038ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003886:	2308      	movs	r3, #8
 8003888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800388a:	2308      	movs	r3, #8
 800388c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	0f5b      	lsrs	r3, r3, #29
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ae:	7bbb      	ldrb	r3, [r7, #14]
 80038b0:	7b3a      	ldrb	r2, [r7, #12]
 80038b2:	4911      	ldr	r1, [pc, #68]	@ (80038f8 <UARTEx_SetNbDataToProcess+0x94>)
 80038b4:	5c8a      	ldrb	r2, [r1, r2]
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ba:	7b3a      	ldrb	r2, [r7, #12]
 80038bc:	490f      	ldr	r1, [pc, #60]	@ (80038fc <UARTEx_SetNbDataToProcess+0x98>)
 80038be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	7b7a      	ldrb	r2, [r7, #13]
 80038d0:	4909      	ldr	r1, [pc, #36]	@ (80038f8 <UARTEx_SetNbDataToProcess+0x94>)
 80038d2:	5c8a      	ldrb	r2, [r1, r2]
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038d8:	7b7a      	ldrb	r2, [r7, #13]
 80038da:	4908      	ldr	r1, [pc, #32]	@ (80038fc <UARTEx_SetNbDataToProcess+0x98>)
 80038dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038de:	fb93 f3f2 	sdiv	r3, r3, r2
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08003a54 	.word	0x08003a54
 80038fc:	08003a5c 	.word	0x08003a5c

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4d0d      	ldr	r5, [pc, #52]	@ (8003948 <__libc_init_array+0x38>)
 8003914:	4c0d      	ldr	r4, [pc, #52]	@ (800394c <__libc_init_array+0x3c>)
 8003916:	1b64      	subs	r4, r4, r5
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	2600      	movs	r6, #0
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	4d0b      	ldr	r5, [pc, #44]	@ (8003950 <__libc_init_array+0x40>)
 8003922:	4c0c      	ldr	r4, [pc, #48]	@ (8003954 <__libc_init_array+0x44>)
 8003924:	f000 f818 	bl	8003958 <_init>
 8003928:	1b64      	subs	r4, r4, r5
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	2600      	movs	r6, #0
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	08003a6c 	.word	0x08003a6c
 800394c:	08003a6c 	.word	0x08003a6c
 8003950:	08003a6c 	.word	0x08003a6c
 8003954:	08003a70 	.word	0x08003a70

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
